import{R as y,J as h,K as S,N as u,O as v}from"./index-CY0cZcsW.js";const d="up",g="down",f="left",l="right",k={ArrowUp:"up",ArrowDown:"down",ArrowLeft:"left",ArrowRight:"right",w:"up",s:"down",a:"left",d:"right"},b=(i,e)=>i===d&&e!==g||i===g&&e!==d||i===f&&e!==l||i===l&&e!==f?e:i,s={width:800,height:480,foodColor:"#77AF53",playerColor:"#FFFFFF",worldColor:"#3C8ABC",snakeEyeColor:"#000000",snakeWidth:20,snakeHeight:20,gridSize:20,startingLength:5,maxSpeed:4,startingSpeed:10},x=()=>{const i=s.gridSize,e=Math.max(Math.random()*s.width-i,0),t=Math.max(Math.random()*s.height-i,0);return{x:e-e%i,y:t-t%i}},w=(i=!0)=>{const{gridSize:e,startingSpeed:t}=s,a=e*10;return{play:i,snake:{body:Array.from({length:5},(c,r)=>({x:a+-r*e,y:a})),width:e,height:e,direction:l,lastDirection:l},frame:0,speed:t,step:e,food:x()}},p=({x:i,y:e},t)=>{const{body:a}=t.snake,{width:n,height:c}=s;return i<0||i>n-t.snake.width||e<0||e>c-t.snake.height?!0:a.find(r=>r.x===i&&r.y===e)!==void 0};var C=Object.defineProperty,F=(i,e,t)=>e in i?C(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t,o=(i,e,t)=>F(i,typeof e!="symbol"?e+"":e,t);class T extends y.Component{constructor(){super(...arguments),o(this,"canvas",y.createRef()),o(this,"ctx",null),o(this,"gameState",w()),o(this,"gameLoop",null),o(this,"drawFood",()=>{this.ctx&&(this.ctx.fillStyle=s.foodColor,this.ctx.fillRect(this.gameState.food.x,this.gameState.food.y,s.snakeWidth,s.snakeHeight))}),o(this,"drawSnake",()=>{if(!this.ctx)return;this.ctx.fillStyle=s.playerColor;const e=this.gameState.snake.body.length;this.gameState.snake.body.forEach((t,a)=>{if(this.ctx!==null){if(a!==e-1)this.ctx.fillRect(t.x+(a%2===0?0:1),t.y+(a%2===0?0:1),s.snakeWidth+(a%2===0?0:-2),s.snakeHeight+(a%2===0?0:-2));else{const n=this.gameState.snake.body[a-1];this.ctx.beginPath(),t.x===n.x?t.y>n.y?(this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(t.x+s.snakeWidth,t.y),this.ctx.lineTo(t.x+s.snakeWidth/2,t.y+s.snakeHeight)):(this.ctx.moveTo(t.x,t.y+s.snakeHeight),this.ctx.lineTo(t.x+s.snakeWidth,t.y+s.snakeHeight),this.ctx.lineTo(t.x+s.snakeWidth/2,t.y)):t.x>n.x?(this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(t.x,t.y+s.snakeHeight),this.ctx.lineTo(t.x+s.snakeWidth,t.y+s.snakeHeight/2)):(this.ctx.moveTo(t.x+s.snakeWidth,t.y),this.ctx.lineTo(t.x+s.snakeWidth,t.y+s.snakeHeight),this.ctx.lineTo(t.x,t.y+s.snakeHeight/2)),this.ctx.closePath(),this.ctx.fill()}if(a===0){this.ctx.fillStyle=s.snakeEyeColor;const n=2,c=s.snakeWidth/4,r=s.snakeHeight/4;this.ctx.fillRect(t.x+c,t.y+r,n,n),this.ctx.fillRect(t.x+s.snakeWidth-c-n,t.y+r,n,n),this.ctx.fillStyle=s.playerColor}}})}),o(this,"drawWorld",()=>{if(!this.ctx)return;const{worldColor:e,width:t,height:a}=s;this.ctx.fillStyle=e,this.ctx.fillRect(0,0,t,a)}),o(this,"calcNextHeadPos",()=>{const[e]=this.gameState.snake.body;let{x:t,y:a}=e;return this.gameState.snake.lastDirection=this.gameState.snake.direction,this.gameState.snake.direction===d?(a-=this.gameState.step,{x:t,y:a}):this.gameState.snake.direction===g?(a+=this.gameState.step,{x:t,y:a}):this.gameState.snake.direction===f?(t-=this.gameState.step,{x:t,y:a}):(t+=this.gameState.step,{x:t,y:a})}),o(this,"growSnake",()=>{this.gameState.snake.body.unshift(this.gameState.snake.body[0])}),o(this,"eatMaybe",()=>{const[e]=this.gameState.snake.body,{x:t,y:a}=e,{x:n,y:c}=this.gameState.food;if(t===n&&a===c){let r=x();for(let m=0;m<10&&p(r,this.gameState);m++)r=x();this.gameState.food=r,this.growSnake(),this.setNewSpeed()}}),o(this,"setNewSpeed",()=>{const e=this.gameState.snake.body.length%5?this.gameState.speed:this.gameState.speed-1;this.gameState.speed=Math.max(e,s.maxSpeed)}),o(this,"updateCanvas",()=>{if(this.gameState.frame%this.gameState.speed){this.tick();return}if(!this.gameState.play||!this.ctx||!this.canvas.current)return;this.ctx.clearRect(0,0,s.width,s.height),this.drawWorld();const{x:e,y:t}=this.calcNextHeadPos();if(p({x:e,y:t},this.gameState)){this.drawFood(),this.drawSnake(),this.props.onDie(this.gameState.snake.body.length-s.startingLength);return}this.gameState.snake.body.unshift({x:e,y:t}),this.gameState.snake.body.pop(),this.drawFood(),this.drawSnake(),this.eatMaybe(),this.tick()}),o(this,"reset",()=>{this.gameState=w()}),o(this,"tick",()=>{this.gameState.frame+=1,window.requestAnimationFrame(()=>{this.updateCanvas()})})}componentDidMount(){this.canvas.current&&(this.ctx=this.canvas.current.getContext("2d"),this.canvas.current.addEventListener("keydown",e=>{const{key:t}=e;t in k&&(e.preventDefault(),this.gameState.snake.direction=b(this.gameState.snake.lastDirection,k[t]))}),this.updateCanvas(),this.canvas.current.focus())}componentDidUpdate(){this.gameState.play!==this.props.play&&(this.gameState.play=this.props.play,this.props.play&&(this.canvas.current?.focus(),this.reset(),this.updateCanvas()))}render(){return h.jsx("canvas",{width:`${s.width}px`,height:`${s.height}px`,tabIndex:1,ref:this.canvas})}}const W=()=>{const[i,e]=S.useState(!1),[t,a]=S.useState(),n=t!==void 0;return h.jsxs("div",{className:"relative flex w-full items-center justify-center p-2",children:[!i&&h.jsxs("div",{className:"text-palette-neutral-text-inverse absolute top-1/3 flex flex-col gap-2 text-center",children:[h.jsxs(u,{variant:"h4",children:[n?"Game Over":"Snake game","!"]}),h.jsxs(v,{onClick:()=>e(!0),className:"mx-auto mt-6 w-fit",children:["Play ",n&&"again"]}),h.jsx(u,{variant:"body-large",children:n?h.jsxs(h.Fragment,{children:["Your score: ",t]}):h.jsxs(h.Fragment,{children:["Use ",h.jsx("b",{children:"arrow keys"})," or ",h.jsx("b",{children:"w-a-s-d"})," to control the snake. ",h.jsx("div",{children:"How much food can you eat?"})]})})]}),h.jsx(T,{play:i,onDie:c=>{a(c),e(!1)}})]})};export{W as default};
