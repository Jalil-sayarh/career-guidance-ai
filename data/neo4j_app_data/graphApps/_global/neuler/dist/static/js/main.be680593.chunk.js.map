{"version":3,"sources":["serviceWorker.js","services/stores/neoStore.js","ducks/tasks.js","components/Form/OpenCloseSection.js","components/Form/ProjectedGraph.js","components/Form/StoreProperty.js","components/Centralities/PageRankForm.js","services/resultMapper.js","services/centralities.js","services/queries.js","components/Centralities/CentralityForm.js","components/Centralities/DegreeForm.js","components/Communities/LouvainForm.js","services/communityDetection.js","components/Communities/CommunityResult.js","components/Communities/LabelPropagationForm.js","components/Communities/ConnectedComponentsForm.js","components/Communities/CommunityForm.js","components/Communities/StronglyConnectedComponentsForm.js","components/Form/ResultsFiltering.js","components/Communities/StreamOnlyForm.js","components/Communities/TrianglesForm.js","components/Communities/TrianglesResult.js","components/Communities/LouvainResult.js","components/Communities/NewTriangleCountResult.js","components/Communities/NewTriangleCountForm.js","components/Communities/LocalClusteringCoefficientResult.js","components/Communities/NewLocalClusteringCoefficientForm.js","components/Communities/ModularityOptimizationForm.js","components/Communities/K1ColoringForm.js","components/Communities/SLLPA/Form.js","components/Communities/SLLPA/Result.js","components/Communities/algorithmsDictionary.js","ducks/settings.js","ducks/metadata.js","components/Onboarding/UpdateNodeLabel.js","components/NodeLabel.js","components/NodeLabelWithSimilarity.js","components/PropertiesView.js","components/Centralities/CentralityResult.js","components/Centralities/ClosenessCentralityForm.js","components/Centralities/NewApproxBetweennessForm.js","components/Centralities/HITS/Result.js","components/Centralities/HITS/Form.js","components/Centralities/Eigenvector/Form.js","components/Centralities/algorithmsDictionary.js","components/Centralities/BetweennesForm.js","services/embedding.js","components/GraphEmbeddings/Result.js","components/GraphEmbeddings/Node2Vec/1.6/Form.js","components/GraphEmbeddings/FastRP/1.4/Form.js","components/GraphEmbeddings/algorithmsDictionary.js","services/pathFinding.js","components/PathFinding/PathFindingResult.js","components/PathFinding/ShortestPathForm.js","components/PathFinding/AStarForm.js","components/PathFinding/SingleSourceShortestPathForm.js","components/PathFinding/AllPairsShortestPathResult.js","components/PathFinding/algorithmsDictionary.js","components/PathFinding/AllPairsShortestPathForm.js","services/similarity.js","components/Form/StorePropertyAndRelationshipType.js","components/Similarity/Parameters.js","components/Similarity/SimilarityResult.js","components/Similarity/WeightedSimilarityForm.js","components/Similarity/CosineForm.js","components/Similarity/PearsonForm.js","components/Similarity/OverlapForm.js","components/Similarity/EuclideanForm.js","components/Similarity/KNNForm.js","components/Similarity/KNNFormNew.js","components/Similarity/KNNResult.js","components/Similarity/NodeSimilarityForm.js","components/Similarity/algorithmsDictionary.js","components/Similarity/JaccardForm.js","components/algorithmsLibrary.js","ducks/algorithms.js","ducks/connection.js","ducks/menu.js","ducks/index.js","services/installation.js","constants.js","components/metrics/sendMetrics.js","components/AlgorithmGroupsMenu.js","components/CheckGraphAlgorithmsInstalled.js","components/CheckAPOCInstalled.js","services/metadata.js","components/Startup/startup.js","components/Render.js","components/ConnectModal.js","services/graph-app-kit/helpers.js","services/connections.js","components/Onboarding/SelectedDatabase.js","components/Onboarding/WhatIsMissing.js","components/SelectDatabase.js","components/Startup/WebAppLoadingArea.js","components/Startup/LoadingIcon.js","components/SampleGraphs/sampleGraphs.js","components/Feedback/FeedbackForm.js","components/Startup/WebApp.js","components/About.js","components/Datasets.js","components/Home.js","components/Results/FailedTopBar.js","components/SelectAlgorithm.js","components/AlgorithmForm.js","components/renderParams.js","components/CodeView.js","components/Results/SuccessTopBar.js","components/visualisation/Chart.js","components/Results/ChartView.js","components/NewAlgorithmModal.js","services/tasks.js","components/AlgoResults.js","components/Results/TableView.js","components/visualisation/VisConfigurationBar.js","components/visualisation/NewGraphVisualiser.js","components/Results/NewVisView.js","components/visualisation/TSNEVisualizer.js","components/Results/TSNEView.js","components/SingleTask.js","components/SpecificTask.js","components/MainContent.js","components/NewAlgorithm.js","components/Recipes.js","components/Recipe.js","index.js"],"names":["Boolean","window","location","hostname","match","neoDriver","neo4jVersion","ADD_TASK","concat","RUN_TASK","COMPLETE_TASK","REMOVE_TASK","ADDED","RUNNING","COMPLETED","addTask","_ref","taskId","group","algorithm","startTime","parameters","formParameters","persisted","query","database","type","runTask","_ref2","namedGraphQueries","completeTask","_ref3","result","error","removeTask","_ref4","OpenCloseSection","title","children","className","_React$useState","React","useState","_React$useState2","Object","slicedToArray","open","setOpen","style","display","react_default","a","createElement","Segment","Label","as","attached","onClick","ProjectedGraph","readOnly","label","labelOptions","relationshipType","direction","relationshipTypeOptions","relPropertyKeyOptions","relationshipOrientationOptions","weightProperty","propertyKeyOptions","defaultValue","onChange","showWeightProperty","OpenCloseSection_OpenCloseSection","Form","Field","inline","width","Dropdown","disabled","placeholder","value","search","selection","options","evt","data","Input","size","basic","target","ProjectedGraphWithWeights","props","projectedGraphProps","objectSpread","ProjectedGraph_ProjectedGraph","ProjectedGraphWithNoWeights","StoreProperty","persist","writeProperty","alignItems","Checkbox","toggle","checked","Divider","PageRankParameters","maxIterations","dampingFactor","control","min","max","step","PageRankForm","marginBottom","ProjectedGraph_ProjectedGraphWithWeights","PageRankForm_PageRankParameters","StoreProperty_StoreProperty","activeDatabase","getDriver","getNeo4jVersion","getActiveDatabase","hasNamedDatabase","mainNeo4jVersion","onNewConnection","credentials","driver","host","auth","username","password","verifyConnectivity","then","onNeo4jVersion","version","split","Promise","resolve","onActiveDatabase","getSession","session","extractMainVersion","fullVersion","parseInt","slice","join","runCypher","cypher","arguments","length","undefined","run","runCypherSystemDatabase","runStreamQuery","streamCypher","parseResultStreamFn","gdsMainVersion","gdsVersion","generatedName","Date","now","createGraph","graphConfig","nodeProperties","dropGraph","reject","catch","runStoreQuery","storeCypher","fetchCypher","parseProperties","properties","keys","reduce","propKey","isInt","toNumber","Array","isArray","map","item","toString","isDate","isDateTime","isDuration","isLocalDateTime","isLocalTime","runAlgorithm","parseResultStream","records","rows","record","_record$get","get","labels","identity","score","ids","row","toConsumableArray","Set","flatMap","console","Error","parseHITSResultStream","_record$get2","hubScore","authScore","streamQueryOutline","callAlgorithm","communityStreamQueryOutline","getFetchCypher","config","escapedLabel","nodeProjection","getCommunityFetchCypher","onePoint5PathFindingParams","startNode","endNode","latitudeProperty","longitudeProperty","clusteringCoefficientProperty","communityProperty","includeIntermediateCommunities","intermediateCommunitiesWriteProperty","limit","requiredProperties","params","parsedWeightProperty","trim","parsedWriteProperty","relationshipProjection","createRelationshipProjection","relationshipWeightProperty","write","nodeLabel","filterParameters","pre1Point5PathFindingParams","delta","propertyKeyLat","propertyKeyLon","addPersistFields","writeRelationshipType","knnParamsNew","_ref6","nodeWeightProperty","topK","sampleRate","deltaThreshold","randomJoins","similarityMetric","int","parseFloat","push","similarityParams","_ref7","itemLabel","categoryLabel","similarityCutoff","degreeCutoff","communityParams","_ref8","minAssociationStrength","tolerance","seedProperty","communityNodeLimit","baseParameters","parsedIterations","parsedTolerance","centralityParams","_ref9","hitsIterations","maxDepth","probability","strategy","normalization","samplingSize","parsedProbability","parsedMaxDepth","parsedHitsIterations","parsedSamplingSize","embeddingParams","_ref10","iterations","embeddingDimension","walkLength","inOutFactor","returnFactor","modelName","batchSize","normalizationStrength","embeddingSize","parsedMaxIterations","parsedEmbeddingDimension","parsedEmbeddingSize","parsedBatchSize","parsedWalkLength","parsedInoutFactor","parsedReturnFactor","parsedNormalizationStrength","defineProperty","orientation","toUpperCase","property","raw","allowed","filter","key","includes","obj","CentralityForm","Fragment","ProjectedGraph_ProjectedGraphWithNoWeights","DegreeForm","Parameters","LouvainForm","parameterProps","LouvainForm_Parameters","_ref$parseResultStrea","nodes","communities","has","node","community","LoaderExampleInlineCentered","Loader","active","CommunityResult","task","Tab","Pane","toLocaleString","padding","borderTop","Table","color","Header","Row","HeaderCell","Body","idx","Cell","components_PropertiesView","colSpan","CommunityResult_LoaderExampleInlineCentered","AlgoForm","CommunityForm","ResultFilteringFields","returnsCommunities","updateCommunityNodeLimit","updateLimit","ResultsFilteringWrapper","ResultsFiltering_ResultsFilteringWrapper","StreamOnlyForm","text","ModularityOptimizationForm_Parameters","K1ColoringForm_Parameters","SLLPAForm","Form_Parameters","removeSpacing","replace","commonParameters","commonRelWeightParameters","algorithms","Louvain","algorithmName","parametersBuilder","service","ResultView","index","LouvainResult_LoaderExampleInlineCentered","streamQuery","storeQuery","getFetchQuery","description","SLLPA","_ref5","Result_LoaderExampleInlineCentered","Modularity Optimization","ModularityOptimizationForm","K1-Coloring","K1ColoringForm","Label Propagation","LabelPropagationForm","Connected Components","ConnectedComponentsForm","Strongly Connected Components","StronglyConnectedComponentsForm","Local Clustering Coefficient","coefficient","LocalClusteringCoefficientResult_LoaderExampleInlineCentered","NewLocalClusteringCoefficientForm","Triangle Count","NewTriangleCountForm","triangles","NewTriangleCountResult_LoaderExampleInlineCentered","Triangles","TrianglesForm","nodeA","nodeB","nodeC","nodeAProperties","nodeALabels","nodeAIdentity","nodeBProperties","nodeBLabels","nodeBIdentity","nodeCProperties","nodeCLabels","nodeCIdentity","TrianglesResult_LoaderExampleInlineCentered","algorithmsDictionary","algorithmList","algorithmDefinitions","SET","LIMIT","COMMUNITY_NODE_LIMIT","HIDE_PROPERTY","RESET_LABELS","getBlacklist","blacklist","values","centralityDict","communityDict","forEach","definition","add","from","SET_METADATA","SET_LABELS","SET_RELATIONSHIPTYPES","SET_PROPERTY_KEYS","SET_NODE_PROPERTY_KEYS","SET_REL_PROPERTY_KEYS","SET_VERSIONS","SET_DATABASES","SET_ACTIVE_DATABASE","ADD_DATABASE","INIT_LABEL","UPDATE_LABEL_COLOR","UPDATE_LABEL_PROPERTY_KEYS","setLabels","setRelationshipTypes","relationshipTypes","setPropertyKeys","propertyKeys","setNodePropertyKeys","nodePropertyKeys","setRelPropertyKeys","relPropertyKeys","setVersions","setDatabases","databases","setActiveDatabase","addDatabase","initLabel","initialState","allLabels","getNodeLabel","globalLabels","SelectCaption","connect","state","metadata","dispatch","updateLabelPropertyKeys","_React$useState5","_React$useState6","selectedPropertyKeys","setSelectedPropertyKeys","Grid","columns","Column","name","_","updateLabelColor","displayColorPicker","setDisplayColorPicker","_React$useState3","_React$useState4","setColor","useEffect","styles","reactCSS","default","height","borderRadius","background","swatch","boxShadow","cursor","popover","position","zIndex","cover","top","right","bottom","left","Modal","onClose","onOpen","centered","closeIcon","Content","react_color_es","disableAlpha","c","hex","onChangeComplete","randomColor","require","tenOf","count","hue","luminosity","colors","generateCellStyle","labelBackgrounds","_len","args","_key","level","getNested","caption","maxWidth","overflow","Onboarding_UpdateNodeLabel","similarity","hiddenProperties","settings","hideProp","hideProperty","resetLabelsProperties","firstLabel","captionProps","components_NodeLabelWithSimilarity","components_NodeLabel","CentralityResult","textAlign","CentralityResult_LoaderExampleInlineCentered","ClosenessCentralityForm","EigenvectorParameters","EigenvectorForm","Form_EigenvectorParameters","HITS","HITS_Form_Parameters","HITS_Result_LoaderExampleInlineCentered","Page Rank","Harmonic","Degree","Eigenvector","Article Rank","Betweenness","Approx Betweenness","NewApproxBetweennessForm_Parameters","baseCloseness","Centralities_algorithmsDictionary","mainVersion","embedding","GraphEmbeddings_Result","GraphEmbeddings_Result_LoaderExampleInlineCentered","windowSize","Node2VecForm","_1_6_Form_Parameters","FastRPForm","_1_4_Form_Parameters","Node2Vec","Node2VecForm_1Point6","Result","FastRP","FastRPForm_1Point4","GraphEmbeddings_algorithmsDictionary","runStreamingAlgorithm","cost","PathFindingResult","colspan","PathFindingResult_LoaderExampleInlineCentered","Group","Popup","trigger","content","ShortestPathForm_Parameters","AStarForm_Parameters","SingleSourceShortestPathForm_Parameters","All Pairs Shortest Path","source","sourceProperties","sourceLabels","sourceIdentity","targetProperties","targetLabels","targetIdentity","AllPairsShortestPathResult_LoaderExampleInlineCentered","nodeQuery","relationshipQuery","Shortest Path","ShortestPathForm","findStartEndNodes","namedGraphStreamQuery","A*","AStarForm","Single Source Shortest Path","SingleSourceShortestPathForm","findStartNode","PathFinding_algorithmsDictionary","handleException","runAlgorithmOld","_ref3$parseResultStre","runStreamingAlgorithmOld","to","fromProperties","fromLabels","fromIdentity","toProperties","toLabels","toIdentity","constructSimilarityMaps","category","itemNode","notAll","rel","categoryNode","constructWeightedSimilarityMaps","StorePropertyAndRelationshipType","SimilarityResult","SimilarityResult_LoaderExampleInlineCentered","SimilarityGraph","WeightedSimilarityForm_SimilarityGraph","Parameters_Parameters","StorePropertyAndRelationshipType_StorePropertyAndRelationshipType","WeightedSimilarityForm","KNNForm_Parameters","similarityMetricOptions","el","KNNFormNew_Parameters","constructStreamingQueryGetter","constructMapsFn","constructStoreQueryGetter","constructFetchQuery","itemNode1","itemNode2","Jaccard","Overlap","OverlapForm_SimilarityGraph","Cosine","CosineForm","Pearson","PearsonForm","Euclidean","EuclideanForm","Node Similarity","NodeSimilarityForm","knnBase","KNNForm","m","toFixed","KNNResult_LoaderExampleInlineCentered","Similarity_algorithmsDictionary","KNNFormNew","assign","algorithmGroups","Centralities","centralitiesDictionary","Community Detection","communitiesDictionary","Path Finding","pathFindingDictionary","Similarity","similarityDictionary","Graph Embeddings","embeddingsDictionary","getAlgorithms","getAlgorithmDefinitions","getGroup","algorithmToGroup","SELECT_GROUP","SELECT_ALGORITHM","selectGroup","selectAlgorithm","SET_STATUS","SET_CREDENTIALS","SET_CONNECTED","SET_DISCONNECTED","setDisconnected","status","SELECT_MENU_ITEM","reducers","action","menu","tasks","newState","unshift","completed","existingTasks","theTask","find","versions","initialLabels","initLabels","startLabels","connections","_ALL_NEULER_","hiddenPropertiesMap","combineReducers","findApocProceduresCypher","checkApocMetaProcedure","findGraphAlgosProceduresCypher","constants","env","href","indexOf","mixpanelId","dev","prod","defaultLimit","defaultCommunityNodeLimit","mixpanel","init","sendMetrics","neo4jDesktopApi","track","eventName","navStyle","url","URL","publicPathTo","append","protocol","pathname","activeAlgorithm","activeMenuItem","setDatasetsActive","justifyContent","Image","src","react_router_dom","exact","activeClassName","Icon","flowing","hoverable","List","Item","MissingLibraryOnDesktop","align","Message","MissingLibraryOnWebapp","CheckGraphAlgorithmsInstalled","_useState","_useState2","checkComplete","setCheckComplete","_useState3","_useState4","algorithmsInstalled","setAlgorithmsInstalled","isSubscribed","gdsInstalled","library","didNotFindPlugin","header","desktop","CheckGraphAlgorithmsInstalled_MissingLibraryOnDesktop","CheckGraphAlgorithmsInstalled_MissingLibraryOnWebapp","MetaUnavailable","sandboxSetting","react_clipboard_default","onSuccess","event","textContent","setTimeout","button-className","data-clipboard-text","pluginInstalled","setPluginInstalled","_useState5","_useState6","metaAvailable","setMetaAvailable","apocInstalled","apocMetaProcedureAvailable","CheckAPOCInstalled_MetaUnavailable","CheckAPOCInstalled_MissingLibraryOnDesktop","CheckAPOCInstalled_MissingLibraryOnWebapp","loadDatabases","parseDatabasesResultStream","loadMetadata","parseLabelsResultStream","parseRelTypesResultStream","relationships","parsePropertyKeysResultStream","parseNodePropertyKeysResultStream","propertyKey","parseGdsVersionResultStream","webAppSteps","refreshMetadata","firstConnection","finished","setGds","updateMetadata","selectedDatabase","Math","floor","random","selectedFavouriteCaptions","selectCaption","Render","cond","if","Children","only","defaultUrlComponents","scheme","port","address","schemeOptions","extractComponents","_url$split","_url$split2","theRest","option","urlParts","ConnectForm","errorMsg","extraErrorMessage","clearErrorMessages","setUsername","setPassword","setScheme","_React$useState7","_React$useState8","setAddress","_React$useState9","_React$useState10","setPort","_React$useState11","_React$useState12","rawServerAddress","setRawServerAddress","_React$useState13","_React$useState14","rawBoltUri","setRawBoltUri","onSubmit","boltUri","_boltUri$split","theScheme","hasError","setErrorMessage","setExtraErrorMessage","queryParameters","accessToken","_extractComponents","minWidth","margin","marginRight","components","updateComponentsFromRaw","Render_Render","fontStyle","Button","positive","icon","labelPosition","ConnectModal","_React$useState15","_React$useState16","initial","setInitial","ConnectModal_ConnectForm","getActiveProject","context","projects","project","graphs","getActiveGraph","activeProject","getActiveCredentials","activeGraph","connection","_connection$configura","configuration","constructor","protocols","getCredentials","getActiveDatabaseCredentials","creds","encrypted","tlsLevel","subscribeToDatabaseCredentialsForActiveGraph","integrationPoint","onNewActiveGraph","onNoActiveGraph","getContext","id","e","onContextUpdate","newContext","oldContext","tryConnect","runCypherDefaultDatabase","onRefresh","celled","collapsing","flexWrap","whatIsMissing","hasNodeLabels","hasRelationshipTypes","primary","hasNodesAndRelationships","connectionInfo","activeDatabaseSelected","setActiveDatabaseSelected","databaseOptions","Container","fluid","compact","marginLeft","paddingTop","Onboarding_SelectedDatabase","Onboarding_WhatIsMissing","_regeneratorRuntime","exports","Op","prototype","hasOwn","hasOwnProperty","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","WebAppLoadingArea","connectionStatus","isNeo4jDesktop","currentStep","setCurrentStep","setCurrentStepFailed","setConnected","setCurrentStepInProgress","prepareMetadata","failedCurrentStep","ConnectingToDatabase","components_CheckGraphAlgorithmsInstalled","CheckAPOCInstalled","WebAppLoadingArea_SelectDatabase","SelectDatabase","setSelectedDatabase","loadedDatabases","setLoadedDatabases","errorMessage","defaultDatabase","asyncToGenerator","_callee","_context","apply","tryingToConnect","ConnectModal_ConnectModal","db","message","show","LoadingIcon","steps","currentStepFailed","currentIndex","stepIndex","UserInputLoadingIcon","currentStepInProgress","sampleGraphs","4","Game of Thrones","author","authorLink","queries","European Roads","Twitter","Recipes","FIFA","5","postFeedback","body","formData","URLSearchParams","helpful","page","reason","moreInformation","fetch","mode","response","log","FeedbackForm","View","feedback","setFeedback","setPage","helpLink","success","FeedbackForm_FeedbackThanks","FeedbackForm_FeedbackFirstScreen","wasSuccessful","newFeedback","FeedbackForm_FeedbackSecondScreen","skip","submit","opacity","headerStyle","fontSize","borderTopLeftRadius","borderTopRightRadius","fontWeight","borderBottom","FeedbackFirstScreen","outerStyle","innerStyle","FeedbackSecondScreen","_useState7","_useState8","setReason","_useState9","_useState10","setMoreInformation","radio","TextArea","preventDefault","FeedbackThanks","setQueryParameters","qs","ignoreQueryPrefix","history","showNeuler","setShowNeuler","metadataLoaded","setMetadataLoaded","serverInfo","setServerInfo","setLimitDefaults","react_router","smallStyle","lineHeight","overflowY","inverted","vertical","LoadingIcon_UserInputLoadingIcon","LoadingIcon_LoadingIcon","paddingBottom","WebAppLoadingArea_WebAppLoadingArea","FeedbackForm_FeedbackForm","selectedStyle","SelectDataset","selectedDataset","CardGroup","Card","raised","Meta","Description","extra","ImportDataset","completedQueryIndexes","currentQueryIndex","loadDataset","queryIndex","whiteSpace","graph","Dimmer","SelectAlgorithms","useHistory","generateAlgorithmState","_getAlgorithmDefiniti","newParameters","addLimits","allDone","setSelectedDataset","setCurrentQueryIndex","setCompletedQueryIndexes","setCompleted","nextEnabled","setNextEnabled","prevEnabled","setPrevEnabled","resetState","dimmer","datasetName","promiseChain","qIndex","chainResults","code","currentResult","prevState","results","onComplete","dataset","currentScreen","view","Datasets_SelectDataset","Datasets_ImportDataset","previous","float","Datasets_SelectAlgorithms","selectScreen","Actions","FailedTopBar","activeItem","handleMenuItemClick","Menu","tabular","pointing","secondary","currentAlgorithm","selectedAlgorithm","setSelectedAlgorithm","selectingAlgorithm","setSelectingAlgorithm","algoGroupsForVersion","allAlgorithms","ArrowLeft","ArrowRight","border","Subheader","build_default","handleChange","transition","arrowLeft","arrowRight","scrollBy","hideArrows","translate","AlgoFormView","setParameters","setLabelOptions","setRelationshipTypeOptions","setPropertyKeyOptions","setRelPropertyKeyOptions","setRelationshipOrientationOptions","onChangeParam","onRunAlgo","onRun","selectedAlgorithmReadOnly","AlgorithmForm_SelectedAlgorithm","SelectAlgorithm","ResultsFiltering_ResultFilteringFields","onCopy","SelectedAlgorithm","RenderParams","_React$Component","inherits","_super","_createSuper","classCallCheck","createClass","stringifyObject","indent","transform","prop","originalResult","_this","extractValue","_this2","_this$props","activeTab","tab","button-onfocusout","option-text","getText","bind","Component","stringfyParam","JSON","stringify","CodeView_default","_Component","_default","CodeView_createSuper","browserGuide","renderNamedDatabaseParam","renderParams","renderQueries","cleanQuery","onTabChange","setState","panes","activeIndex","menuItem","supportsNamedGraph","noNamedGraph","codeFragments","createPanes","assertThisInitialized","anonymous","namedDatabaseParam","neo","guid","uuid","_this3","generateId","payload","constructPayload","headers","Content-Type","guideId","generateGuide","named","render","_this4","taskGuide","overflowX","openBrowser","SuccessTopBar","NewTopBar","NavBar","setSelectedTaskId","taskOptions","toLocaleTimeString","Chart","bar","indexBy","enableGridX","enableGridY","enableLabel","labelTextColor","isInteractive","layout","colorBy","ChartView","ChartView_LoaderExampleInlineCentered","activeGroup","ownProps","AlgorithmForm","algorithmDefinition","serviceParameters","exc","constructedQueries","graphProperties","algorithmProperties","mainGdsVersion","storeAlgorithmNamedGraph","streamAlgorithmNamedGraph","constructQueries","tabContentStyle","TableView","selectedTaskId","newTask","setNewTask","constructNewTask","generateTaskId","newAlgorithmFormOpen","setNewAlgorithmFormOpen","currentTask","SuccessTopBar_NavBar","SingleTask_SingleTask","onCopyAlgo","totalPages","components_NewAlgorithmModal","maxHeight","-moz-transform","-webkit-transform","VisConfigurationBar","captions","nodeSize","nodeColor","updateCaption","updateNodeSize","updateNodeColor","onUpdateConfig","allProps","flatMapProperties","Select","propSet","captionCandidates","centralityLikeAlgos","GraphVisualiser","NewGraphVisualiser_createSuper","relationshipThickness","networks","Person","initial_cypher","_this$state","labelConfig","thickness","rendering","initVis","labelProperties","choices","captionCandidate","choice","generateCypher","links","r","mProperties","mLabels","n","nProperties","nLabels","o","string","parse","nextProps","dataUpdated","prevProps","getVis","_this$state2","getVal","maxValue","minValue","NewGraphVisualiser_LoaderExampleInlineCentered","react_force_graph_module","graphData","nodeVal","nodeCanvasObject","ctx","globalScale","sqrt","beginPath","arc","x","y","PI","fillStyle","fill","font","textBaseline","fillText","nodeAutoColorBy","innerHeight","innerWidth","NewVisView","NewGraphVisualiser","relType","cachedOutputs","TSNEVisualizer","getCaption","rawData","setRawData","hiddenIds","setHiddenIds","toggleCaption","setToggleCaption","useOrdinalColorScale","theme","tooltip","container","scaledOutput","model","TSNE","dim","perplexity","earlyExaggeration","learningRate","nIter","metric","getOutputScaled","generateTSNELayout","viz_input","element","gridTemplateColumns","nivo_scatterplot_es","xScale","yScale","blendMode","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","axisLeft","serieId","renderNode","onMouseEnter","onMouseMove","onMouseLeave","mixBlendMode","flexDirection","nivo_core_es","nivo_legends_es","anchor","containerWidth","containerHeight","itemWidth","itemHeight","itemsSpacing","symbolSize","symbolShape","datum","String","TSNEView","SingleTask","currentPage","panelRef","createRef","setActiveItem","activeResultsItem","setActiveResultsItem","handleResultsMenuItemClick","getStyle","getResultsStyle","FailedTopBar_FailedTopBar","marginTop","warning","SuccessTopBar_SuccessTopBar","ref","flexGrow","paddingLeft","NewVisView_NewVisView","ChartView_ChartView","TableView_TableView","SpecificTask","useParams","_useRouteMatch","useRouteMatch","path","SpecificTask_SpecificTask","NewAlgorithm","_props$location$state","duplicateTask","SuccessTopBar_NewTopBar","baseRecipes","directed-graph-influencers","shortDescription","completionMessage","slides","overrides","community-detection","formParametersToPassOn","slidesToUpdate","recipes","containerStyle","SuccessResults","getStyleResultsTab","selectedTask","ErrorResults","IndividualRecipe","selectedSlide","setSelectedSlide","localRecipes","setLocalRecipes","recipeId","addTaskIfMissing","newLocalRecipes","newSelectedRecipe","parametersWithOverrides","selectedRecipe","maxSlide","updateSelectedTask","updates","existingTask","Recipe_TopNav","Recipe_StartSlide","Recipe_EndSlide","Recipe_AlgoForm","recipe","slideIds","slideId","updateSlide","Recipe_SuccessResults","Recipe_ErrorResults","Recipe_BottomNav","StartSlide","slide","algo","EndSlide","BottomNav","TopNav","Recipe","Recipe_Recipes","persistConfig","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","LoaderComponent","App","WebApp","RenderComponent","routeProps","aboutActive","setAboutActive","datasetsActive","flexFlow","AlgorithmGroupsMenu","components_About","components_Datasets","ReactDOM","react_redux_es","integration_react","loading","MainContent","src_App","Home","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be680593.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { auth, driver } from \"neo4j-driver\"\n\nlet neoDriver\nlet neo4jVersion\nlet activeDatabase = \"neo4j\"\n\nexport const getDriver = () => {\n\t/*if (!driver) {\n    driver = neo.driver('bolt://localhost:7687', neo.auth.basic(\"neo4j\", \"neo\"))\n  }*/\n\treturn neoDriver\n}\n\nexport const getNeo4jVersion = () => {\n\treturn neo4jVersion\n}\n\nexport const getActiveDatabase = () => {\n\treturn activeDatabase\n}\n\nexport const hasNamedDatabase = () => {\n\tconst version = mainNeo4jVersion()\n\treturn version >= 4\n}\n\nexport const onNewConnection = credentials => {\n\tneoDriver = driver(\n\t\tcredentials.host || \"bolt://localhost:7687\",\n\t\tauth.basic(credentials.username, credentials.password)\n\t)\n\n\treturn neoDriver.verifyConnectivity().then(value => {\n\t\tonNeo4jVersion(value.version.split(\"/\")[1])\n\t\treturn Promise.resolve(getNeo4jVersion())\n\t})\n}\n\nexport const onNeo4jVersion = version => {\n\tneo4jVersion = version\n}\n\nexport const onActiveDatabase = value => {\n\tactiveDatabase = value\n}\n\nexport const onDisconnected = () => {\n\t/* console.log('DISCONNECTING!!')\n   neoDriver.close()\n   neoDriver = null*/\n}\n\nconst getSession = database => {\n\treturn getDriver().session({ database: database })\n}\n\nexport const extractMainVersion = fullVersion => {\n\treturn parseInt(\n\t\tfullVersion\n\t\t\t.split(\".\")\n\t\t\t.slice(0, 1)\n\t\t\t.join(\".\")\n\t)\n}\n\nexport const mainNeo4jVersion = () => {\n\treturn extractMainVersion(getNeo4jVersion())\n}\n\nexport const runCypher = (cypher, parameters = {}) => {\n\tconst version = mainNeo4jVersion()\n\tif (version === 4) {\n\t\treturn getSession(activeDatabase).run(cypher, parameters)\n\t} else {\n\t\treturn getDriver()\n\t\t\t.session()\n\t\t\t.run(cypher, parameters)\n\t}\n}\n\nexport const runCypherDefaultDatabase = (cypher, parameters = {}) => {\n\tconst session = getDriver().session()\n\treturn session.run(cypher, parameters)\n}\n\nexport const runCypherSystemDatabase = (cypher, parameters = {}) => {\n\tconst session = getSession(\"system\")\n\treturn session.run(cypher, parameters)\n}\n\nexport const runStreamQuery = (\n\tstreamCypher,\n\tparameters,\n\tparseResultStreamFn\n) => {\n\tconst gdsMainVersion = parseInt(parameters.gdsVersion.split(\".\")[0])\n\tconst generatedName = `in-memory-graph-${Date.now()}`\n\tparameters.generatedName = generatedName\n\tconst createGraph = `CALL gds.graph.${\n\t\tgdsMainVersion === 1 ? \"create\" : \"project\"\n\t}(\"${generatedName}\", $graphConfig.nodeProjection, $graphConfig.relationshipProjection ${\n\t\tparameters.graphConfig.nodeProperties\n\t\t\t? `,{ nodeProperties: [$graphConfig.nodeProperties]}`\n\t\t\t: \"\"\n\t})`\n\tconst dropGraph = `CALL gds.graph.drop(\"${generatedName}\")`\n\n\treturn new Promise((resolve, reject) => {\n\t\trunCypher(createGraph, parameters)\n\t\t\t.then(() =>\n\t\t\t\trunCypher(streamCypher, parameters)\n\t\t\t\t\t.then(result => {\n\t\t\t\t\t\trunCypher(dropGraph)\n\t\t\t\t\t\tresolve(parseResultStreamFn(result))\n\t\t\t\t\t})\n\t\t\t\t\t.catch(reject)\n\t\t\t)\n\t\t\t.catch(reject)\n\t})\n}\n\nexport const runStoreQuery = (\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tparseResultStreamFn\n) => {\n\tconst gdsMainVersion = parseInt(parameters.gdsVersion.split(\".\")[0])\n\tconst generatedName = `in-memory-graph-${Date.now()}`\n\tparameters.generatedName = generatedName\n\tconst createGraph = `CALL gds.graph.${\n\t\tgdsMainVersion === 1 ? \"create\" : \"project\"\n\t}(\"${generatedName}\", $graphConfig.nodeProjection, $graphConfig.relationshipProjection ${\n\t\tparameters.graphConfig.nodeProperties\n\t\t\t? `,{ nodeProperties: [$graphConfig.nodeProperties]}`\n\t\t\t: \"\"\n\t})`\n\tconst dropGraph = `CALL gds.graph.drop(\"${generatedName}\")`\n\n\treturn new Promise((resolve, reject) => {\n\t\trunCypher(createGraph, parameters).then(() =>\n\t\t\trunCypher(storeCypher, parameters)\n\t\t\t\t.then(() => {\n\t\t\t\t\trunCypher(fetchCypher, parameters)\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\trunCypher(dropGraph)\n\t\t\t\t\t\t\tresolve(parseResultStreamFn(result))\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(reject)\n\t\t\t\t})\n\t\t\t\t.catch(reject)\n\t\t)\n\t})\n}\n","const NAME = 'TASKS'\nconst ADD_TASK = `${NAME}/ADD_TASK`\nconst RUN_TASK = `${NAME}/RUN_TASK`\nconst COMPLETE_TASK = `${NAME}/COMPLETE_TASK`\nconst REMOVE_TASK = `${NAME}/REMOVE_TASK`\n\nexport const ADDED = 'ADDED'\nexport const RUNNING = 'RUNNING'\nexport const COMPLETED = 'COMPLETED'\nexport const FAILED = 'FAILED'\n\nexport const addTask = ({taskId, group, algorithm, startTime, parameters, formParameters, query, persisted, database}) => ({\n  type: ADD_TASK,\n  taskId,\n  group,\n  algorithm,\n  startTime,\n  parameters,\n  formParameters,\n  persisted,\n  database\n})\n\nexport const runTask = ({taskId, query, namedGraphQueries, parameters, formParameters, persisted}) => ({\n  type: RUN_TASK,\n  taskId,\n  query,\n  namedGraphQueries,\n  parameters,\n  formParameters,\n  persisted\n})\n\nexport const completeTask = ({taskId, result, error}) => ({\n  type: COMPLETE_TASK,\n  taskId,\n  result,\n  error\n})\n\nexport const removeTask = ({taskId}) => ({\n  type: REMOVE_TASK,\n  taskId\n})\n\nexport default (state = [], action) => {\n  switch (action.type) {\n    case ADD_TASK:\n      const newState = [...state]\n      newState.unshift({\n        taskId: action.taskId,\n        group: action.group,\n        algorithm: action.algorithm,\n        startTime: action.startTime,\n        result: action.result,\n        parameters: action.parameters,\n        formParameters: action.formParameters,\n        status: ADDED,\n        completed: false,\n        persisted: action.persisted,\n        database: action.database\n      })\n      return newState\n    case RUN_TASK: {\n      const existingTasks = [...state]\n      const theTask = existingTasks.find(task => task.taskId === action.taskId)\n      if (theTask) {\n        theTask.status = RUNNING\n        theTask.query = action.query\n        theTask.namedGraphQueries = action.namedGraphQueries\n        theTask.parameters = action.parameters\n        theTask.formParameters = action.formParameters\n        theTask.persisted = action.persisted\n        theTask.result = null\n        return existingTasks\n      } else {\n        return state\n      }\n    }\n    case COMPLETE_TASK: {\n      const tasks = [...state]\n      const task = tasks.find(task => task.taskId === action.taskId)\n      if (task) {\n        if (action.error) {\n          task.error = action.error\n          task.status = FAILED\n        } else {\n          task.status = COMPLETED\n          task.result = action.result\n        }\n\n        task.completed = true\n        return tasks\n      } else {\n        return state\n      }\n    }\n    case REMOVE_TASK: {\n      const tasks = [...state]\n      return tasks.filter(task => task.taskId !== action.taskId)\n    }\n    default:\n      return state\n  }\n}\n","import React from \"react\";\nimport {Label, Segment} from \"semantic-ui-react\";\n\nexport const OpenCloseSection = ({title, children, className}) => {\n    const [open, setOpen] = React.useState(true);\n    const style = {display: open ? \"\" : \"none\"}\n\n    return <Segment className={className || \"\"}>\n        <Label as='a' attached='top left' onClick={() => setOpen(!open)}>\n            {title}\n        </Label>\n        <div style={style}>\n            {children}\n        </div>\n    </Segment>\n}\n","import {Dropdown, Form, Input} from \"semantic-ui-react\";\nimport React from \"react\";\nimport {OpenCloseSection} from \"./OpenCloseSection\";\n\nconst ProjectedGraph = ({readOnly, label, labelOptions, relationshipType, direction, relationshipTypeOptions, relPropertyKeyOptions, relationshipOrientationOptions, propertyKeyOptions, weightProperty, defaultValue, onChange, showWeightProperty}) => {\n    return <OpenCloseSection title=\"Projected Graph\">\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Label</label>\n            <Dropdown disabled={readOnly} placeholder='Label' value={label} search selection\n                      options={labelOptions}\n                      onChange={(evt, data) => onChange(\"label\", data.value)}/>\n        </Form.Field>\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Relationship Type</label>\n            <Dropdown disabled={readOnly} placeholder='RelationshipType' value={relationshipType} search\n                      selection\n                      options={relationshipTypeOptions}\n                      onChange={(evt, data) => onChange(\"relationshipType\", data.value)}/>\n        </Form.Field>\n\n        {relationshipType ?\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                <label style={{'width': '12em'}}>Relationship Orientation</label>\n                <Dropdown disabled={readOnly} placeholder='RelationshipOrientation' value={direction}\n                          search selection\n                          options={relationshipOrientationOptions}\n                          onChange={(evt, data) => onChange(\"direction\", data.value)}/>\n            </Form.Field> : null}\n\n        {showWeightProperty && relationshipType ?\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                <label style={{'width': '12em'}}>Weight Property</label>\n                <Dropdown disabled={readOnly} placeholder='Weight Property' value={weightProperty}\n                          search selection\n                          options={relPropertyKeyOptions}\n                          onChange={(evt, data) => onChange(\"weightProperty\", data.value)}/>\n            </Form.Field> : null}\n\n        {showWeightProperty && weightProperty ?\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                <label style={{'width': '12em'}}>Default weight</label>\n                <Input disabled={readOnly} size='mini' basic=\"true\" value={defaultValue}\n                       onChange={evt => onChange('defaultValue', evt.target.value)}/>\n\n            </Form.Field>\n\n            : null\n        }\n    </OpenCloseSection>\n\n}\n\nexport const ProjectedGraphWithWeights = (props) => {\n    const projectedGraphProps = {\n        ...props,\n        showWeightProperty: true\n    }\n\n    return <ProjectedGraph {...projectedGraphProps} />\n}\n\nexport const ProjectedGraphWithNoWeights = (props) => {\n    const projectedGraphProps = {\n        ...props,\n        showWeightProperty: false\n    }\n\n    return <ProjectedGraph {...projectedGraphProps} />\n}\n","import React from 'react'\nimport {Checkbox, Divider, Form, Input} from \"semantic-ui-react\";\nimport {OpenCloseSection} from \"./OpenCloseSection\";\n\nexport const StoreProperty = ({persist, onChange, writeProperty, readOnly, children}) => {\n    return <OpenCloseSection title=\"Results\">\n        <Form.Field className={readOnly ? \"disabled\" : null} inline style={{display: \"flex\", alignItems: \"center\"}}>\n            <label style={{'width': '12em'}}>Store results?</label>\n            <Checkbox disabled={readOnly} toggle checked={persist} onChange={(evt, data) => {\n                onChange('persist', data.checked)\n            }}/>\n\n        </Form.Field>\n        {\n            persist ?\n                <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                    <label style={{'width': '12em'}}>Write Property</label>\n                    <Input disabled={readOnly} basic=\"true\" value={writeProperty} placeholder='Write Property'\n                           onChange={evt => onChange('writeProperty', evt.target.value)}/>\n                </Form.Field>\n                : null\n        }\n        <Divider />\n        {children}\n    </OpenCloseSection>\n}","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst PageRankForm = ({\n                          readOnly, label, relationshipType, labelOptions, relationshipTypeOptions, relationshipOrientationOptions,relPropertyKeyOptions,\n                          propertyKeyOptions, writeProperty, onChange, maxIterations, dampingFactor, weightProperty, defaultValue, direction, persist, children\n                      }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <PageRankParameters maxIterations={maxIterations} dampingFactor={dampingFactor} onChange={onChange}\n                                readOnly={readOnly}/>\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty}\n                           readOnly={readOnly}> {children} </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst PageRankParameters = ({maxIterations, dampingFactor, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={maxIterations}\n                    onChange={(evt, data) => onChange('maxIterations', data.value)} min={1} max={50} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Damping Factor</label>}\n                    control={Input} type='number' value={dampingFactor} step={0.01}\n                    onChange={(evt, data) => onChange('dampingFactor', data.value)}/>\n    </OpenCloseSection>\n}\n\nexport default PageRankForm","import { isInt, isDate, isDateTime, isLocalDateTime, isLocalTime, isDuration } from \"neo4j-driver\"\n\nexport const parseProperties = (properties) => {\n  let props = Object.keys(properties).reduce((props, propKey) => {\n    let value = properties[propKey]\n\n    if (isInt(value)) {\n      props[propKey] = value.toNumber()\n    } else if (Array.isArray(value)) {\n      props[propKey] = value.map(item => item.toString()).join(', ')\n    } else if(isDate(value) || isDateTime(value) || isDuration(value) || isLocalDateTime(value) || isLocalTime(value)) {\n      props[propKey] = value.toString()\n    } else {\n      props[propKey] = value\n    }\n    return props\n  }, {})\n  return props;\n}\n","import { runStreamQuery, runStoreQuery } from \"./stores/neoStore\"\nimport { parseProperties } from \"./resultMapper\"\n\nconst handleException = error => {\n\tconsole.error(error)\n\tthrow new Error(error)\n}\n\nexport const runAlgorithm = ({\n\tstreamCypher,\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tpersisted\n}) => {\n\tif (!persisted) {\n\t\treturn runStreamQuery(streamCypher, parameters, parseResultStream)\n\t} else {\n\t\treturn runStoreQuery(\n\t\t\tstoreCypher,\n\t\t\tfetchCypher,\n\t\t\tparameters,\n\t\t\tparseResultStream\n\t\t)\n\t}\n}\n\nconst parseResultStream = result => {\n\tif (result.records) {\n\t\tconst rows = result.records.map(record => {\n\t\t\tconst { properties, labels, identity } = record.get(\"node\")\n\t\t\treturn {\n\t\t\t\tproperties: parseProperties(properties),\n\t\t\t\tidentity: identity.toNumber(),\n\t\t\t\tlabels,\n\t\t\t\tscore: record.get(\"score\")\n\t\t\t}\n\t\t})\n\n\t\treturn {\n\t\t\trows: rows,\n\t\t\tids: rows.map(row => row.identity),\n\t\t\tlabels: [...new Set(rows.flatMap(result => result.labels))]\n\t\t}\n\t} else {\n\t\tconsole.error(result.error)\n\t\tthrow new Error(result.error)\n\t}\n}\n\nexport const runHITSAlgorithm = ({\n\tstreamCypher,\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tpersisted\n}) => {\n\tif (!persisted) {\n\t\treturn runStreamQuery(streamCypher, parameters, parseHITSResultStream)\n\t} else {\n\t\treturn runStoreQuery(\n\t\t\tstoreCypher,\n\t\t\tfetchCypher,\n\t\t\tparameters,\n\t\t\tparseHITSResultStream\n\t\t)\n\t}\n}\n\nconst parseHITSResultStream = result => {\n\tif (result.records) {\n\t\tconst rows = result.records.map(record => {\n\t\t\tconst { properties, labels, identity } = record.get(\"node\")\n\t\t\treturn {\n\t\t\t\tproperties: parseProperties(properties),\n\t\t\t\tidentity: identity.toNumber(),\n\t\t\t\tlabels,\n\t\t\t\thubScore: record.get(\"hubScore\"),\n\t\t\t\tauthScore: record.get(\"authScore\")\n\t\t\t}\n\t\t})\n\n\t\treturn {\n\t\t\trows: rows,\n\t\t\tids: rows.map(row => row.identity),\n\t\t\tlabels: [...new Set(rows.flatMap(result => result.labels))]\n\t\t}\n\t} else {\n\t\tconsole.error(result.error)\n\t\tthrow new Error(result.error)\n\t}\n}\n","import { int } from \"neo4j-driver\"\n\nexport const streamQueryOutline = callAlgorithm => `${callAlgorithm}\nWITH gds.util.asNode(nodeId) AS node, score\nRETURN node, score\nORDER BY score DESC\nLIMIT toInteger($limit)`\n\nexport const communityStreamQueryOutline = callAlgorithm => `${callAlgorithm}\nWITH gds.util.asNode(nodeId) AS node, community\nWITH collect(node) AS allNodes, community\nRETURN community, allNodes[0..$communityNodeLimit] AS nodes, size(allNodes) AS size \nORDER BY size DESC\nLIMIT toInteger($limit);`\n\nexport const getFetchCypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nRETURN node, node.\\`${config.writeProperty}\\` AS score\nORDER BY score DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getFetchHITSCypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}auth\\`) AND exists(node.\\`${\n\t\tconfig.writeProperty\n\t}hub\\`)\nRETURN node, node.\\`${config.writeProperty}auth\\` AS authScore, node.\\`${\n\t\tconfig.writeProperty\n\t}hub\\` AS hubScore\nORDER BY authScore DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getFetchLouvainCypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nWITH node, node.\\`${config.writeProperty}\\` AS community\nWITH collect(node) AS allNodes, \n     CASE WHEN apoc.meta.type(community) = \"long[]\" THEN community[-1] ELSE community END AS community, \n     CASE WHEN apoc.meta.type(community) = \"long[]\" THEN community ELSE null END as communities\nRETURN community, communities, allNodes[0..$communityNodeLimit] AS nodes, size(allNodes) AS size\nORDER BY size DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getFetchSLLPACypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}communityIds\\`)\nWITH node, node.\\`${config.writeProperty}communityIds\\` AS community\nWITH collect(node) AS allNodes,  \n     CASE WHEN apoc.meta.type(community) = \"long[]\" THEN community ELSE null END as communities\nRETURN communities, allNodes[0..$communityNodeLimit] AS nodes, size(allNodes) AS size\nORDER BY size DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getCommunityFetchCypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nWITH node.\\`${config.writeProperty}\\` AS community, collect(node) AS allNodes\nRETURN community, allNodes[0..$communityNodeLimit] AS nodes, size(allNodes) AS size\nORDER BY size DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getFetchNewTriangleCountCypher = (label, config, graphConfig) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`) \nRETURN node, node.\\`${config.writeProperty}\\` AS triangles\nORDER BY triangles DESC\nLIMIT toInteger($limit)`\n}\n\nexport const getFetchNewLocalClusteringCoefficientCypher = (\n\tlabel,\n\tconfig,\n\tgraphConfig\n) => {\n\tconst escapedLabel =\n\t\tgraphConfig.nodeProjection && graphConfig.nodeProjection !== \"*\"\n\t\t\t? \":`\" + graphConfig.nodeProjection + \"`\"\n\t\t\t: \"\"\n\treturn `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nRETURN node, node.\\`${config.writeProperty}\\` AS coefficient\nORDER BY coefficient DESC\nLIMIT toInteger($limit)`\n}\n\nexport const onePoint5PathFindingParams = ({\n\tstartNode,\n\tendNode,\n\tlatitudeProperty,\n\tlongitudeProperty,\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tweightProperty,\n\tclusteringCoefficientProperty,\n\tcommunityProperty,\n\tincludeIntermediateCommunities,\n\tintermediateCommunitiesWriteProperty,\n\tdefaultValue,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50,\n\t\tconfig: {}\n\t}\n\tparams.startNode = startNode || null\n\tparams.endNode = endNode || null\n\n\tconst parsedWeightProperty = weightProperty\n\t\t? weightProperty.trim()\n\t\t: weightProperty\n\tconst parsedWriteProperty = writeProperty\n\t\t? writeProperty.trim()\n\t\t: writeProperty\n\n\tconst config = {\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t),\n\t\trelationshipWeightProperty: parsedWeightProperty || null,\n\t\twrite: true,\n\t\tlatitudeProperty: latitudeProperty,\n\t\tlongitudeProperty: longitudeProperty\n\t}\n\n\tif (latitudeProperty || longitudeProperty) {\n\t\tconfig.nodeProjection = {\n\t\t\tnodeLabel: {\n\t\t\t\tlabel: config.nodeProjection,\n\t\t\t\tproperties: [latitudeProperty, longitudeProperty]\n\t\t\t}\n\t\t}\n\t}\n\n\tif (persist) {\n\t\tconfig.writeProperty = parsedWriteProperty\n\t}\n\tconst graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const pre1Point5PathFindingParams = ({\n\tstartNode,\n\tendNode,\n\tdelta,\n\tpropertyKeyLat,\n\tpropertyKeyLon,\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tweightProperty,\n\tdefaultValue,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50,\n\t\tconfig: {}\n\t}\n\tparams.startNode = startNode || null\n\tparams.endNode = endNode || null\n\n\tconst parsedWeightProperty = weightProperty\n\t\t? weightProperty.trim()\n\t\t: weightProperty\n\tconst parsedWriteProperty = writeProperty\n\t\t? writeProperty.trim()\n\t\t: writeProperty\n\n\tconst config = {\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t),\n\t\trelationshipWeightProperty: parsedWeightProperty || null,\n\t\twrite: true,\n\t\tpropertyKeyLat: propertyKeyLat,\n\t\tpropertyKeyLon: propertyKeyLon,\n\t\tdelta: delta\n\t}\n\n\tif (propertyKeyLat || propertyKeyLon) {\n\t\tconfig.nodeProjection = {\n\t\t\tnodeLabel: {\n\t\t\t\tlabel: config.nodeProjection,\n\t\t\t\tproperties: [propertyKeyLat, propertyKeyLon]\n\t\t\t}\n\t\t}\n\t}\n\n\tif (persist) {\n\t\tconfig.writeProperty = parsedWriteProperty\n\t}\n\n\tconst graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nconst addPersistFields = (\n\tconfig,\n\tpersist,\n\twriteProperty,\n\twriteRelationshipType\n) => {\n\tif (persist) {\n\t\tconfig.writeProperty = writeProperty || null\n\t\tconfig.writeRelationshipType = writeRelationshipType || null\n\t}\n}\n\nexport const nodeSimilarityParams = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tdefaultValue,\n\tweightProperty,\n\twriteRelationshipType,\n\tsimilarityCutoff,\n\tdegreeCutoff,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50\n\t}\n\n\tconst config = {\n\t\tsimilarityCutoff: parseFloat(similarityCutoff),\n\t\tdegreeCutoff: degreeCutoff == null ? null : int(degreeCutoff),\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t)\n\t}\n\n\taddPersistFields(config, persist, writeProperty, writeRelationshipType)\n\n\tconst graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const nodeSimilarityParamsNew = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tdefaultValue,\n\tweightProperty,\n\tsimilarityMetric,\n\twriteRelationshipType,\n\tsimilarityCutoff,\n\tdegreeCutoff,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50\n\t}\n\n\tconst config = {\n\t\tsimilarityMetric: similarityMetric,\n\t\tsimilarityCutoff: parseFloat(similarityCutoff),\n\t\tdegreeCutoff: degreeCutoff == null ? null : int(degreeCutoff),\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t)\n\t}\n\n\taddPersistFields(config, persist, writeProperty, writeRelationshipType)\n\n\tconst graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const knnParams = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tdefaultValue,\n\tweightProperty,\n\twriteRelationshipType,\n\tnodeWeightProperty,\n\ttopK,\n\tsampleRate,\n\tdeltaThreshold,\n\trandomJoins,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50\n\t}\n\n\tconst config = {\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t),\n\t\tnodeWeightProperty: nodeWeightProperty,\n\t\ttopK: int(topK) || 10,\n\t\trandomJoins: int(randomJoins) || 10,\n\t\tsampleRate: parseFloat(sampleRate) || 0.5,\n\t\tdeltaThreshold: parseFloat(deltaThreshold) || 0.001\n\t}\n\n\tif (nodeWeightProperty) {\n\t\tconfig.nodeProperties = [nodeWeightProperty]\n\t}\n\n\taddPersistFields(config, persist, writeProperty, writeRelationshipType)\n\n\tlet graphRequiredProperties = [\n\t\t\"nodeProjection\",\n\t\t\"relationshipProjection\",\n\t\t\"nodeProperties\"\n\t]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\tparams.config.nodeWeightProperty = nodeWeightProperty\n\n\treturn params\n}\n\nexport const knnParamsNew = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tdefaultValue,\n\tweightProperty,\n\twriteRelationshipType,\n\tnodeWeightProperty,\n\ttopK,\n\tsampleRate,\n\tdeltaThreshold,\n\trandomJoins,\n\tlimit,\n\trequiredProperties,\n\tsimilarityMetric\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50\n\t}\n\n\tconst config = {\n\t\tnodeProjection: label || \"*\",\n\t\trelationshipProjection: createRelationshipProjection(\n\t\t\trelationshipType,\n\t\t\tdirection,\n\t\t\tweightProperty,\n\t\t\tdefaultValue\n\t\t),\n\t\ttopK: int(topK) || 10,\n\t\trandomJoins: int(randomJoins) || 10,\n\t\tsampleRate: parseFloat(sampleRate) || 0.5,\n\t\tdeltaThreshold: parseFloat(deltaThreshold) || 0.001\n\t}\n\n\tif (nodeWeightProperty) {\n\t\tconfig.nodeProperties = [nodeWeightProperty]\n\t\trequiredProperties.push(\"nodeProperties\")\n\t}\n\n\taddPersistFields(config, persist, writeProperty, writeRelationshipType)\n\n\tlet graphRequiredProperties = [\n\t\t\"nodeProjection\",\n\t\t\"relationshipProjection\",\n\t\t\"nodeProperties\"\n\t]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\t// overide node property params\n\tparams.config.nodeProperties = {}\n\tparams.config.nodeProperties[nodeWeightProperty] = similarityMetric\n\n\treturn params\n}\n\nexport const similarityParams = ({\n\titemLabel,\n\trelationshipType,\n\tcategoryLabel,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tweightProperty,\n\twriteRelationshipType,\n\tsimilarityCutoff,\n\tdegreeCutoff,\n\tlimit,\n\trequiredProperties\n}) => {\n\tconst params = {\n\t\tlimit: parseInt(limit) || 50,\n\t\titemLabel: itemLabel || null,\n\t\trelationshipType: relationshipType || null,\n\t\tcategoryLabel: categoryLabel || null,\n\t\tweightProperty: weightProperty || null,\n\t\tconfig: {}\n\t}\n\n\tconst config = {\n\t\tnodeProjection: \"*\",\n\t\trelationshipProjection: \"*\",\n\t\twriteProperty: writeProperty || null,\n\t\twriteRelationshipType: writeRelationshipType || null,\n\t\tsimilarityCutoff: parseFloat(similarityCutoff),\n\t\tdegreeCutoff: degreeCutoff == null ? null : int(degreeCutoff)\n\t}\n\n\trequiredProperties.push(\"nodeProjection\")\n\trequiredProperties.push(\"relationshipProjection\")\n\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const communityParams = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\tmaxIterations,\n\tminAssociationStrength,\n\ttolerance,\n\twriteProperty,\n\tweightProperty,\n\tclusteringCoefficientProperty,\n\tseedProperty,\n\tincludeIntermediateCommunities,\n\tintermediateCommunitiesWriteProperty,\n\tdefaultValue,\n\tlimit,\n\tcommunityNodeLimit,\n\trequiredProperties\n}) => {\n\tconst params = baseParameters(\n\t\tlabel,\n\t\trelationshipType,\n\t\tdirection,\n\t\tlimit,\n\t\tweightProperty,\n\t\tdefaultValue\n\t)\n\tparams.communityNodeLimit = communityNodeLimit\n\t\t? parseInt(communityNodeLimit)\n\t\t: 10\n\n\tconst parsedWriteProperty = writeProperty\n\t\t? writeProperty.trim()\n\t\t: writeProperty\n\tconst parsedIterations = maxIterations == null ? null : int(maxIterations)\n\tconst parsedTolerance = tolerance == null ? null : parseFloat(tolerance)\n\n\tconst config = {\n\t\twrite: true,\n\t\tminAssociationStrength: parseFloat(minAssociationStrength) || null,\n\t\tclusteringCoefficientProperty: clusteringCoefficientProperty,\n\t\tincludeIntermediateCommunities: includeIntermediateCommunities || false,\n\t\tseedProperty: seedProperty || \"\",\n\t\tmaxIterations:\n\t\t\tparsedIterations && parsedIterations > 0 ? parsedIterations : null,\n\t\ttolerance: parsedTolerance && parsedTolerance > 0 ? parsedTolerance : null\n\t}\n\n\tif (seedProperty) {\n\t\tconfig.nodeProperties = [seedProperty]\n\t}\n\n\tif (persist) {\n\t\tconfig.writeProperty = parsedWriteProperty\n\t}\n\n\trequiredProperties.push(\"nodeProperties\")\n\tlet graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const centralityParams = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tweightProperty,\n\tdefaultValue,\n\tdampingFactor,\n\tmaxIterations,\n\thitsIterations,\n\tmaxDepth,\n\tprobability,\n\tstrategy,\n\tlimit,\n\tnormalization,\n\trequiredProperties,\n\tsamplingSize\n}) => {\n\tconst params = baseParameters(\n\t\tlabel,\n\t\trelationshipType,\n\t\tdirection,\n\t\tlimit,\n\t\tweightProperty,\n\t\tdefaultValue\n\t)\n\n\tconst parsedProbability = parseFloat(probability)\n\tconst parsedMaxDepth = maxDepth == null ? null : int(maxDepth)\n\tconst parsedIterations = maxIterations == null ? null : int(maxIterations)\n\tconst parsedHitsIterations =\n\t\thitsIterations == null ? null : int(hitsIterations)\n\tconst parsedWriteProperty = writeProperty\n\t\t? writeProperty.trim()\n\t\t: writeProperty\n\tconst parsedSamplingSize = samplingSize == null ? null : int(samplingSize)\n\n\tconst config = {\n\t\tdampingFactor: parseFloat(dampingFactor) || null,\n\t\tmaxIterations:\n\t\t\tparsedIterations && parsedIterations > 0 ? parsedIterations : null,\n\t\thitsIterations:\n\t\t\tparsedHitsIterations && parsedHitsIterations > 0\n\t\t\t\t? parsedHitsIterations\n\t\t\t\t: null,\n\t\tmaxDepth: parsedMaxDepth && parsedMaxDepth > 0 ? parsedMaxDepth : null,\n\t\tprobability:\n\t\t\tparsedProbability && parsedProbability > 0 ? parsedProbability : null,\n\t\tstrategy: strategy,\n\t\twrite: true,\n\t\tnormalization: normalization || null,\n\t\tsamplingSize: parsedSamplingSize || null\n\t}\n\n\tif (persist) {\n\t\tconfig.writeProperty = parsedWriteProperty\n\t}\n\n\tlet graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const embeddingParams = ({\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tpersist,\n\twriteProperty,\n\tweightProperty,\n\tdefaultValue,\n\tlimit,\n\trequiredProperties,\n\titerations,\n\tembeddingDimension,\n\twalkLength,\n\tinOutFactor,\n\treturnFactor,\n\tmodelName,\n\tbatchSize,\n\tnormalizationStrength,\n\tembeddingSize,\n\tmaxIterations\n}) => {\n\tconst params = baseParameters(\n\t\tlabel,\n\t\trelationshipType,\n\t\tdirection,\n\t\tlimit,\n\t\tweightProperty,\n\t\tdefaultValue\n\t)\n\tconst parsedWriteProperty = writeProperty\n\t\t? writeProperty.trim()\n\t\t: writeProperty\n\n\tconst parsedIterations = iterations == null ? null : int(iterations)\n\tconst parsedMaxIterations = maxIterations == null ? null : int(maxIterations)\n\tconst parsedEmbeddingDimension =\n\t\tembeddingDimension == null ? null : int(embeddingDimension)\n\tconst parsedEmbeddingSize = embeddingSize == null ? null : int(embeddingSize)\n\tconst parsedBatchSize = batchSize == null ? null : int(batchSize)\n\tconst parsedWalkLength = walkLength == null ? null : int(walkLength)\n\tconst parsedInoutFactor = parseFloat(inOutFactor)\n\tconst parsedReturnFactor = parseFloat(returnFactor)\n\tconst parsedNormalizationStrength = parseFloat(normalizationStrength)\n\n\tconst config = {\n\t\twrite: true,\n\t\titerations:\n\t\t\tparsedIterations && parsedIterations > 0 ? parsedIterations : null,\n\t\tmaxIterations:\n\t\t\tparsedMaxIterations && parsedMaxIterations > 0\n\t\t\t\t? parsedMaxIterations\n\t\t\t\t: null,\n\t\tembeddingDimension:\n\t\t\tparsedEmbeddingDimension && parsedEmbeddingDimension > 0\n\t\t\t\t? parsedEmbeddingDimension\n\t\t\t\t: null,\n\t\tembeddingSize:\n\t\t\tparsedEmbeddingSize && parsedEmbeddingSize > 0\n\t\t\t\t? parsedEmbeddingSize\n\t\t\t\t: null,\n\t\twalkLength:\n\t\t\tparsedWalkLength && parsedWalkLength > 0 ? parsedWalkLength : null,\n\t\tinOutFactor:\n\t\t\tparsedInoutFactor && parsedInoutFactor > 0 ? parsedInoutFactor : null,\n\t\treturnFactor:\n\t\t\tparsedReturnFactor && parsedReturnFactor > 0 ? parsedReturnFactor : null,\n\t\tbatchSize: parsedBatchSize && parsedBatchSize > 0 ? parsedBatchSize : null,\n\t\tnormalizationStrength:\n\t\t\tparsedNormalizationStrength && parsedNormalizationStrength > 0\n\t\t\t\t? parsedNormalizationStrength\n\t\t\t\t: null,\n\t\tmodelName: modelName\n\t}\n\n\tif (persist) {\n\t\tconfig.writeProperty = parsedWriteProperty\n\t}\n\n\tlet graphRequiredProperties = [\"nodeProjection\", \"relationshipProjection\"]\n\n\tparams.graphConfig = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\tgraphRequiredProperties\n\t)\n\tparams.config = filterParameters(\n\t\t{ ...params.config, ...config },\n\t\trequiredProperties\n\t)\n\treturn params\n}\n\nexport const createRelationshipProjection = (\n\trelationshipType,\n\tdirection,\n\tweightProperty,\n\tdefaultValue\n) => {\n\tconst relTypeKey = \"relType\"\n\treturn relationshipType === null || relationshipType === undefined\n\t\t? {\n\t\t\t\t[relTypeKey]: {\n\t\t\t\t\ttype: \"*\",\n\t\t\t\t\torientation:\n\t\t\t\t\t\tdirection === null || direction === undefined\n\t\t\t\t\t\t\t? \"NATURAL\"\n\t\t\t\t\t\t\t: direction.toUpperCase()\n\t\t\t\t}\n\t\t  }\n\t\t: {\n\t\t\t\t[relTypeKey]: {\n\t\t\t\t\ttype: relationshipType,\n\t\t\t\t\torientation:\n\t\t\t\t\t\tdirection === null || direction === undefined\n\t\t\t\t\t\t\t? \"NATURAL\"\n\t\t\t\t\t\t\t: direction.toUpperCase(),\n\t\t\t\t\tproperties: !weightProperty\n\t\t\t\t\t\t? {}\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t[weightProperty]: {\n\t\t\t\t\t\t\t\t\tproperty: weightProperty,\n\t\t\t\t\t\t\t\t\tdefaultValue: parseFloat(defaultValue) || null\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  }\n\t\t\t\t}\n\t\t  }\n}\n\nexport const baseParameters = (\n\tlabel,\n\trelationshipType,\n\tdirection,\n\tlimit,\n\tweightProperty,\n\tdefaultValue\n) => {\n\tconst parsedWeightProperty = weightProperty\n\t\t? weightProperty.trim()\n\t\t: weightProperty\n\n\treturn {\n\t\tlimit: parseInt(limit) || 50,\n\t\tconfig: {\n\t\t\tnodeProjection: label || \"*\",\n\t\t\trelationshipProjection: createRelationshipProjection(\n\t\t\t\trelationshipType,\n\t\t\t\tdirection,\n\t\t\t\tweightProperty,\n\t\t\t\tdefaultValue\n\t\t\t),\n\t\t\trelationshipWeightProperty: parsedWeightProperty || null\n\t\t}\n\t}\n}\n\nexport const filterParameters = (raw, allowed) => {\n\treturn Object.keys(raw)\n\t\t.filter(key => allowed.includes(key))\n\t\t.reduce((obj, key) => {\n\t\t\treturn {\n\t\t\t\t...obj,\n\t\t\t\t[key]: raw[key]\n\t\t\t}\n\t\t}, {})\n}\n","import React from 'react'\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\n\nexport default ({relationshipType, readOnly, onChange, direction, persist, writeProperty, weightProperty, label, labelOptions, relationshipTypeOptions, relationshipOrientationOptions, children}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        weightProperty,\n        onChange,\n        readOnly\n    }\n\n    return <React.Fragment>\n        <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n        <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>{children}</StoreProperty>\n    </React.Fragment>\n}\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\n\nconst DegreeForm = (props) => {\n    const {taskId, readOnly, label, relationshipType, labelOptions, relationshipTypeOptions, propertyKeyOptions, relPropertyKeyOptions,  relationshipOrientationOptions, onChange, writeProperty, weightProperty, defaultValue, direction, persist, children} = props\n    const projectedGraphProps = {\n        readOnly,\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        relPropertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        taskId\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n}\n\nexport default DegreeForm","import React from 'react'\nimport {Checkbox, Dropdown, Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst LouvainForm = ({readOnly, onChange, labelOptions, label, relationshipType, relationshipTypeOptions, relationshipOrientationOptions, relPropertyKeyOptions,\n                         propertyKeyOptions, weightProperty, writeProperty, seedProperty, includeIntermediateCommunities, defaultValue, direction, persist,\n                     children}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    const parameterProps = {\n        propertyKeyOptions, seedProperty, includeIntermediateCommunities, onChange, readOnly\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters {...parameterProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n\n}\n\nconst Parameters = ({propertyKeyOptions, seedProperty, includeIntermediateCommunities, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field inline>\n            <label style={{'width': '12em'}}>Seed Property</label>\n            <Dropdown disabled={readOnly} placeholder='Seed Property' defaultValue={seedProperty}  search selection\n                      options={propertyKeyOptions} onChange={(evt, data) => onChange(\"seedProperty\", data.value)}/>\n\n        </Form.Field>\n        <Form.Field inline>\n            <label style={{'width': '12em'}}>Intermediate Communities?</label>\n\n            <Checkbox disabled={readOnly} toggle checked={includeIntermediateCommunities} onChange={(evt, data) => {\n                onChange('includeIntermediateCommunities', data.checked)\n            }}/>\n\n        </Form.Field>\n    </OpenCloseSection>\n}\nexport default LouvainForm","import {runCypher, runStreamQuery, runStoreQuery} from \"./stores/neoStore\"\nimport {parseProperties} from \"./resultMapper\"\n\n\nexport const runAlgorithm = ({streamCypher, storeCypher, fetchCypher, parameters, persisted, parseResultStreamFn = parseResultStream}) => {\n  if (!persisted) {\n    return runStreamQuery(streamCypher, parameters, parseResultStreamFn)\n  } else {\n    return runStoreQuery(storeCypher, fetchCypher, parameters, parseResultStreamFn)\n  }\n}\n\nexport const triangles = ({streamCypher, parameters}) => {\n  return runStreamQuery(streamCypher, parameters, result => {\n    if (result.records) {\n      let rows = result.records.map(record => {\n        const nodeA = record.get('nodeA')\n        const nodeB = record.get('nodeB')\n        const nodeC = record.get('nodeC')\n\n        return {\n          nodeAProperties: parseProperties(nodeA.properties),\n          nodeALabels: nodeA.labels,\n          nodeAIdentity: nodeA.identity.toNumber(),\n\n          nodeBProperties: parseProperties(nodeB.properties),\n          nodeBLabels: nodeB.labels,\n          nodeBIdentity: nodeB.identity.toNumber(),\n\n          nodeCProperties: parseProperties(nodeC.properties),\n          nodeCLabels: nodeC.labels,\n          nodeCIdentity: nodeC.identity.toNumber()\n        }\n      });\n      return {\n        rows: rows,\n        ids: [...new Set(rows.flatMap(result => [result.nodeAIdentity, result.nodeBIdentity, result.nodeCIdentity]))],\n        labels: [...new Set(rows.flatMap(result => result.nodeALabels.concat(result.nodeBLabels).concat(result.nodeCLabels)))]\n      }\n    } else {\n      console.error(result.error)\n      throw new Error(result.error)\n    }\n  })\n}\n\nexport const triangleCountNew = ({streamCypher, storeCypher, fetchCypher, parameters, persisted}) => {\n  return runAlgorithm({\n    streamCypher, storeCypher, fetchCypher, parameters, persisted, parseResultStreamFn: result => {\n      if (result.records) {\n        let rows = result.records.map(record => {\n          const {properties, labels, identity} = record.get('node')\n\n          return {\n            properties: parseProperties(properties),\n            identity: identity.toNumber(),\n            labels: labels,\n            triangles: record.get('triangles').toNumber()\n          }\n        });\n        return {\n          rows: rows,\n          ids: rows.map(row => row.identity),\n          labels: [...new Set(rows.flatMap(result => result.labels))]\n        }\n      } else {\n        console.error(result.error)\n        throw new Error(result.error)\n      }\n    }\n  })\n}\n\nexport const localClusteringCoefficient = ({streamCypher, storeCypher, fetchCypher, parameters, persisted}) => {\n  return runAlgorithm({\n    streamCypher, storeCypher, fetchCypher, parameters, persisted, parseResultStreamFn: result => {\n      if (result.records) {\n        const rows = result.records.map(record => {\n          const {properties, labels, identity} = record.get('node')\n\n          return {\n            properties: parseProperties(properties),\n            identity: identity.toNumber(),\n            labels: labels,\n            coefficient: record.get('coefficient')\n          }\n        });\n        return {\n          rows: rows,\n          ids: rows.map(row => row.identity),\n          labels: [...new Set(rows.flatMap(result => result.labels))]\n        }\n      } else {\n        console.error(result.error)\n        throw new Error(result.error)\n      }\n    }\n  })\n}\n\nexport const runSpeakerListenerLPA = ({streamCypher, storeCypher, fetchCypher, parameters, persisted}) => {\n  return runAlgorithm({\n    streamCypher, storeCypher, fetchCypher, parameters, persisted, parseResultStreamFn: result => {\n      if (result.records) {\n        const rows = result.records.map(record => {\n          const nodes = record.get('nodes')\n          const communities = record.get(\"communities\")\n          return {\n            nodes: nodes.map(node => { return { properties: parseProperties(node.properties), identity: node.identity.toNumber(), labels: node.labels } }) ,\n            size: record.get('size').toNumber(),\n            communities: communities ? communities.map(value => value.toNumber()).toString() : null\n          }\n        });\n        return {\n          rows: rows,\n          ids: [...new Set(rows.flatMap(result => result.nodes.map(node => node.identity)))],\n          labels: [...new Set(rows.flatMap(result => result.nodes.flatMap(node => node.labels)))]\n        }\n      } else {\n        console.error(result.error)\n        throw new Error(result.error)\n      }\n    }\n  })\n}\n\n\nconst handleException = error => {\n  console.error(error)\n  throw new Error(error)\n}\nexport const parseResultStream = (result) => {\n  if (result.records) {\n    const rows = result.records.map(record => {\n      const nodes = record.get('nodes')\n      const communities = record.has(\"communities\") ? record.get(\"communities\") : null\n      return {\n        nodes: nodes.map(node => { return { properties: parseProperties(node.properties), identity: node.identity.toNumber(), labels: node.labels } }) ,\n        size: record.get('size').toNumber(),\n        community: record.get('community').toNumber(),\n        communities: communities ? communities.map(value => value.toNumber()).toString() : null\n      }\n    });\n    return {\n      rows: rows,\n      ids: [...new Set(rows.flatMap(result => result.nodes.map(node => node.identity)))],\n      labels: [...new Set(rows.flatMap(result => result.nodes.flatMap(node => node.labels)))]\n    }\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0', borderTop: '0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Community</Table.HeaderCell>\n          <Table.HeaderCell>Size</Table.HeaderCell>\n          <Table.HeaderCell>Nodes</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n          task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell>{result.community}</Table.Cell>\n            <Table.Cell>{result.size}</Table.Cell>\n            <Table.Cell>\n              {result.nodes.map((node, idx) => <PropertiesView key={\"properties-\" + idx} properties={node.properties} labels={node.labels} database={task.database}/>)}\n            </Table.Cell>\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={3}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\n\nconst AlgoForm = ({children, readOnly, onChange, labelOptions, label, relationshipType, relationshipOrientationOptions, \n    relationshipTypeOptions, propertyKeyOptions, writeProperty, weightProperty, defaultValue, direction, persist, relPropertyKeyOptions}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly} >\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\n\nconst AlgoForm = ({children, readOnly, onChange, labelOptions, relationshipType, label, relationshipOrientationOptions, relationshipTypeOptions, propertyKeyOptions, writeProperty, weightProperty, defaultValue, direction, persist, relPropertyKeyOptions}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n}\n\nexport default AlgoForm\n","import React from 'react'\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\n\nconst AlgoForm = ({readOnly, onChange, label, relationshipType, direction, persist, writeProperty, labelOptions, relationshipTypeOptions, relationshipOrientationOptions, children}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        onChange,\n\n        readOnly\n    }\n\n    return <React.Fragment>\n        <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n        <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n            {children}\n        </StoreProperty>\n    </React.Fragment>\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport CommunityForm from './CommunityForm'\n\nconst AlgoForm = ({ readOnly, onChange, relationshipType, label, relationshipOrientationOptions, labelOptions, relationshipTypeOptions, writeProperty, direction, persist, children }) => {\n    return (\n      <Form size='mini' style={{ marginBottom: '1em' }}>\n        <CommunityForm readOnly={readOnly} label={label} relationshipOrientationOptions={relationshipOrientationOptions} relationshipType={relationshipType} onChange={onChange} direction={direction} persist={persist} writeProperty={writeProperty}  labelOptions={labelOptions} relationshipTypeOptions={relationshipTypeOptions}>\n            {children}\n        </CommunityForm>\n      </Form>\n    )\n\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\";\nimport {OpenCloseSection} from \"./OpenCloseSection\";\n\nexport const ResultFilteringFields = ({limit, communityNodeLimit, returnsCommunities, updateCommunityNodeLimit, updateLimit, readOnly}) => {\n    return <React.Fragment>\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Rows to show</label>}\n                    control={Input} type='number' value={limit} onChange={updateLimit} min={1} max={1000} step={1}/>\n\n        {returnsCommunities ?\n            <Form.Field disabled={readOnly} inline\n                        label={<label style={{'width': '12em'}}>Community Node Limit</label>}\n                        control={Input} type='number' value={communityNodeLimit} onChange={updateCommunityNodeLimit}\n                        min={1} max={1000} step={1}/>\n            : null\n        }\n    </React.Fragment>\n}\n\nexport const ResultsFilteringWrapper = ({children}) => {\n    return <OpenCloseSection title=\"Results\">\n        {children}\n    </OpenCloseSection>\n}","import React from 'react'\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {ResultsFilteringWrapper} from \"../Form/ResultsFiltering\";\n\nconst AlgoForm = ({onChange, readOnly, relationshipType, label, direction, persist, labelOptions, relationshipTypeOptions, relationshipOrientationOptions, children}) => {\n  const projectedGraphProps = {\n    label,\n    labelOptions,\n    relationshipType,\n    direction,\n    relationshipTypeOptions,\n    relationshipOrientationOptions,\n    onChange,\n    readOnly\n  }\n\n  return <React.Fragment>\n    <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n    <ResultsFilteringWrapper>{children}</ResultsFilteringWrapper>\n  </React.Fragment>\n}\n\n\nexport default AlgoForm\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport StreamOnlyForm from './StreamOnlyForm'\n\nconst AlgoForm = ({readOnly, onChange, label, relationshipType, labelOptions, relationshipTypeOptions, direction, persist, children}) => {\n    const relationshipOrientationOptions = [{key: \"Undirected\", value: \"Undirected\", text: 'Undirected'}]\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <StreamOnlyForm label={label} readOnly={readOnly} onChange={onChange} relationshipType={relationshipType}\n                            relationshipOrientationOptions={relationshipOrientationOptions} direction={direction}\n                            persist={persist} labelOptions={labelOptions}\n                            relationshipTypeOptions={relationshipTypeOptions}>\n                {children}\n            </StreamOnlyForm>\n        </Form>\n    )\n}\n\nexport default AlgoForm","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node A</Table.HeaderCell>\n          <Table.HeaderCell>Node B</Table.HeaderCell>\n          <Table.HeaderCell>Node C</Table.HeaderCell>\n\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.nodeAProperties} labels={result.nodeALabels} database={task.database}/></Table.Cell>\n            <Table.Cell> <PropertiesView properties={result.nodeBProperties} labels={result.nodeBLabels} database={task.database}/></Table.Cell>\n            <Table.Cell> <PropertiesView properties={result.nodeCProperties} labels={result.nodeCLabels} database={task.database}/></Table.Cell>\n\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={3}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader size='big' active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Community</Table.HeaderCell>\n          <Table.HeaderCell>Communities</Table.HeaderCell>\n          <Table.HeaderCell>Size</Table.HeaderCell>\n          <Table.HeaderCell>Nodes</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell>{result.community}</Table.Cell>\n            <Table.Cell>{result.communities}</Table.Cell>\n            <Table.Cell>{result.size}</Table.Cell>\n            <Table.Cell>\n              {result.nodes.map((node, index) => <PropertiesView key={index} properties={node.properties} labels={node.labels} database={task.database}/>)}\n            </Table.Cell>\n\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={4}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node</Table.HeaderCell>\n          <Table.HeaderCell>Triangles</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.properties} labels={result.labels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.triangles}</Table.Cell>\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={4}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport CommunityForm from './CommunityForm'\n\nconst AlgoForm = ({readOnly, label, onChange, labelOptions, relationshipType, relationshipTypeOptions, writeProperty, direction, persist, children}) => {\n    const relationshipOrientationOptions = [{key: \"Undirected\", value: \"Undirected\", text: 'Undirected'}]\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <CommunityForm readOnly={readOnly} onChange={onChange} direction={direction} persist={persist} writeProperty={writeProperty}\n                           labelOptions={labelOptions} label={label}\n                           relationshipType={relationshipType}\n                           relationshipOrientationOptions={relationshipOrientationOptions}\n                           relationshipTypeOptions={relationshipTypeOptions}>\n                {children}\n            </CommunityForm>\n\n        </Form>\n    )\n}\n\nexport default AlgoForm","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node</Table.HeaderCell>\n          <Table.HeaderCell>Coefficient</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.properties} labels={result.labels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.coefficient}</Table.Cell>\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={4}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport CommunityForm from './CommunityForm'\n\nconst AlgoForm = ({readOnly, onChange, label, labelOptions, relationshipType, relationshipTypeOptions, writeProperty, direction, persist, children}) => {\n    const relationshipOrientationOptions = [{key: \"Undirected\", value: \"Undirected\", text: 'Undirected'}]\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <CommunityForm readOnly={readOnly}onChange={onChange} direction={direction} persist={persist} writeProperty={writeProperty}\n                           labelOptions={labelOptions} label={label}\n                           relationshipType={relationshipType}\n                           relationshipOrientationOptions={relationshipOrientationOptions}\n                           relationshipTypeOptions={relationshipTypeOptions}>\n                {children}\n            </CommunityForm>\n\n        </Form>\n    )\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Dropdown, Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({\n                      children, readOnly, onChange, labelOptions, maxIterations, tolerance, label, relationshipType, relationshipTypeOptions, relationshipOrientationOptions,\n                      propertyKeyOptions, weightProperty, writeProperty, seedProperty, defaultValue, direction, persist, relPropertyKeyOptions\n                  }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    const parameterProps = {\n        propertyKeyOptions, seedProperty, maxIterations, onChange, tolerance, readOnly\n    }\n\n    return (\n        <Form style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters {...parameterProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n}\n\nconst Parameters = ({propertyKeyOptions, seedProperty, maxIterations, onChange, tolerance, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={maxIterations}\n                    onChange={(evt, data) => onChange('maxIterations', data.value)} min={1} max={50} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Damping Factor</label>}\n                    control={Input} type='number' value={tolerance} step={0.001}\n                    onChange={(evt, data) => onChange('tolerance', data.value)}/>\n\n\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Seed Property</label>\n            <Dropdown disabled={readOnly} placeholder='Seed Property' defaultValue={seedProperty} search selection\n                      options={propertyKeyOptions} onChange={(evt, data) => onChange(\"seedProperty\", data.value)}/>\n\n        </Form.Field>\n    </OpenCloseSection>\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({readOnly, children, onChange, label, labelOptions, maxIterations, relationshipType, relationshipTypeOptions, relPropertyKeyOptions,\n                      relationshipOrientationOptions, propertyKeyOptions, weightProperty, writeProperty, defaultValue, direction, persist}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters maxIterations={maxIterations} onChange={onChange} readOnly={readOnly}/>\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst Parameters = ({maxIterations, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={maxIterations}\n                    onChange={(evt, data) => onChange('maxIterations', data.value)} min={1} max={50} step={1}/>\n    </OpenCloseSection>\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../../Form/OpenCloseSection\";\n\nconst SLLPAForm = ({\n                       readOnly,\n                       onChange,\n                       labelOptions,\n                       label,\n                       relationshipType,\n                       relationshipTypeOptions,\n                       relationshipOrientationOptions,\n                       propertyKeyOptions,\n                       weightProperty,\n                       writeProperty,\n                       maxIterations,\n                       minAssociationStrength,\n                       defaultValue,\n                       direction,\n                       persist,\n                       children\n                   }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly\n    }\n\n    const parameterProps = {\n        maxIterations, minAssociationStrength, onChange, readOnly\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters {...parameterProps} />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n                {children}\n            </StoreProperty>\n        </Form>\n    )\n\n}\n\nconst Parameters = ({maxIterations, minAssociationStrength, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={maxIterations}\n                    onChange={(evt, data) => onChange('maxIterations', data.value)} min={1} max={50} step={1}/>\n\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Min Association Strength</label>}\n                    control={Input} type='number' value={minAssociationStrength} step={0.01}\n                    onChange={(evt, data) => onChange('minAssociationStrength', data.value)}/>\n    </OpenCloseSection>\n}\nexport default SLLPAForm\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader size='big' active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Communities</Table.HeaderCell>\n          <Table.HeaderCell>Size</Table.HeaderCell>\n          <Table.HeaderCell>Nodes</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell>{result.communities}</Table.Cell>\n            <Table.Cell>{result.size}</Table.Cell>\n            <Table.Cell>\n              {result.nodes.map((node, index) => <PropertiesView key={index} properties={node.properties} labels={node.labels} database={task.database}/>)}\n            </Table.Cell>\n\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={4}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import LouvainForm from \"./LouvainForm\"\nimport {\n\tlocalClusteringCoefficient,\n\trunAlgorithm,\n\trunSpeakerListenerLPA,\n\ttriangleCountNew,\n\ttriangles\n} from \"../../services/communityDetection\"\nimport CommunityResult from \"./CommunityResult\"\nimport LabelPropagationForm from \"./LabelPropagationForm\"\nimport ConnectedComponentsForm from \"./ConnectedComponentsForm\"\nimport StronglyConnectedComponentsForm from \"./StronglyConnectedComponentsForm\"\nimport TrianglesForm from \"./TrianglesForm\"\nimport TrianglesResult from \"./TrianglesResult\"\nimport LouvainResult from \"./LouvainResult\"\nimport {\n\tcommunityParams,\n\tcommunityStreamQueryOutline,\n\tgetCommunityFetchCypher,\n\tgetFetchLouvainCypher,\n\tgetFetchNewLocalClusteringCoefficientCypher,\n\tgetFetchNewTriangleCountCypher,\n\tgetFetchSLLPACypher\n} from \"../../services/queries\"\nimport NewTriangleCountResult from \"./NewTriangleCountResult\"\nimport NewTriangleCountForm from \"./NewTriangleCountForm\"\nimport LocalClusteringCoefficientResult from \"./LocalClusteringCoefficientResult\"\nimport NewLocalClusteringCoefficientForm from \"./NewLocalClusteringCoefficientForm\"\nimport ModularityOptimizationForm from \"./ModularityOptimizationForm\"\nimport K1ColoringForm from \"./K1ColoringForm\"\nimport SLLPAForm from \"./SLLPA/Form\"\nimport SLLPAResult from \"./SLLPA/Result\"\n\nconst removeSpacing = query => query.replace(/^[^\\S\\r\\n]+|[^\\S\\r\\n]+$/gm, \"\")\n\nconst commonParameters = {\n\tlabel: \"*\",\n\trelationshipType: \"*\",\n\tpersist: false,\n\tdirection: \"Undirected\"\n}\n\nconst commonRelWeightParameters = {\n\t...commonParameters,\n\t...{\n\t\tdefaultValue: 1.0,\n\t\trelationshipWeightProperty: null\n\t}\n}\n\nlet algorithms = {\n\tLouvain: {\n\t\talgorithmName: \"gds.louvain\",\n\t\tForm: LouvainForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: LouvainResult,\n\t\tparameters: {\n\t\t\t...commonRelWeightParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"louvain\",\n\t\t\t\tincludeIntermediateCommunities: false,\n\t\t\t\tintermediateCommunitiesWriteProperty: \"louvainIntermediate\",\n\t\t\t\tseedProperty: null\n\t\t\t}\n\t\t},\n\t\tstreamQuery: `CALL gds.louvain.stream($generatedName, $config)\nYIELD nodeId, communityId AS community, intermediateCommunityIds AS communities\nWITH gds.util.asNode(nodeId) AS node, community, communities\nWITH community, communities, collect(node) AS nodes\nRETURN community, communities, nodes[0..$communityNodeLimit] AS nodes, size(nodes) AS size\nORDER BY size DESC\nLIMIT toInteger($limit)`,\n\t\tstoreQuery: `CALL gds.louvain.write($generatedName, $config)`,\n\t\tgetFetchQuery: getFetchLouvainCypher,\n\t\tdescription: `one of the fastest modularity-based algorithms and also reveals a hierarchy of communities at different scales`,\n\t\treturnsCommunities: true\n\t},\n\tSLLPA: {\n\t\talgorithmName: \"gds.alpha.sllpa\",\n\t\tForm: SLLPAForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runSpeakerListenerLPA,\n\t\tResultView: SLLPAResult,\n\t\tparameters: {\n\t\t\t...commonRelWeightParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"pregel_\",\n\t\t\t\tmaxIterations: 10,\n\t\t\t\tminAssociationStrength: 0.1\n\t\t\t}\n\t\t},\n\t\tstreamQuery: `CALL gds.alpha.sllpa.stream($generatedName, $config)\nYIELD nodeId, values        \nWITH gds.util.asNode(nodeId) AS node, values.communityIds AS communities\nWITH communities, collect(node) AS nodes\nRETURN communities, nodes[0..$communityNodeLimit] AS nodes, size(nodes) AS size\nORDER BY size DESC\nLIMIT toInteger($limit)`,\n\t\tstoreQuery: `CALL gds.alpha.sllpa.write($generatedName, $config)`,\n\t\tgetFetchQuery: getFetchSLLPACypher,\n\t\tdescription: `variation of the Label Propagation algorithm that is able to detect multiple communities per node.`,\n\t\treturnsCommunities: true\n\t},\n\t\"Modularity Optimization\": {\n\t\talgorithmName: \"gds.beta.modularityOptimization\",\n\t\tForm: ModularityOptimizationForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: CommunityResult,\n\t\tparameters: {\n\t\t\t...commonRelWeightParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"modularityOptimization\",\n\t\t\t\tseedProperty: null,\n\t\t\t\tmaxIterations: 10,\n\t\t\t\ttolerance: 0.0001\n\t\t\t}\n\t\t},\n\t\tstreamQuery: communityStreamQueryOutline(\n\t\t\t`CALL gds.beta.modularityOptimization.stream($generatedName, $config) YIELD nodeId, communityId AS community`\n\t\t),\n\t\tstoreQuery: `CALL gds.beta.modularityOptimization.write($generatedName, $config)`,\n\t\tgetFetchQuery: getCommunityFetchCypher,\n\t\tdescription: `detect communities in the graph based on their modularity.`,\n\t\treturnsCommunities: true\n\t},\n\t\"K1-Coloring\": {\n\t\talgorithmName: \"gds.beta.k1coloring\",\n\t\tForm: K1ColoringForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: CommunityResult,\n\t\tparameters: {\n\t\t\t...commonRelWeightParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"k1Coloring\",\n\t\t\t\tmaxIterations: 10\n\t\t\t}\n\t\t},\n\t\tstreamQuery: communityStreamQueryOutline(\n\t\t\t`CALL gds.beta.k1coloring.stream($generatedName, $config) YIELD nodeId, color AS community`\n\t\t),\n\t\tstoreQuery: `CALL gds.beta.k1coloring.write($generatedName, $config)`,\n\t\tgetFetchQuery: getCommunityFetchCypher,\n\t\tdescription: `assigns a color to each node trying to use as few colours as possible and making sure neighbors of a node have a different color to that node.`,\n\t\treturnsCommunities: true\n\t},\n\t\"Label Propagation\": {\n\t\talgorithmName: \"gds.labelPropagation\",\n\t\tForm: LabelPropagationForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: CommunityResult,\n\t\tparameters: { ...commonRelWeightParameters, ...{ writeProperty: \"lpa\" } },\n\t\tstreamQuery: communityStreamQueryOutline(\n\t\t\t`CALL gds.labelPropagation.stream($generatedName, $config) YIELD nodeId, communityId AS community`\n\t\t),\n\t\tstoreQuery: `CALL gds.labelPropagation.write($generatedName, $config)`,\n\t\tgetFetchQuery: getCommunityFetchCypher,\n\t\tdescription: \"a fast algorithm for finding communities in a graph\",\n\t\treturnsCommunities: true\n\t},\n\t\"Connected Components\": {\n\t\talgorithmName: \"gds.wcc\",\n\t\tForm: ConnectedComponentsForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: CommunityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"wcc\",\n\t\t\t\tdefaultValue: 1.0\n\t\t\t}\n\t\t},\n\t\tstreamQuery: communityStreamQueryOutline(\n\t\t\t`CALL gds.wcc.stream($generatedName, $config) YIELD nodeId, componentId AS community`\n\t\t),\n\t\tstoreQuery: `CALL gds.wcc.write($generatedName, $config)`,\n\t\tgetFetchQuery: getCommunityFetchCypher,\n\t\tdescription:\n\t\t\t\"finds sets of connected nodes in an undirected graph where each node is reachable from any other node in the same set\",\n\t\treturnsCommunities: true\n\t},\n\t\"Strongly Connected Components\": {\n\t\talgorithmName: \"gds.alpha.scc\",\n\t\tForm: StronglyConnectedComponentsForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: CommunityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{ writeProperty: \"scc\", defaultValue: 1.0 }\n\t\t},\n\t\tstreamQuery: communityStreamQueryOutline(\n\t\t\t`CALL gds.alpha.scc.stream($generatedName, $config) YIELD nodeId, componentId AS community`\n\t\t),\n\t\tstoreQuery: `CALL gds.alpha.scc.write($generatedName, $config)`,\n\t\tgetFetchQuery: getCommunityFetchCypher,\n\t\tdescription:\n\t\t\t\"finds sets of connected nodes in a directed graph where each node is reachable in both directions from any other node in the same set\",\n\t\treturnsCommunities: true\n\t},\n\t\"Local Clustering Coefficient\": {\n\t\talgorithmName: \"gds.localClusteringCoefficient\",\n\t\tparametersBuilder: communityParams,\n\t\tResultView: LocalClusteringCoefficientResult,\n\t\tservice: localClusteringCoefficient,\n\t\tdescription:\n\t\t\t\"describes the likelihood that the neighbours of node are also connected\",\n\t\tForm: NewLocalClusteringCoefficientForm,\n\t\tstreamQuery: removeSpacing(`CALL gds.localClusteringCoefficient.stream($generatedName, $config)\n          YIELD nodeId, localClusteringCoefficient AS coefficient\n          WITH gds.util.asNode(nodeId) AS node, coefficient\n          RETURN node, coefficient\n          ORDER BY coefficient DESC\n          LIMIT toInteger($limit)`),\n\t\tstoreQuery: `CALL gds.localClusteringCoefficient.write($generatedName, $config)`,\n\t\tparameters: { ...commonParameters, ...{ writeProperty: \"coefficient\" } },\n\t\tgetFetchQuery: getFetchNewLocalClusteringCoefficientCypher\n\t},\n\t\"Triangle Count\": {\n\t\talgorithmName: \"gds.triangleCount\",\n\t\tForm: NewTriangleCountForm,\n\t\tservice: triangleCountNew,\n\t\tResultView: NewTriangleCountResult,\n\t\tstreamQuery: removeSpacing(`CALL gds.triangleCount.stream($generatedName, $config)\n          YIELD nodeId, triangleCount AS triangles\n          WITH gds.util.asNode(nodeId) AS node, triangles\n          RETURN node, triangles\n          ORDER BY triangles DESC\n          LIMIT toInteger($limit)`),\n\t\tstoreQuery: `CALL gds.triangleCount.write($generatedName, $config)`,\n\t\tparameters: { ...commonParameters, ...{ writeProperty: \"trianglesCount\" } },\n\t\tgetFetchQuery: getFetchNewTriangleCountCypher,\n\t\tparametersBuilder: communityParams,\n\t\tdescription:\n\t\t\t\"finds set of three nodes, where each node has a relationship to all other nodes\"\n\t},\n\tTriangles: {\n\t\talgorithmName: \"gds.alpha.triangles\",\n\t\tForm: TrianglesForm,\n\t\tparametersBuilder: communityParams,\n\t\tservice: triangles,\n\t\tResultView: TrianglesResult,\n\t\tparameters: commonParameters,\n\t\tstoreQuery: ``,\n\t\tgetFetchQuery: () => ``,\n\t\tdescription:\n\t\t\t\"finds set of three nodes, where each node has a relationship to all other nodes\",\n\t\tstreamQuery: removeSpacing(`CALL gds.alpha.triangles($generatedName, $config)\n    YIELD nodeA, nodeB, nodeC\n    RETURN gds.util.asNode(nodeA) AS nodeA, gds.util.asNode(nodeB) AS nodeB, gds.util.asNode(nodeC) AS nodeC\n    LIMIT toInteger($limit)`)\n\t}\n}\n\nexport default {\n\talgorithmList: gdsVersion => {\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\n\t\tconst algorithms = [\n\t\t\t\"Louvain\",\n\t\t\t\"Modularity Optimization\",\n\t\t\t\"Label Propagation\",\n\t\t\t\"K1-Coloring\",\n\t\t\t\"Connected Components\",\n\t\t\t\"Strongly Connected Components\",\n\t\t\t\"Triangles\",\n\t\t\t\"Triangle Count\",\n\t\t\t\"Local Clustering Coefficient\",\n\t\t\t\"SLLPA\"\n\t\t]\n\t\treturn algorithms\n\t\t//return version >= 5 ? algorithms.concat([\"SLLPA\"]) : algorithms;\n\t},\n\talgorithmDefinitions: (algorithm, gdsVersion) => {\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\t\tswitch (algorithm) {\n\t\t\t/*\n      case \"Triangles\": {\n        const oldStreamQuery = `CALL gds.alpha.triangle.stream($config)\n                YIELD nodeA, nodeB, nodeC\n                RETURN gds.util.asNode(nodeA) AS nodeA, gds.util.asNode(nodeB) AS nodeB, gds.util.asNode(nodeC) AS nodeC\n                LIMIT toInteger($limit)`\n\n        const newStreamQuery = `CALL gds.alpha.triangles($config)\n                YIELD nodeA, nodeB, nodeC\n                RETURN gds.util.asNode(nodeA) AS nodeA, gds.util.asNode(nodeB) AS nodeB, gds.util.asNode(nodeC) AS nodeC\n                LIMIT toInteger($limit)`\n\n        baseTriangles.streamQuery = removeSpacing(version > 1 ? newStreamQuery : oldStreamQuery)\n        return baseTriangles\n      }*/\n\t\t\tdefault:\n\t\t\t\treturn algorithms[algorithm]\n\t\t}\n\t}\n}\n","import centralityDict from '../components/Centralities/algorithmsDictionary'\nimport communityDict from '../components/Communities/algorithmsDictionary'\n\nconst NAME = 'SETTINGS'\nconst SET = `${NAME}/SET`\nconst LIMIT = `${NAME}/LIMIT`\nconst COMMUNITY_NODE_LIMIT = `${NAME}/COMMUNITY_NODE_LIMIT`\nconst HIDE_PROPERTY = `${NAME}/HIDE_PROPERTY`\nconst RESET_LABELS = `${NAME}/RESET_LABELS`\n\nconst getBlacklist = () => {\n  const blacklist = new Set()\n\n  Object.values(centralityDict.algorithmDefinitions)\n    .concat(Object.values(communityDict.algorithmDefinitions))\n    .forEach(definition => {\n      if (definition.parameters.writeProperty) {\n        blacklist.add(definition.parameters.writeProperty)\n      }\n\n      if (definition.parameters.intermediateCommunitiesWriteProperty) {\n        blacklist.add(definition.parameters.intermediateCommunitiesWriteProperty)\n      }\n    })\n\n  return Array.from(blacklist)\n}\n\nconst getInitialState = () => {\n  return {\n    hiddenProperties: {\n      '_ALL_NEULER_': getBlacklist()\n    },\n    limit: 42,\n    communityNodeLimit: 10,\n    labels: {\n    }\n  }\n}\n\n\nexport const limit = limit => ({\n  type: LIMIT,\n  limit\n})\n\nexport const communityNodeLimit = limit => ({\n  type: COMMUNITY_NODE_LIMIT,\n  limit\n})\n\nexport const set = (key, value) => ({\n  type: SET,\n  key,\n  value\n})\n\nexport const hideProperty = (labels, key) => ({\n  type: HIDE_PROPERTY,\n  labels,\n  key\n})\n\nexport const resetLabelsProperties = labels => ({\n  type: RESET_LABELS,\n  labels\n})\n\nexport default (state = getInitialState(), action) => {\n  switch (action.type) {\n    case LIMIT:\n      return {\n        ...state,\n        limit: action.limit\n      }\n    case COMMUNITY_NODE_LIMIT:\n      return {\n        ...state,\n        communityNodeLimit: action.limit\n      }\n    case SET:\n      return {\n        ...state,\n        [action.key]: action.value\n      }\n    case HIDE_PROPERTY:\n      const hiddenPropertiesMap = { ...state.hiddenProperties }\n      action.labels.forEach(label => {\n        const hiddenProperties = hiddenPropertiesMap[label]\n\n        if (hiddenProperties) {\n          if (!hiddenProperties.includes(action.key)) {\n            hiddenProperties.push(action.key)\n          }\n        } else {\n          hiddenPropertiesMap[label] = [action.key]\n        }\n      })\n      return {\n        ...state,\n        hiddenProperties: hiddenPropertiesMap\n      }\n    case RESET_LABELS:\n      const hiddenProperties = { ...state.hiddenProperties }\n      action.labels.forEach(label => delete hiddenProperties[label])\n      return {\n        ...state,\n        hiddenProperties\n      }\n    default:\n      return state\n  }\n}\n","const NAME = 'METADATA'\n\nexport const SET_METADATA = `${NAME}/SET_METADATA`\nexport const SET_LABELS = `${NAME}/SET_LABELS`\nexport const SET_RELATIONSHIPTYPES = `${NAME}/SET_RELATIONSHIPTYPES`\nexport const SET_PROPERTY_KEYS = `${NAME}/SET_PROPERTY_KEYS`\nexport const SET_NODE_PROPERTY_KEYS = `${NAME}/SET_NODE_PROPERTY_KEYS`\nexport const SET_REL_PROPERTY_KEYS = `${NAME}/SET_REL_PROPERTY_KEYS`\nexport const SET_VERSIONS = `${NAME}/SET_VERSIONS`\nexport const SET_DATABASES = `${NAME}/SET_DATABASES`\nexport const SET_ACTIVE_DATABASE = `${NAME}/SET_ACTIVE_DATABASE`\n\nconst ADD_DATABASE = `${NAME}/ADD_DATABASE`\nconst INIT_LABEL = `${NAME}/INIT_LABEL`\nconst UPDATE_LABEL_COLOR = `${NAME}/UPDATE_LABEL_COLOR`\nconst UPDATE_LABEL_PROPERTY_KEYS = `${NAME}/UPDATE_LABEL_PROPERTY_KEYS`\n\nexport const setMetadata = (labels, relationshipTypes) => ({\n  type: SET_METADATA,\n  labels,\n  relationshipTypes\n})\n\nexport const setLabels = labels => ({\n  type: SET_LABELS,\n  labels\n})\n\nexport const setRelationshipTypes = relationshipTypes => ({\n  type: SET_RELATIONSHIPTYPES,\n  relationshipTypes\n})\n\nexport const setPropertyKeys = propertyKeys => ({\n  type: SET_PROPERTY_KEYS,\n  propertyKeys: propertyKeys\n})\n\nexport const setNodePropertyKeys = nodePropertyKeys => ({\n  type: SET_NODE_PROPERTY_KEYS,\n  nodePropertyKeys: nodePropertyKeys\n})\n\nexport const setRelPropertyKeys = relPropertyKeys => ({\n  type: SET_REL_PROPERTY_KEYS,\n  relPropertyKeys: relPropertyKeys\n})\n\nexport const setVersions = version => ({\n  type: SET_VERSIONS,\n  version\n})\n\nexport const setDatabases = databases => ({\n  type: SET_DATABASES,\n  databases\n})\n\nexport const setActiveDatabase = activeDatabase => ({\n  type: SET_ACTIVE_DATABASE,\n  activeDatabase\n})\n\nexport const addDatabase = database => ({\n  type: ADD_DATABASE,\n  database\n})\n\nexport const initLabel = (database, label, color, propertyKeys) => ({\n  type: INIT_LABEL,\n  database,\n  label,\n  color,\n  propertyKeys\n})\n\nexport const updateLabelColor = (database, label, color) => ({\n  type: UPDATE_LABEL_COLOR,\n  database,\n  label,\n  color\n})\n\nexport const updateLabelPropertyKeys = (database, label, propertyKeys) => ({\n  type: UPDATE_LABEL_PROPERTY_KEYS,\n  database,\n  label,\n  propertyKeys\n})\n\nconst initialState = {\n  labels: [],\n  relationshipTypes: [],\n  databases: [],\n  activeDatabase: \"neo4j\",\n  allLabels: {}\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_METADATA:\n      return {\n        labels: action.labels,\n        relationshipTypes: action.relationshipTypes\n      }\n    case SET_LABELS:\n      return {\n        ...state,\n        labels: action.labels\n      }\n    case SET_RELATIONSHIPTYPES:\n      return {\n        ...state,\n        relationshipTypes: action.relationshipTypes\n      }\n    case SET_PROPERTY_KEYS:\n      return {\n        ...state,\n        propertyKeys: action.propertyKeys\n      }\n    case SET_NODE_PROPERTY_KEYS:\n      return {\n        ...state,\n        nodePropertyKeys: action.nodePropertyKeys\n      }\n    case SET_REL_PROPERTY_KEYS:\n      return {\n        ...state,\n        relPropertyKeys: action.relPropertyKeys\n      }\n    case SET_VERSIONS:\n      return {\n        ...state,\n        versions: action.version\n      }\n    case SET_DATABASES:\n      return {\n        ...state,\n        databases: action.databases\n      }\n    case SET_ACTIVE_DATABASE:\n      return {\n        ...state,\n        activeDatabase: action.activeDatabase\n      }\n    case ADD_DATABASE: {\n      let allLabels = {...state.allLabels}\n      if (!(action.database in allLabels)) {\n        allLabels[action.database] = {}\n      }\n\n      return {\n        ...state,\n        allLabels\n      }\n    }\n    case INIT_LABEL:\n      let initialLabels = {...state.allLabels}\n\n      if(!(action.label in initialLabels[action.database])) {\n        initialLabels[action.database][action.label] = {\n          color: action.color,\n          propertyKeys: action.propertyKeys\n        }\n      }\n\n      return {\n        ...state,\n        allLabels: initialLabels\n      }\n    case UPDATE_LABEL_COLOR:\n      let initLabels = {...state.allLabels}\n      initLabels[action.database][action.label].color = action.color\n\n      return {\n        ...state,\n        allLabels: initLabels\n      }\n    case UPDATE_LABEL_PROPERTY_KEYS:\n      let startLabels = {...state.allLabels}\n      startLabels[action.database][action.label].propertyKeys = action.propertyKeys\n\n      return {\n        ...state,\n        allLabels: startLabels\n      }\n    default:\n      return state\n  }\n}\n","import {Checkbox, Divider, Grid, Modal} from \"semantic-ui-react\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {SketchPicker} from 'react-color';\nimport reactCSS from 'reactcss'\nimport {updateLabelColor, updateLabelPropertyKeys} from \"../../ducks/metadata\";\n\nexport const getNodeLabel = (globalLabels, database, label) => {\n    const nodeLabel = globalLabels[database][label];\n    return nodeLabel ? nodeLabel : {color: \"#efefef\", propertyKeys: []};\n}\n\nconst UpdateNodeLabel = ({updateLabelColor, metadata, database, open, setOpen, label, globalLabels}) => {\n    const [displayColorPicker, setDisplayColorPicker] = React.useState(false)\n\n    const nodeLabel = getNodeLabel(globalLabels, database, label)\n    const [color, setColor] = React.useState(null)\n\n    React.useEffect(() => {\n        setColor(nodeLabel.color)\n    }, [nodeLabel.color])\n\n    const styles = reactCSS({\n        'default': {\n            color: {\n                width: '36px',\n                height: '14px',\n                borderRadius: '2px',\n                background: `${color}`,\n            },\n            swatch: {\n\n                padding: '5px',\n                background: '#fff',\n                borderRadius: '1px',\n                boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                display: 'inline-block',\n                cursor: 'pointer',\n\n            },\n            popover: {\n                position: 'absolute',\n                zIndex: '2',\n            },\n            cover: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n            },\n        },\n    });\n\n    return <Modal open={open}\n                  onClose={() => {\n                      setOpen(false);\n                      setDisplayColorPicker(false)\n                  }}\n                  onOpen={() => setOpen(true)}\n                  centered={false}\n                  closeIcon\n                  size=\"small\">\n        <Modal.Header>\n            Update {label}\n        </Modal.Header>\n        <Modal.Content >\n            <div key={color}>\n                <div className=\"update-node-row\">\n                    <h4>Color</h4>\n                    <div>\n                        <div style={styles.swatch} onClick={() => setDisplayColorPicker(true)}>\n                            <div style={styles.color}/>\n                        </div>\n                        {displayColorPicker ? <div style={styles.popover}>\n                            <div style={styles.cover} onClick={() => setDisplayColorPicker(false)}/>\n                            <SketchPicker\n                                disableAlpha={true}\n                                color={color}\n                                onChange={(c) => setColor(c.hex)}\n                                onChangeComplete={(c) => {\n                                    setColor(c.hex)\n                                    updateLabelColor(database, label, c.hex)\n                                }}\n                            />\n                        </div> : null}\n\n                    </div>\n                </div>\n                <Divider />\n                <div className=\"update-node-row\">\n                    <h4>Caption</h4>\n                    <SelectCaption database={database} label={label} />\n                </div>\n\n            </div>\n        </Modal.Content>\n    </Modal>\n}\n\nconst SelectCaptionView = ({metadata, globalLabels, database, label,updateLabelPropertyKeys}) => {\n    const nodeLabel = getNodeLabel(globalLabels, database, label)\n    const [selectedPropertyKeys, setSelectedPropertyKeys]  = React.useState(nodeLabel.propertyKeys)\n\n    return <div key={selectedPropertyKeys}>\n        <Grid columns={3}>\n            {label in metadata.nodePropertyKeys && metadata.nodePropertyKeys[label].map(key =>\n                <Grid.Column key={key}>\n                    <Checkbox\n                        name={key}\n                        checked={selectedPropertyKeys.includes(key)}\n                        onChange={(_, data) => {\n                            if(data.checked) {\n                                setSelectedPropertyKeys([...selectedPropertyKeys, data.name])\n                                updateLabelPropertyKeys(database, label, [...selectedPropertyKeys, data.name])\n                            } else {\n                                setSelectedPropertyKeys(selectedPropertyKeys.filter(key => key !== data.name))\n                                updateLabelPropertyKeys(database, label, selectedPropertyKeys.filter(key => key !== data.name))\n                            }\n                        }}\n\n                        label={<label title={key}>{key}</label>}\n                    />\n                </Grid.Column>)}\n        </Grid>\n    </div>\n}\n\nconst SelectCaption = connect(state => ({metadata: state.metadata, globalLabels: state.metadata.allLabels}), dispatch => ({\n        updateLabelPropertyKeys: (database, label, propertyKeys) => dispatch(updateLabelPropertyKeys(database, label, propertyKeys))\n    })\n)(SelectCaptionView)\n\nconst mapStateToProps = state => ({\n    globalLabels: state.metadata.allLabels,\n    metadata: state.metadata\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateLabelColor: (database, label, color) => dispatch(updateLabelColor(database, label, color))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNodeLabel)\n","import {connect} from \"react-redux\";\nimport React from \"react\";\nimport UpdateNodeLabel, {getNodeLabel} from \"./Onboarding/UpdateNodeLabel\";\n\nconst randomColor = require('randomcolor');\nconst tenOf = (color) => {\n    return randomColor({\n        count: 10,\n        hue: color,\n        luminosity: 'light',\n    });\n}\n\nconst colors = tenOf(\"green\").concat(tenOf(\"blue\")).concat(tenOf(\"orange\")).concat(tenOf(\"red\")).concat(tenOf(\"yellow\"));\n\nexport const selectCaption = (propertyKeys) => {\n    if (!propertyKeys) {\n        return [];\n    }\n\n    const favouredCaptions = [\"name\", \"title\", \"id\", \"value\"]\n    const selectedFavouriteCaptions = favouredCaptions.filter(key => propertyKeys.includes(key)) || propertyKeys[Math.floor(Math.random() * propertyKeys.length)];\n    return selectedFavouriteCaptions.length > 0 ? selectedFavouriteCaptions : [propertyKeys[Math.floor(Math.random() * propertyKeys.length)]]\n}\n\nexport const selectRandomColor = () => {\n    return colors[Math.floor(Math.random() * 50)]\n}\n\nconst getNested = (obj, ...args) => {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n}\n\nexport const generateCellStyle = (style, labels, labelBackgrounds) => {\n    let [label] = labels;\n    style.background = getNested(labelBackgrounds, label, \"color\") || \"#efefef\"\n    return style;\n}\n\nconst NodeLabel = ({labels, database, globalLabels, caption, readOnly}) => {\n    const [open, setOpen] = React.useState(false)\n    let [label] = labels;\n\n    const labelBackgrounds = globalLabels[database]\n\n    let style = {\n        maxWidth: '40em',\n        overflow: 'hidden',\n        cursor: \"pointer\"\n    };\n\n    let readOnlyStyle = {\n        maxWidth: '40em',\n        overflow: 'hidden',\n    };\n\n    return readOnly ? <span title={labels} style={generateCellStyle(readOnlyStyle, labels, labelBackgrounds)}\n              className=\"label\">\n        {caption}\n    </span>\n        : <div key={globalLabels && getNodeLabel(globalLabels, database, label).color}>\n        <span title={\"Edit \" + label} onClick={() => setOpen(!open)} key={caption} style={generateCellStyle(style, labels, labelBackgrounds)}\n              className=\"label\">\n        {caption}\n    </span>\n            <UpdateNodeLabel database={database} open={open} setOpen={setOpen} label={label}/>\n        </div>\n\n}\n\nexport default connect(state => ({\n    globalLabels: state.metadata.allLabels,\n    metadata: state.metadata,\n}))(NodeLabel)\n","import {connect} from \"react-redux\";\nimport React from \"react\";\n\n\nconst getNested = (obj, ...args) => {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n}\n\nexport const generateCellStyle = (style, labels, labelBackgrounds) => {\n    let [label] = labels;\n    style.background = getNested(labelBackgrounds, label, \"color\") || \"#efefef\"\n    return style;\n}\n\nconst NodeLabelWithSimilarity = ({labels, database, globalLabels, caption, similarity}) => {\n    const labelBackgrounds = globalLabels[database]\n    let readOnlyStyle = {\n        maxWidth: '40em',\n        overflow: 'hidden',\n    };\n\n    return <React.Fragment>\n        <span title={labels}\n              style={generateCellStyle(readOnlyStyle, labels, labelBackgrounds)}\n              className=\"label left\">\n        {caption}\n    </span>\n        <span\n            className=\"label right\"\n            style={{maxWidth: '40em', overflow: 'hidden', background: '#EFEFEF'}}>\n            {similarity}\n        </span>\n    </React.Fragment>\n\n\n}\n\nexport default connect(state => ({\n    globalLabels: state.metadata.allLabels,\n    metadata: state.metadata,\n}))(NodeLabelWithSimilarity)\n","import React from 'react'\nimport {hideProperty, resetLabelsProperties} from \"../ducks/settings\"\nimport {connect} from 'react-redux'\nimport NodeLabel from \"./NodeLabel\";\nimport NodeLabelWithSimilarity from \"./NodeLabelWithSimilarity\";\n\nexport const extractHiddenProperties = (labels, hiddenPropertiesMap) => {\n  const keys = Object.keys(hiddenPropertiesMap);\n  const hiddenProps = keys.reduce((hiddenProperties, label) => {\n    if (labels.includes(label)) {\n      hiddenPropertiesMap[label].forEach(propertyKey => hiddenProperties.add(propertyKey))\n    }\n    return hiddenProperties\n  }, new Set());\n\n  (hiddenPropertiesMap['_ALL_NEULER_'] || []).forEach(prop => hiddenProps.add(prop))\n\n  return Array.from(hiddenProps)\n}\n\nconst PropertiesView = ({labels, globalLabels, properties, database, similarity}) => {\n  const [firstLabel] = labels\n  if (firstLabel) {\n    const captionProps = globalLabels[database][firstLabel].propertyKeys\n    const caption = Object.keys(properties).filter(key => captionProps.includes(key)).map(key => properties[key].toString()).join(\", \");\n\n    if(similarity) {\n      return <NodeLabelWithSimilarity labels={labels} caption={caption} database={database} similarity={similarity} />\n    } else {\n      return <NodeLabel labels={labels} caption={caption} database={database} readOnly={true}/>\n    }\n  } else {\n    return null\n  }\n}\n\nconst mapStateToProps = state => ({\n  hiddenProperties: state.settings.hiddenProperties,\n  globalLabels: state.metadata.allLabels\n})\n\nconst mapDispatchToProps = dispatch => ({\n  hideProp: (labels, key) => dispatch(hideProperty(labels, key)),\n  resetLabelsProperties: labels => dispatch(resetLabelsProperties(labels))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PropertiesView)\n","import React from 'react'\nimport {Loader, Tab, Table} from \"semantic-ui-react\"\nimport PropertiesView from '../PropertiesView'\n\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <div>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node</Table.HeaderCell>\n          <Table.HeaderCell style={{textAlign: \"right\"}}>Score</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n      { task.result ?\n        task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.properties} labels={result.labels} database={task.database}/></Table.Cell>\n            <Table.Cell style={{textAlign: \"right\"}}>{result.score}</Table.Cell>\n          </Table.Row>\n        )\n          :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={3}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n      }\n      </Table.Body>\n    </Table>\n  </div>\n)\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport CentralityForm from \"./CentralityForm\"\n\nexport default ({ label, readOnly, onChange, labelOptions, relationshipType, relationshipTypeOptions, writeProperty, direction, persist, maxDepth, relationshipOrientationOptions, children }) => (\n  <Form size='mini' style={{ marginBottom: '1em' }}>\n    <CentralityForm label={label} readOnly={readOnly} onChange={onChange} direction={direction} relationshipType={relationshipType} writeProperty={writeProperty} persist={persist} labelOptions={labelOptions} relationshipOrientationOptions={relationshipOrientationOptions} relationshipTypeOptions={relationshipTypeOptions} >\n        {children}\n    </CentralityForm>\n  </Form>\n)\n","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nexport default ({readOnly, onChange, labelOptions, relationshipTypeOptions, relationshipOrientationOptions, label, relationshipType, writeProperty, direction, persist, maxDepth, strategy, probability, samplingSize, children}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        onChange,\n        readOnly\n    }\n\n    return <Form size='mini' style={{marginBottom: '1em'}}>\n        <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n        <Parameters samplingSize={samplingSize} onChange={onChange} readOnly={readOnly}/>\n        <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty} readOnly={readOnly}>\n            {children}\n        </StoreProperty>\n    </Form>\n}\n\nconst Parameters = ({samplingSize, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Sampling size</label>}\n                    control={Input} type='number' value={samplingSize}\n                    onChange={evt => onChange('samplingSize', evt.target.value)}\n                    min={1} step={1}/>\n    </OpenCloseSection>\n}\n\n","import React from 'react'\nimport {Loader, Table} from \"semantic-ui-react\"\nimport PropertiesView from '../../PropertiesView'\n\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({task}) => (\n    <div>\n        <Table color='green'>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Node</Table.HeaderCell>\n                    <Table.HeaderCell style={{textAlign: \"right\"}}>Authority Score</Table.HeaderCell>\n                    <Table.HeaderCell style={{textAlign: \"right\"}}>Hub Score</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {task.result ?\n                    task.result && task.result.rows.map((result, idx) =>\n                        <Table.Row key={idx}>\n                            <Table.Cell>\n                                <PropertiesView properties={result.properties} labels={result.labels}\n                                                database={task.database}/>\n                            </Table.Cell>\n                            <Table.Cell style={{textAlign: \"right\"}}>{result.authScore}</Table.Cell>\n                            <Table.Cell style={{textAlign: \"right\"}}>{result.hubScore}</Table.Cell>\n                        </Table.Row>\n                    )\n                    :\n                    <Table.Row key=\"loading-centrality-result\">\n                        <Table.Cell colSpan={3}>\n                            <LoaderExampleInlineCentered/>\n                        </Table.Cell>\n                    </Table.Row>\n                }\n            </Table.Body>\n        </Table>\n    </div>\n)\n","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../../Form/OpenCloseSection\";\n\nconst HITSForm = ({\n                      readOnly,\n                      label,\n                      relationshipType,\n                      labelOptions,\n                      relationshipTypeOptions,\n                      relationshipOrientationOptions,\n                      propertyKeyOptions,\n                      writeProperty,\n                      onChange,\n                      hitsIterations,\n                      weightProperty,\n                      defaultValue,\n                      direction,\n                      persist,\n                      relPropertyKeyOptions,\n                      children\n                  }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters hitsIterations={hitsIterations} onChange={onChange}\n                        readOnly={readOnly}/>\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty}\n                           readOnly={readOnly}> {children} </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst Parameters = ({hitsIterations, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={hitsIterations}\n                    onChange={(evt, data) => onChange('hitsIterations', data.value)} min={1} max={50} step={1}/>\n    </OpenCloseSection>\n}\n\nexport default HITSForm\n","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../../Form/OpenCloseSection\";\n\nconst EigenvectorForm = ({\n                          readOnly, label, relationshipType, labelOptions, relationshipTypeOptions, relationshipOrientationOptions, relPropertyKeyOptions,\n                          propertyKeyOptions, writeProperty, onChange, maxIterations, weightProperty, defaultValue, direction, persist, children\n                      }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <EigenvectorParameters maxIterations={maxIterations} onChange={onChange}\n                                readOnly={readOnly}/>\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty}\n                           readOnly={readOnly}> {children} </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst EigenvectorParameters = ({maxIterations, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={maxIterations}\n                    onChange={(evt, data) => onChange('maxIterations', data.value)} min={1} max={50} step={1}/>\n    </OpenCloseSection>\n}\n\nexport default EigenvectorForm","import PageRankForm from \"./PageRankForm\"\nimport { runAlgorithm, runHITSAlgorithm } from \"../../services/centralities\"\nimport {\n\tcentralityParams,\n\tgetFetchCypher,\n\tgetFetchHITSCypher,\n\tstreamQueryOutline\n} from \"../../services/queries\"\nimport BetweennesForm from \"./BetweennesForm\"\nimport DegreeForm from \"./DegreeForm\"\nimport React from \"react\"\nimport CentralityResult from \"./CentralityResult\"\nimport ClosenessCentralityForm from \"./ClosenessCentralityForm\"\nimport NewApproxBetweennessForm from \"./NewApproxBetweennessForm\"\nimport HITSResult from \"./HITS/Result\"\nimport HITSForm from \"./HITS/Form\"\nimport EigenvectorForm from \"./Eigenvector/Form\"\n\nconst commonParameters = {\n\tlabel: \"*\",\n\trelationshipType: \"*\",\n\tpersist: false,\n\tdirection: \"Natural\"\n}\n\nlet algorithms = {\n\tHITS: {\n\t\talgorithmName: \"gds.alpha.hits.stream\",\n\t\tForm: HITSForm,\n\t\tservice: runHITSAlgorithm,\n\t\tResultView: HITSResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"pregel_\",\n\t\t\t\thitsIterations: 20,\n\t\t\t\tdefaultValue: 1.0,\n\t\t\t\trelationshipWeightProperty: null\n\t\t\t}\n\t\t},\n\t\tparametersBuilder: centralityParams,\n\t\tstreamQuery: `CALL gds.alpha.hits.stream($generatedName, $config) YIELD nodeId, values\nWITH gds.util.asNode(nodeId) AS node, values.auth AS authScore, values.hub AS hubScore\nRETURN node, authScore, hubScore\nORDER BY authScore DESC\nLIMIT toInteger($limit)`,\n\t\tstoreQuery: `CALL gds.alpha.hits.write($generatedName, $config)`,\n\t\tgetFetchQuery: getFetchHITSCypher,\n\t\tdescription: `link analysis algorithm that rates nodes based on two scores, a hub score and an authority score.`\n\t},\n\t\"Page Rank\": {\n\t\talgorithmName: \"gds.pageRank\",\n\t\tForm: PageRankForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"pagerank\",\n\t\t\t\tdampingFactor: 0.85,\n\t\t\t\tmaxIterations: 20,\n\t\t\t\tdefaultValue: 1.0,\n\t\t\t\trelationshipWeightProperty: null\n\t\t\t}\n\t\t},\n\t\tparametersBuilder: centralityParams,\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.pageRank.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.pageRank.write($generatedName, $config)`,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: (\n\t\t\t<div>\n\t\t\t\tMeasures the <strong>transitive</strong> influence or connectivity of\n\t\t\t\tnodes\n\t\t\t</div>\n\t\t)\n\t},\n\tHarmonic: {\n\t\talgorithmName: \"gds.alpha.harmonic\",\n\t\tForm: ClosenessCentralityForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: { ...commonParameters, ...{ writeProperty: \"harmonic\" } },\n\t\tparametersBuilder: centralityParams,\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.alpha.harmonic.stream($config) YIELD nodeId, centrality AS score`\n\t\t),\n\t\tstoreQuery: `CALL gds.alpha.harmonic.stream($config)`,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: `a variant of closeness centrality, that was invented to solve the problem the original\n-                  formula had when dealing with unconnected graphs.`\n\t},\n\tDegree: {\n\t\talgorithmName: \"gds.degree\",\n\t\tForm: DegreeForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{\n\t\t\t\tdirection: \"Reverse\",\n\t\t\t\twriteProperty: \"degree\",\n\t\t\t\tdefaultValue: 1.0,\n\t\t\t\trelationshipWeightProperty: null\n\t\t\t}\n\t\t},\n\t\tparametersBuilder: centralityParams,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.degree.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.degree.write($generatedName, $config)`,\n\t\tdescription: `detects the number of direct connections a node has`\n\t},\n\tEigenvector: {\n\t\talgorithmName: \"gds.eigenvector\",\n\t\tForm: EigenvectorForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{ writeProperty: \"eigenvector\", maxIterations: 20, defaultValue: 1.0 }\n\t\t},\n\t\tparametersBuilder: centralityParams,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: (\n\t\t\t<div>\n\t\t\t\tMeasures the <strong>transitive</strong> influence or connectivity of\n\t\t\t\tnodes\n\t\t\t</div>\n\t\t),\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.eigenvector.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.eigenvector.write($generatedName, $config)`\n\t},\n\t\"Article Rank\": {\n\t\talgorithmName: \"gds.articleRank\",\n\t\tForm: PageRankForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{\n\t\t\t\twriteProperty: \"articlerank\",\n\t\t\t\tdampingFactor: 0.85,\n\t\t\t\tmaxIterations: 20,\n\t\t\t\tdefaultValue: 1.0,\n\t\t\t\trelationshipWeightProperty: null\n\t\t\t}\n\t\t},\n\t\tparametersBuilder: centralityParams,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: `a variant of the PageRank algorithm`,\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.articleRank.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.articleRank.write($generatedName, $config)`\n\t},\n\tBetweenness: {\n\t\talgorithmName: \"gds.betweenness\",\n\t\tForm: BetweennesForm,\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparameters: { ...commonParameters, ...{ writeProperty: \"betweenness\" } },\n\t\tparametersBuilder: centralityParams,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: `a way of detecting the amount of influence a node has over the flow of information in a graph`,\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.betweenness.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.betweenness.write($generatedName, $config)`\n\t},\n\t\"Approx Betweenness\": {\n\t\talgorithmName: \"gds.betweenness\",\n\t\tservice: runAlgorithm,\n\t\tResultView: CentralityResult,\n\t\tparametersBuilder: centralityParams,\n\t\tgetFetchQuery: getFetchCypher,\n\t\tdescription: `calculates shortest paths between a subset of nodes, unlike Betweenness which considers all pairs of nodes`,\n\t\tForm: NewApproxBetweennessForm,\n\t\tparameters: {\n\t\t\t...commonParameters,\n\t\t\t...{ samplingSize: 100, writeProperty: \"approxBetweenness\" }\n\t\t},\n\t\tstreamQuery: streamQueryOutline(\n\t\t\t`CALL gds.betweenness.stream($generatedName, $config) YIELD nodeId, score`\n\t\t),\n\t\tstoreQuery: `CALL gds.betweenness.write($generatedName, $config)`\n\t}\n}\n\nconst baseCloseness = {\n\talgorithmName: \"gds.beta.closeness\",\n\tForm: ClosenessCentralityForm,\n\tservice: runAlgorithm,\n\tResultView: CentralityResult,\n\tparameters: { ...commonParameters, ...{ writeProperty: \"closeness\" } },\n\tparametersBuilder: centralityParams,\n\tstreamQuery: streamQueryOutline(\n\t\t`CALL gds.beta.closeness.stream($generatedName, $config) YIELD nodeId, score`\n\t),\n\tstoreQuery: `CALL gds.beta.closeness.write($generatedName, $config)`,\n\tgetFetchQuery: getFetchCypher,\n\tdescription: `detect nodes that are able to spread information very efficiently through a graph`\n}\n\nexport default {\n\talgorithmList: gdsVersion => {\n\t\tconst mainVersion = parseInt(gdsVersion.split(\".\")[0])\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\t\tconst algorithms = [\n\t\t\t\"Degree\",\n\t\t\t\"Eigenvector\",\n\t\t\t\"Page Rank\",\n\t\t\t\"Article Rank\",\n\t\t\t\"Betweenness\",\n\t\t\t\"Approx Betweenness\",\n\t\t\t\"Closeness\",\n\t\t\t\"HITS\"\n\t\t]\n\t\treturn algorithms\n\t\t//return version >= 5 ? algorithms.concat([\"HITS\"]) : algorithms;\n\t},\n\talgorithmDefinitions: (algorithm, gdsVersion) => {\n\t\tconst mainVersion = parseInt(gdsVersion.split(\".\")[0])\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\t\tswitch (algorithm) {\n\t\t\tcase \"Closeness\": {\n\t\t\t\tif (mainVersion == 1) {\n\t\t\t\t\tbaseCloseness.streamQuery = streamQueryOutline(\n\t\t\t\t\t\t`CALL gds.alpha.closeness.stream($generatedName, $config) YIELD nodeId, score`\n\t\t\t\t\t)\n\t\t\t\t\tbaseCloseness.storeQuery = `CALL gds.alpha.closeness.write($generatedName, $config)`\n\t\t\t\t\tbaseCloseness.algorithmName = \"gds.alpha.closeness\"\n\t\t\t\t}\n\t\t\t\treturn baseCloseness\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\treturn algorithms[algorithm]\n\t\t}\n\t}\n}\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport CentralityForm from \"./CentralityForm\"\n\nexport default ({ readOnly, label, onChange, labelOptions, relationshipType, relationshipTypeOptions, writeProperty, direction, persist, maxDepth, relationshipOrientationOptions, children }) => (\n  <Form size='mini' style={{ marginBottom: '1em' }}>\n    <CentralityForm label={label} readOnly={readOnly} onChange={onChange} direction={direction} relationshipType={relationshipType} persist={persist} writeProperty={writeProperty} labelOptions={labelOptions} relationshipOrientationOptions={relationshipOrientationOptions} relationshipTypeOptions={relationshipTypeOptions} >\n        {children}\n    </CentralityForm>\n\n  </Form>\n)\n","import {runStreamQuery, runStoreQuery} from \"./stores/neoStore\"\nimport {parseProperties} from \"./resultMapper\"\n\n\nexport const runAlgorithm = ({\n                                 streamCypher,\n                                 storeCypher,\n                                 fetchCypher,\n                                 parameters,\n                                 persisted,\n                                 parseResultStreamFn = parseResultStream\n                             }) => {\n    if (!persisted) {\n        return runStreamQuery(streamCypher, parameters, parseResultStreamFn)\n    } else {\n        return runStoreQuery(storeCypher, fetchCypher, parameters, parseResultStreamFn)\n    }\n}\n\n\nconst handleException = error => {\n    console.error(error)\n    throw new Error(error)\n}\n\nexport const parseResultStream = (result) => {\n    if (result.records) {\n        const rows = result.records.map(record => {\n            const {properties, labels, identity} = record.get('node')\n            const embedding = record.has(\"embedding\") ? record.get(\"embedding\") : null\n            return {\n                properties: parseProperties(properties),\n                identity: identity.toNumber(),\n                labels,\n                embedding: embedding ? embedding.map(value => parseFloat(value)) : null\n            }\n        });\n        return {\n            rows: rows,\n            ids: rows.map(row => row.identity),\n            labels: [...new Set(rows.flatMap(result => result.labels))]\n        }\n    } else {\n        console.error(result.error)\n        throw new Error(result.error)\n    }\n}\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader size='big' active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{ padding: '1em 0' }}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node</Table.HeaderCell>\n          <Table.HeaderCell>Embedding</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n         task.result && task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.properties} labels={result.labels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.embedding ? result.embedding.join(\", \") : null}</Table.Cell>\n          </Table.Row>\n        ) :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={4}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../../../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../../../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../../../Form/OpenCloseSection\";\n\nconst Node2VecForm = ({\n                          readOnly, label, relationshipType, labelOptions, relationshipTypeOptions, relationshipOrientationOptions,\n                          propertyKeyOptions, writeProperty, onChange, weightProperty, defaultValue, direction, persist, children,\n                          iterations, embeddingDimension, walkLength, inOutFactor, returnFactor, windowSize, relPropertyKeyOptions\n                      }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters iterations={iterations}  onChange={onChange} embeddingDimension={embeddingDimension}\n                                readOnly={readOnly} walkLength={walkLength} inOutFactor={inOutFactor}\n                        returnFactor={returnFactor} windowSize={windowSize}\n            />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty}\n                           readOnly={readOnly}> {children} </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst Parameters = ({iterations, embeddingDimension, walkLength, inOutFactor, returnFactor, onChange, readOnly, windowSize}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Iterations</label>}\n                    control={Input} type='number' value={iterations}\n                    onChange={(evt, data) => onChange('iterations', data.value)} min={1} max={50} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Embedding Dimension</label>}\n                    control={Input} type='number' value={embeddingDimension}\n                    onChange={(evt, data) => onChange('embeddingDimension', data.value)} min={1} max={500} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Walk Length</label>}\n                    control={Input} type='number' value={walkLength}\n                    onChange={(evt, data) => onChange('walkLength', data.value)} min={1} max={500} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>In Out Factor</label>}\n                    control={Input} type='number' value={inOutFactor} step={0.01}\n                    onChange={(evt, data) => onChange('inOutFactor', data.value)}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Return Factor</label>}\n                    control={Input} type='number' value={returnFactor} step={0.01}\n                    onChange={(evt, data) => onChange('returnFactor', data.value)}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Window Size</label>}\n                    control={Input} type='number' value={windowSize} step={1}\n                    onChange={(evt, data) => onChange('windowSize', data.value)}/>\n\n    </OpenCloseSection>\n}\n\nexport default Node2VecForm\n","import React from 'react'\nimport {Form, Input} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../../../Form/ProjectedGraph\";\nimport {StoreProperty} from \"../../../Form/StoreProperty\";\nimport {OpenCloseSection} from \"../../../Form/OpenCloseSection\";\n\nconst FastRPForm = ({\n                          readOnly, label, relationshipType, labelOptions, relationshipTypeOptions, relationshipOrientationOptions,\n                          propertyKeyOptions, writeProperty, onChange, weightProperty, defaultValue, direction, persist, children,\n                          embeddingDimension, normalizationStrength, relPropertyKeyOptions\n                      }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters normalizationStrength={normalizationStrength}  onChange={onChange}\n                        embeddingDimension={embeddingDimension}\n                                readOnly={readOnly}\n            />\n            <StoreProperty persist={persist} onChange={onChange} writeProperty={writeProperty}\n                           readOnly={readOnly}> {children} </StoreProperty>\n        </Form>\n    )\n}\n\n\nconst Parameters = ({ embeddingDimension, normalizationStrength, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Embedding Dimension</label>}\n                    control={Input} type='number' value={embeddingDimension}\n                    onChange={(evt, data) => onChange('embeddingDimension', data.value)} min={1} max={500} step={1}/>\n\n        <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Normalization Strength</label>}\n                    control={Input} type='number' value={normalizationStrength} step={0.01}\n                    onChange={(evt, data) => onChange('normalizationStrength', data.value)}/>\n\n    </OpenCloseSection>\n}\n\nexport default FastRPForm\n","import {runAlgorithm} from \"../../services/embedding\"\nimport {embeddingParams} from \"../../services/queries\";\nimport Result from \"./Result\";\nimport Node2VecForm_1Point6 from \"./Node2Vec/1.6/Form\";\nimport FastRPForm_1Point4 from \"./FastRP/1.4/Form\";\n\nconst commonParameters = {\n    label: \"*\",\n    relationshipType: \"*\",\n    persist: false,\n    direction: 'Undirected'\n}\n\nconst commonRelWeightParameters = {\n    ...commonParameters, ...{\n        defaultValue: 1.0,\n        relationshipWeightProperty: null,\n    }\n}\n\nconst algorithms = {\n    \"Node2Vec\": {\n        algorithmName: \"gds.beta.node2vec\",\n        Form: Node2VecForm_1Point6,\n        parametersBuilder: embeddingParams,\n        service: runAlgorithm,\n        ResultView: Result,\n        parameters: {\n            ...commonRelWeightParameters, ...{\n                writeProperty: \"node2Vec\",\n                embeddingDimension: 10,\n                iterations: 1,\n                walkLength: 80,\n                inOutFactor: 1.0,\n                returnFactor: 1.0,\n                windowSize: 10\n            }\n        },\n        streamQuery: `CALL gds.beta.node2vec.stream($generatedName, $config)\nYIELD nodeId, embedding\nRETURN gds.util.asNode(nodeId) AS node, embedding\nLIMIT toInteger($limit)`,\n        storeQuery: `CALL gds.beta.node2vec.write($generatedName, $config)`,\n        getFetchQuery: (label, config) => {\n            const escapedLabel = config.nodeProjection && config.nodeProjection !== \"*\" ? \":`\" + config.nodeProjection + \"`\" : \"\"\n            return `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nWITH node, node.\\`${config.writeProperty}\\` AS embedding\nWITH node, CASE WHEN apoc.meta.type(embedding) = \"float[]\" THEN embedding ELSE null END as embedding\nRETURN node, embedding\nLIMIT toInteger($limit)`\n        },\n        description: `computes a vector representation of a node based on random walks in the graph`,\n    },\n    \"FastRP\": {\n        algorithmName: \"gds.fastRP\",\n        Form: FastRPForm_1Point4,\n        parametersBuilder: embeddingParams,\n        service: runAlgorithm,\n        ResultView: Result,\n        parameters: {\n            ...commonRelWeightParameters, ...{\n                writeProperty: \"fastrp\",\n                embeddingDimension: 10,\n                normalizationStrength: 0\n            }\n        },\n        streamQuery: `CALL gds.fastRP.stream($generatedName, $config)\nYIELD nodeId, embedding\nRETURN gds.util.asNode(nodeId) AS node, embedding\nLIMIT toInteger($limit)`,\n        storeQuery: `CALL gds.fastRP.write($generatedName, $config)`,\n        getFetchQuery: (label, config) => {\n            const escapedLabel = config.nodeProjection && config.nodeProjection !== \"*\" ? \":`\" + config.nodeProjection + \"`\" : \"\"\n            return `MATCH (node${escapedLabel})\nWHERE exists(node.\\`${config.writeProperty}\\`)\nWITH node, node.\\`${config.writeProperty}\\` AS embedding\nWITH node, CASE WHEN apoc.meta.type(embedding) = \"float[]\" THEN embedding ELSE null END as embedding\nRETURN node, embedding\nLIMIT toInteger($limit)`\n        },\n        description: `an inductive algorithm for computing node embeddings`,\n    },\n};\n\nexport default {\n    algorithmList: (gdsVersion) => {\n        const version = parseInt(gdsVersion.split(\".\")[1])\n        const algorithms = [\"Node2Vec\", \"FastRP\"]\n        return algorithms\n    },\n    algorithmDefinitions: (algorithm, gdsVersion) => {\n        const version = parseInt(gdsVersion.split(\".\")[1])\n        return algorithms[algorithm]\n\n    },\n}\n","import {runStreamQuery} from \"./stores/neoStore\"\nimport {parseProperties} from \"./resultMapper\"\n\nexport const runStreamingAlgorithm = ({streamCypher, parameters, parseResultStreamFn=parseResultStream}) => {\n    return runStreamQuery(streamCypher, parameters, parseResultStreamFn)\n}\n\nexport const runAllPairsShortestPathAlgorithm = ({streamCypher, parameters}) => {\n    return runStreamingAlgorithm({streamCypher, parameters, parseResultStreamFn: result => {\n        if (result.records) {\n            let rows = result.records.map(record => {\n                const source = record.get('source')\n                const target = record.get('target')\n\n                return {\n                    sourceProperties: parseProperties(source.properties),\n                    sourceLabels: source.labels,\n                    sourceIdentity: source.identity.toNumber(),\n\n                    targetProperties: parseProperties(target.properties),\n                    targetLabels: target.labels,\n                    targetIdentity: target.identity.toNumber(),\n\n                    cost: record.get('cost')\n                }\n            });\n            return {\n                rows: rows,\n                ids: [...new Set(rows.flatMap(result => [result.sourceIdentity, result.targetIdentity]))],\n                labels: [...new Set(rows.flatMap(result => result.sourceLabels.concat(result.targetLabels)))]\n            }\n        } else {\n            console.error(result.error)\n            throw new Error(result.error)\n        }\n    }})\n}\n\n\n\nexport const parseResultStream = (result) => {\n    if (result.records) {\n        let rows = result.records.map(record => {\n            const { properties, labels, identity } = record.get('node')\n            return {\n                properties: parseProperties(properties),\n                identity: identity.toNumber(),\n                labels: labels,\n                cost: record.get('cost')\n            }\n        });\n        return {\n            rows: rows,\n            ids: rows.map(row => row.identity),\n            labels: [...new Set(rows.flatMap(result => result.labels))]\n        }\n    } else {\n        console.error(result.error)\n        throw new Error(result.error)\n    }\n}\n\nconst handleException = error => {\n    console.error(error)\n    throw new Error(error)\n}\n","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Node</Table.HeaderCell>\n          <Table.HeaderCell>Cost</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n          task.result && task.result.rows.length > 0 ? task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell> <PropertiesView properties={result.properties} labels={result.labels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.cost}</Table.Cell>\n          </Table.Row>) :\n              (<Table.Row key={\"no-results\"}>\n            <Table.Cell colspan={2}>No results found</Table.Cell>\n          </Table.Row>)\n         :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={2}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n)\n","import React from 'react'\nimport {Form, Input, Popup} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {ResultsFilteringWrapper} from \"../Form/ResultsFiltering\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({children, readOnly, onChange, labelOptions, label, relationshipType, relationshipTypeOptions, propertyKeyOptions, relPropertyKeyOptions,\n                      relationshipOrientationOptions, startNode, endNode, weightProperty, defaultValue, direction, persist}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters startNode={startNode} endNode={endNode} onChange={onChange} readOnly={readOnly} />\n            <ResultsFilteringWrapper>{children}</ResultsFilteringWrapper>\n        </Form>\n    )\n\n}\n\nconst Parameters = ({startNode, endNode, onChange, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Group inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Start Node</label>\n            <Form.Field >\n                <Popup size=\"tiny\"\n                       trigger={<Input basic=\"true\" value={startNode} placeholder='Start Node'\n                                       onChange={evt => onChange('startNode', evt.target.value)}/>}\n                       content='Populate this field with the value of any property on any node'/>\n\n            </Form.Field>\n        </Form.Group>\n\n        <Form.Group inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>End Node</label>\n            <Form.Field inline>\n                <Popup size=\"tiny\" trigger={<Input basic=\"true\" value={endNode} placeholder='End Node'\n                                                   onChange={evt => onChange('endNode', evt.target.value)}/>}\n                       content='Populate this field with the value of any property on any node'/>\n            </Form.Field>\n        </Form.Group>\n    </OpenCloseSection>\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Dropdown, Form, Input, Popup} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {ResultsFilteringWrapper} from \"../Form/ResultsFiltering\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({\n                      children, readOnly, onChange, relationshipType, labelOptions, label, propertyKeyOptions, relationshipTypeOptions, relPropertyKeyOptions,\n                      relationshipOrientationOptions, startNode, endNode, weightProperty, defaultValue, latitudeProperty, longitudeProperty, direction, persist\n                  }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <Parameters onChange={onChange}\n                        startNode={startNode} endNode={endNode}\n                        latitudeProperty={latitudeProperty} longitudeProperty={longitudeProperty}\n                        readOnly={readOnly} propertyKeyOptions={propertyKeyOptions}\n            />\n            <ResultsFilteringWrapper>{children}</ResultsFilteringWrapper>\n        </Form>\n    )\n}\n\nconst Parameters = ({onChange, startNode, endNode, latitudeProperty, longitudeProperty, readOnly, propertyKeyOptions}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Group inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Start Node</label>\n            <Form.Field inline>\n                <Popup size=\"tiny\"\n                       trigger={<Input basic=\"true\" value={startNode} placeholder='Start Node'\n                                       onChange={evt => onChange('startNode', evt.target.value)}/>}\n                       content='Populate this field with the value of any property on any node'/>\n            </Form.Field>\n        </Form.Group>\n        <Form.Group inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>End Node</label>\n            <Form.Field inline>\n                <Popup size=\"tiny\" trigger={<Input basic=\"true\" value={endNode} placeholder='End Node'\n                                                   onChange={evt => onChange('endNode', evt.target.value)}/>}\n                       content='Populate this field with the value of any property on any node'/>\n            </Form.Field>\n        </Form.Group>\n\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Latitude Property</label>\n            <Dropdown disabled={readOnly} placeholder='Weight Property' value={latitudeProperty}\n                      search selection\n                      options={propertyKeyOptions}\n                      onChange={(evt, data) => onChange(\"latitudeProperty\", data.value)}/>\n        </Form.Field>\n\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Longitude Property</label>\n            <Dropdown disabled={readOnly} placeholder='Weight Property' value={longitudeProperty}\n                      search selection\n                      options={propertyKeyOptions}\n                      onChange={(evt, data) => onChange(\"longitudeProperty\", data.value)}/>\n        </Form.Field>\n\n\n    </OpenCloseSection>\n}\n\nexport default AlgoForm\n","import React from 'react'\nimport {Form, Input, Popup} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {ResultsFilteringWrapper} from \"../Form/ResultsFiltering\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({\n                      children, onChange, readOnly, relationshipType, label, relationshipOrientationOptions,\n                      propertyKeyOptions, labelOptions, relationshipTypeOptions, startNode, weightProperty, \n                      defaultValue, direction, persist, relPropertyKeyOptions\n                  }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n\n            <Parameters startNode={startNode} onChange={onChange} readOnly={readOnly}/>\n\n            <ResultsFilteringWrapper>{children}</ResultsFilteringWrapper>\n        </Form>\n    )\n}\n\nconst Parameters = ({onChange, startNode, readOnly}) => {\n    return <OpenCloseSection title=\"Algorithm Parameters\">\n        <Form.Group inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Start Node</label>\n            <Form.Field inline>\n                <Popup size=\"tiny\"\n                       trigger={<Input basic=\"true\" value={startNode} placeholder='Start Node'\n                                       onChange={evt => onChange('startNode', evt.target.value)}/>}\n                       content='Populate this field with the value of any property on any node'/>\n            </Form.Field>\n        </Form.Group>\n    </OpenCloseSection>\n}\n\nexport default AlgoForm","import React from 'react'\nimport { Tab, Table } from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport { Loader } from 'semantic-ui-react'\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({ task }) => (\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Source Labels</Table.HeaderCell>\n          <Table.HeaderCell>Source Properties</Table.HeaderCell>\n          <Table.HeaderCell>Target Labels</Table.HeaderCell>\n          <Table.HeaderCell>Target Properties</Table.HeaderCell>\n          <Table.HeaderCell>Cost</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n          task.result && task.result.rows.length > 0 ? task.result.rows.map((result, idx) =>\n          <Table.Row key={idx}>\n            <Table.Cell>{result.sourceLabels.join(', ')}</Table.Cell>\n            <Table.Cell> <PropertiesView properties={result.sourceProperties} labels={result.sourceLabels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.targetLabels.join(', ')}</Table.Cell>\n            <Table.Cell> <PropertiesView properties={result.targetProperties} labels={result.targetLabels} database={task.database}/></Table.Cell>\n            <Table.Cell>{result.cost}</Table.Cell>\n          </Table.Row>) :\n              (<Table.Row key={\"no-results\"}>\n            <Table.Cell colspan={3}>No results found</Table.Cell>\n          </Table.Row>)\n         :\n        <Table.Row key=\"loading-centrality-result\">\n          <Table.Cell colSpan={5}>\n            <LoaderExampleInlineCentered />\n          </Table.Cell>\n        </Table.Row>\n}\n      </Table.Body>\n    </Table>\n)\n","import {runAllPairsShortestPathAlgorithm, runStreamingAlgorithm} from \"../../services/pathFinding\"\nimport {onePoint5PathFindingParams, pre1Point5PathFindingParams} from \"../../services/queries\";\nimport PathFindingResult from \"./PathFindingResult\";\nimport ShortestPathForm from \"./ShortestPathForm\";\nimport AStarForm from \"./AStarForm\";\nimport SingleSourceShortestPathForm from \"./SingleSourceShortestPathForm\";\nimport AllPairsShortestPathForm from \"./AllPairsShortestPathForm\";\nimport AllPairsShortestPathResult from \"./AllPairsShortestPathResult\";\n\nconst findStartEndNodes = () => `CALL db.propertyKeys() YIELD propertyKey MATCH (start) WHERE start[propertyKey] contains $startNode\nWITH start\nLIMIT 1\nCALL db.propertyKeys() YIELD propertyKey MATCH (end) WHERE end[propertyKey] contains $endNode\nWITH start, end\nLIMIT 1\n`\n\nconst findStartNode = () => `CALL db.propertyKeys() YIELD propertyKey MATCH (start) WHERE start[propertyKey] contains $startNode\nWITH start\nLIMIT 1\n`\n\nconst commonParameters = {\n    label: \"*\",\n    relationshipType: \"*\",\n    persist: false,\n    direction: 'Undirected',\n    defaultValue: 1.0,\n    relationshipWeightProperty: \"weight\",\n\n}\n\nconst algorithms = {\n    \"All Pairs Shortest Path\": {\n        Form: AllPairsShortestPathForm,\n        parametersBuilder: pre1Point5PathFindingParams,\n        service: runAllPairsShortestPathAlgorithm,\n        ResultView: AllPairsShortestPathResult,\n        parameters: {...commonParameters, ...{nodeQuery: null, relationshipQuery: null,}},\n        streamQuery: `CALL gds.alpha.allShortestPaths.stream($generatedName, $config)\nYIELD sourceNodeId, targetNodeId, distance AS cost\nRETURN gds.util.asNode(sourceNodeId) AS source, gds.util.asNode(targetNodeId) AS target, cost\nLIMIT toInteger($limit)`,\n        storeQuery: ``,\n        getFetchQuery: () => \"\",\n        description: `The All Pairs Shortest Path (APSP) calculates the shortest (weighted) path between all pairs of nodes.`\n    },\n    \"Shortest Path\": {\n        Form: ShortestPathForm,\n        parametersBuilder: pre1Point5PathFindingParams,\n        service: runStreamingAlgorithm,\n        ResultView: PathFindingResult,\n        parameters: {...commonParameters, ...{nodeQuery: null, relationshipQuery: null,}},\n        streamQuery: findStartEndNodes() + `WITH $config AS config, start, end\nWITH config { .*, sourceNode: id(start), targetNode: id(end)} as config\nCALL gds.shortestPath.dijkstra.stream($generatedName, config)\nYIELD nodeIds, costs\nUNWIND range(0, size(nodeIds)-1) AS index\nRETURN gds.util.asNode(nodeIds[index]) AS node, costs[index] AS cost`,\n        namedGraphStreamQuery: findStartEndNodes() + `CALL gds.shortestPath.dijkstra.stream($generatedName, {sourceNode: start, targetNode: end})\nYIELD nodeIds, costs\nUNWIND range(0, size(nodeIds)-1) AS index\nRETURN gds.util.asNode(nodeIds[index]) AS node, costs[index] AS cost`,\n        storeQuery: ``,\n        getFetchQuery: () => \"\",\n        description: `The Shortest Path algorithm calculates the shortest (weighted) path between a pair of nodes. `\n    },\n    \"A*\": {\n        Form: AStarForm,\n        parametersBuilder: onePoint5PathFindingParams,\n        service: runStreamingAlgorithm,\n        ResultView: PathFindingResult,\n        parameters: {\n            ...commonParameters, ...{\n                nodeQuery: null,\n                relationshipQuery: null,\n                writeProperty: \"astar\",\n                latitudeProperty: \"latitude\",\n                longitudeProperty: \"longitude\",\n            }\n        },\n        streamQuery: findStartEndNodes() + `WITH $config AS config, start, end\nWITH config { .*, sourceNode: id(start), targetNode: id(end)} as config\nCALL gds.shortestPath.astar.stream($generatedName, config)\nYIELD targetNode, totalCost AS cost\nRETURN gds.util.asNode(targetNode) AS node, cost`,\n        namedGraphStreamQuery: findStartEndNodes() + `CALL gds.shortestPath.astar.stream($generatedName, {\n  sourceNode: id(start), \n  targetNode: id(end),\n  latitudeProperty: $config.latitudeProperty, \n  longitudeProperty: $config.longitudeProperty,\n  relationshipWeightProperty: $config.relationshipWeightProperty\n})\nYIELD targetNode, totalCost AS cost\nRETURN gds.util.asNode(targetNode) AS node, cost`,\n        storeQuery: ``,\n        getFetchQuery: () => \"\",\n        description: `The A* algorithm improves on the classic Dijkstra algorithm. by using a heuristic that guides the paths taken.`\n    },\n    \"Single Source Shortest Path\": {\n        Form: SingleSourceShortestPathForm,\n        parametersBuilder: onePoint5PathFindingParams,\n        service: runStreamingAlgorithm,\n        ResultView: PathFindingResult,\n        parameters: { ...commonParameters, ...{nodeQuery: null, relationshipQuery: null,}},\n        streamQuery: findStartNode() + `WITH $config AS config, start\nWITH config { .*, sourceNode: id(start)} as config\nCALL gds.allShortestPaths.dijkstra.stream($generatedName, config)\nYIELD targetNode AS nodeId, totalCost AS cost\nRETURN gds.util.asNode(nodeId) AS node, cost\nLIMIT toInteger($limit)`,\n        namedGraphStreamQuery: findStartNode() + `CALL gds.allShortestPaths.dijkstra.stream($generatedName, {sourceNode: id(start)})\nYIELD targetNode AS nodeId, totalCost AS cost\nRETURN gds.util.asNode(nodeId) AS node, cost`,\n        storeQuery: ``,\n        getFetchQuery: () => \"\",\n        description: `The Single Source Shortest Path (SSSP) algorithm calculates the shortest (weighted) path from a node to all other nodes in the graph..`\n    },\n}\n\nexport default {\n    algorithmList: () => {\n        return [\"Shortest Path\", \"A*\", \"Single Source Shortest Path\", \"All Pairs Shortest Path\",]\n    },\n    algorithmDefinitions: (algorithm, gdsVersion)  => {\n        const version = parseInt(gdsVersion.split(\".\")[1])\n        return algorithms[algorithm]\n    }\n}\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithWeights} from \"../Form/ProjectedGraph\";\nimport {ResultsFilteringWrapper} from \"../Form/ResultsFiltering\";\n\nconst AlgoForm = ({\n                      onChange, readOnly, labelOptions, relationshipType, label, propertyKeyOptions, relPropertyKeyOptions,\n                      relationshipOrientationOptions, relationshipTypeOptions, weightProperty, defaultValue, direction, children\n                  }) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        propertyKeyOptions,\n        weightProperty,\n        defaultValue,\n        onChange,\n        readOnly,\n        relPropertyKeyOptions\n    }\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithWeights {...projectedGraphProps} />\n            <ResultsFilteringWrapper>{children}</ResultsFilteringWrapper>\n        </Form>\n    )\n}\n\nexport default AlgoForm","import { runCypher, runStreamQuery, runStoreQuery } from \"./stores/neoStore\"\nimport { parseProperties } from \"./resultMapper\"\n\nexport const runAlgorithm = ({\n\tstreamCypher,\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tpersisted,\n\tparseResultStreamFn = parseResultStream\n}) => {\n\tif (!persisted) {\n\t\treturn runStreamQuery(streamCypher, parameters, parseResultStreamFn)\n\t} else {\n\t\treturn runStoreQuery(\n\t\t\tstoreCypher,\n\t\t\tfetchCypher,\n\t\t\tparameters,\n\t\t\tparseResultStreamFn\n\t\t)\n\t}\n}\n\nexport const runkNNAlgorithm = ({\n\tstreamCypher,\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tpersisted\n}) => {\n\treturn runAlgorithm({\n\t\tstreamCypher,\n\t\tstoreCypher,\n\t\tfetchCypher,\n\t\tparameters,\n\t\tpersisted,\n\t\tparseResultStreamFn: result => {\n\t\t\tif (result.records) {\n\t\t\t\tlet rows = result.records.map(record => {\n\t\t\t\t\tconst from = record.get(\"from\")\n\t\t\t\t\tconst to = record.get(\"to\")\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfromProperties: parseProperties(from.properties),\n\t\t\t\t\t\tfromLabels: from.labels,\n\t\t\t\t\t\tfromIdentity: from.identity.toNumber(),\n\t\t\t\t\t\tto: to.map(m => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tproperties: parseProperties(m.node.properties),\n\t\t\t\t\t\t\t\tlabels: m.node.labels,\n\t\t\t\t\t\t\t\tidentity: m.node.identity.toNumber(),\n\t\t\t\t\t\t\t\tsimilarity: parseFloat(m.similarity.toFixed(2))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn {\n\t\t\t\t\trows: rows,\n\t\t\t\t\tids: [\n\t\t\t\t\t\t...new Set(\n\t\t\t\t\t\t\trows.flatMap(result =>\n\t\t\t\t\t\t\t\t[result.fromIdentity].concat(\n\t\t\t\t\t\t\t\t\tresult.to.map(node => node.identity)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t],\n\t\t\t\t\tlabels: [\n\t\t\t\t\t\t...new Set(\n\t\t\t\t\t\t\trows.flatMap(result =>\n\t\t\t\t\t\t\t\tresult.fromLabels.concat(result.to.flatMap(node => node.labels))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error(result.error)\n\t\t\t\tthrow new Error(result.error)\n\t\t\t}\n\t\t}\n\t})\n}\n\nconst handleException = error => {\n\tconsole.error(error)\n\tthrow new Error(error)\n}\n\nconst runStreamingAlgorithmOld = (\n\tstreamCypher,\n\tparameters,\n\tparseResultStreamFn = parseResultStream\n) => {\n\treturn runCypher(streamCypher, parameters)\n\t\t.then(result => parseResultStreamFn(result))\n\t\t.catch(handleException)\n}\n\nexport const runAlgorithmOld = ({\n\tstreamCypher,\n\tstoreCypher,\n\tfetchCypher,\n\tparameters,\n\tpersisted,\n\tparseResultStreamFn = parseResultStream\n}) => {\n\tif (!persisted) {\n\t\treturn runStreamingAlgorithmOld(\n\t\t\tstreamCypher(),\n\t\t\tparameters,\n\t\t\tparseResultStreamFn\n\t\t)\n\t} else {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\trunCypher(storeCypher(), parameters)\n\t\t\t\t.then(() => {\n\t\t\t\t\trunCypher(fetchCypher, parameters)\n\t\t\t\t\t\t.then(result => resolve(parseResultStreamFn(result)))\n\t\t\t\t\t\t.catch(reject)\n\t\t\t\t})\n\t\t\t\t.catch(reject)\n\t\t})\n\t}\n}\n\nexport const parseResultStream = result => {\n\tif (result.records) {\n\t\tlet rows = result.records.map(record => {\n\t\t\tconst from = record.get(\"from\")\n\t\t\tconst to = record.get(\"to\")\n\t\t\treturn {\n\t\t\t\tfromProperties: parseProperties(from.properties),\n\t\t\t\tfromLabels: from.labels,\n\t\t\t\tfromIdentity: from.identity.toNumber(),\n\n\t\t\t\ttoProperties: to.properties,\n\t\t\t\ttoLabels: to.labels,\n\t\t\t\ttoIdentity: to.identity.toNumber(),\n\n\t\t\t\tsimilarity: record.get(\"similarity\")\n\t\t\t}\n\t\t})\n\t\treturn {\n\t\t\trows: rows,\n\t\t\tids: [\n\t\t\t\t...new Set(\n\t\t\t\t\trows.flatMap(result => [result.fromIdentity, result.toIdentity])\n\t\t\t\t)\n\t\t\t],\n\t\t\tlabels: [\n\t\t\t\t...new Set(\n\t\t\t\t\trows.flatMap(result => result.fromLabels.concat(result.toLabels))\n\t\t\t\t)\n\t\t\t]\n\t\t}\n\t} else {\n\t\tconsole.error(result.error)\n\t\tthrow new Error(result.error)\n\t}\n}\n\nexport const constructSimilarityMaps = (item, relationshipType, category) => {\n\tconst itemNode = notAll(item) ? `(item:\\`${item}\\`)` : `(item)`\n\tconst rel = relationshipType ? `[:\\`${relationshipType}\\`]` : \"\"\n\tconst categoryNode = notAll(category)\n\t\t? `(category:\\`${category}\\`)`\n\t\t: \"(category)\"\n\n\treturn `MATCH ${itemNode}-${rel}->${categoryNode}\nWITH {item:id(item), categories: collect(distinct id(category))} as userData\nWITH collect(userData) as data`\n}\n\nconst notAll = value => value && value !== \"*\"\n\nexport const constructWeightedSimilarityMaps = (\n\titem,\n\trelationshipType,\n\tcategory,\n\tweightProperty\n) => {\n\tconst itemNode = notAll(item) ? `(item:\\`${item}\\`)` : `(item)`\n\tconst rel = relationshipType ? `[rel:\\`${relationshipType}\\`]` : \"[rel]\"\n\tconst categoryNode = notAll(category)\n\t\t? `(category:\\`${category}\\`)`\n\t\t: \"(category)\"\n\n\treturn `MATCH ${itemNode}, ${categoryNode}\nOPTIONAL MATCH ${itemNode}-${rel}->${categoryNode}\nWITH {item:id(item), weights: collect(coalesce(rel.\\`${weightProperty}\\`, gds.util.NaN()))} as userData\nWITH collect(userData) as data`\n}\n","import React from 'react'\nimport {Checkbox, Divider, Form, Input} from \"semantic-ui-react\";\nimport {OpenCloseSection} from \"./OpenCloseSection\";\n\nexport const StorePropertyAndRelationshipType = ({persist, onChange, writeProperty, writeRelationshipType, readOnly, children}) => {\n    return <OpenCloseSection title=\"Results\">\n        <Form.Field inline style={{display: \"flex\", alignItems: \"center\"}}\n                    className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Store results?</label>\n            <Checkbox toggle checked={persist} onChange={(evt, data) => {\n                onChange('persist', data.checked)\n            }}/>\n\n        </Form.Field>\n        {\n            persist ?\n                <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                    <label style={{'width': '12em'}}>Write Property</label>\n                    <Input basic=\"true\" value={writeProperty} placeholder='Write Property'\n                           onChange={evt => onChange('writeProperty', evt.target.value)}/>\n                </Form.Field>\n                : null\n        }\n        {\n            persist ?\n                <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                    <label style={{'width': '12em'}}>Write Relationship Type</label>\n                    <Input basic=\"true\" value={writeRelationshipType} placeholder='Write Relationship Type'\n                           onChange={evt => onChange('writeRelationshipType', evt.target.value)}/>\n                </Form.Field>\n                : null\n        }\n        <Divider />\n        {children}\n    </OpenCloseSection>\n}\n","import {Form, Label, Segment} from \"semantic-ui-react\";\nimport React from \"react\";\n\nexport const Parameters = ({onChange, similarityCutoff, degreeCutoff, readOnly}) => {\n    const [open, setOpen] = React.useState(true);\n    const style = {display: open ? \"\" : \"none\"}\n\n    return <Segment>\n        <Label as='a' attached='top left' onClick={() => setOpen(!open)}>\n            Algorithm Parameters\n        </Label>\n        <Form style={style}>\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n\n                <label style={{'width': '12em'}}>Similarity Cutoff</label>\n                <input\n                    value={similarityCutoff}\n                    onChange={evt => onChange('similarityCutoff', evt.target.value)}\n                    style={{'width': '7em'}}\n                />\n            </Form.Field>\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                <label style={{'width': '12em'}}>Degree Cutoff</label>\n                <input\n                    value={degreeCutoff}\n                    onChange={evt => onChange('degreeCutoff', evt.target.value)}\n                    style={{'width': '7em'}}\n                />\n            </Form.Field>\n        </Form>\n    </Segment>\n}","import React from 'react'\nimport {Tab, Table} from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport {Loader} from 'semantic-ui-react'\n\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({task}) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{padding: '1em 0', borderTop: '0'}}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>From Labels</Table.HeaderCell>\n          <Table.HeaderCell>From Properties</Table.HeaderCell>\n          <Table.HeaderCell>To Labels</Table.HeaderCell>\n          <Table.HeaderCell>To Properties</Table.HeaderCell>\n          <Table.HeaderCell>Similarity</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n          (task.result && task.result.rows.length > 0 ?  task.result.rows.map((result, idx) =>\n            <Table.Row key={idx}>\n              <Table.Cell>{result.fromLabels.join(', ')}</Table.Cell>\n              <Table.Cell> <PropertiesView properties={result.fromProperties} labels={result.fromLabels} database={task.database}/></Table.Cell>\n              <Table.Cell>{result.toLabels.join(', ')}</Table.Cell>\n              <Table.Cell> <PropertiesView properties={result.toProperties} labels={result.toLabels} database={task.database}/></Table.Cell>\n              <Table.Cell>{result.similarity}</Table.Cell>\n            </Table.Row>\n          ) : (<Table.Row key={\"no-results\"}>\n            <Table.Cell colspan={5}>No results found</Table.Cell>\n          </Table.Row>)) :\n          (<Table.Row key=\"loading-centrality-result\">\n            <Table.Cell colSpan={5}>\n              <LoaderExampleInlineCentered/>\n            </Table.Cell>\n          </Table.Row>)\n        }\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from 'react'\nimport {Dropdown, Form} from \"semantic-ui-react\"\nimport {StorePropertyAndRelationshipType} from \"../Form/StorePropertyAndRelationshipType\";\nimport {Parameters} from \"./Parameters\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({\n                      children, readOnly, onChange, direction, itemLabel, categoryLabel, relationshipType, persist, writeProperty, weightProperty,\n                      writeRelationshipType, similarityCutoff, degreeCutoff, labelOptions, relationshipTypeOptions, propertyKeyOptions\n                  }) => {\n    return <React.Fragment>\n        <SimilarityGraph\n            onChange={onChange} itemLabel={itemLabel} categoryLabel={categoryLabel}\n            relationshipTypeOptions={relationshipTypeOptions} weightProperty={weightProperty}\n            propertyKeyOptions={propertyKeyOptions} labelOptions={labelOptions} readOnly={readOnly}\n            relationshipType={relationshipType}\n        />\n\n        <Parameters onChange={onChange} similarityCutoff={similarityCutoff} degreeCutoff={degreeCutoff}\n                    readOnly={readOnly}/>\n\n        <StorePropertyAndRelationshipType persist={persist} onChange={onChange}\n                                          writeProperty={writeProperty} readOnly={readOnly}\n                                          writeRelationshipType={writeRelationshipType}>\n            {children}\n        </StorePropertyAndRelationshipType>\n\n    </React.Fragment>\n}\n\nconst SimilarityGraph = ({itemLabel, labelOptions, onChange, relationshipTypeOptions, relationshipType, categoryLabel, weightProperty, propertyKeyOptions, readOnly}) => {\n    return <OpenCloseSection title=\"Projected Graph\">\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Item Label</label>\n            <Dropdown value={itemLabel} placeholder='Item Label' search selection options={labelOptions}\n                      onChange={(evt, data) => onChange(\"itemLabel\", data.value)}/>\n        </Form.Field>\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Relationship Type</label>\n            <Dropdown placeholder='RelationshipType' search selection options={relationshipTypeOptions}\n                      value={relationshipType}\n                      onChange={(evt, data) => onChange(\"relationshipType\", data.value)}/>\n        </Form.Field>\n\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Weight Property</label>\n            <Dropdown placeholder='Weight Property' value={weightProperty} search selection\n                      options={propertyKeyOptions}\n                      onChange={(evt, data) => onChange(\"weightProperty\", data.value)}/>\n\n        </Form.Field>\n\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Category Label</label>\n            <Dropdown value={categoryLabel} placeholder='Category Label' search selection options={labelOptions}\n                      onChange={(evt, data) => onChange(\"categoryLabel\", data.value)}/>\n        </Form.Field>\n    </OpenCloseSection>\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport WeightedSimilarityForm from \"./WeightedSimilarityForm\";\n\nconst AlgoForm = ({children, onChange, readOnly, labelOptions, itemLabel, categoryLabel, relationshipType, relationshipTypeOptions, propertyKeyOptions, writeProperty, writeRelationshipType, similarityCutoff, degreeCutoff, direction, persist}) => {\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <WeightedSimilarityForm onChange={onChange} direction={direction} writeProperty={writeProperty}\n                                    persist={persist} readOnly={readOnly}\n                                    itemLabel={itemLabel} categoryLabel={categoryLabel} relationshipType={relationshipType}\n                                    labelOptions={labelOptions} writeRelationshipType={writeRelationshipType}\n                                    similarityCutoff={similarityCutoff}\n                                    degreeCutoff={degreeCutoff} propertyKeyOptions={propertyKeyOptions}\n                                    relationshipTypeOptions={relationshipTypeOptions}>\n                {children}\n            </WeightedSimilarityForm>\n\n        </Form>\n    )\n}\n\n\nexport default AlgoForm","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport WeightedSimilarityForm from \"./WeightedSimilarityForm\";\n\nconst AlgoForm = ({\n                      readOnly, children, onChange, labelOptions, relationshipTypeOptions, propertyKeyOptions, writeProperty, writeRelationshipType,\n                      similarityCutoff, degreeCutoff, direction, persist, itemLabel, categoryLabel, relationshipType\n                  }) => {\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <WeightedSimilarityForm onChange={onChange} direction={direction} writeProperty={writeProperty}\n                                    persist={persist} readOnly={readOnly}\n                                    labelOptions={labelOptions} writeRelationshipType={writeRelationshipType}\n                                    similarityCutoff={similarityCutoff}\n                                    itemLabel={itemLabel} categoryLabel={categoryLabel} relationshipType={relationshipType}\n                                    degreeCutoff={degreeCutoff} propertyKeyOptions={propertyKeyOptions}\n                                    relationshipTypeOptions={relationshipTypeOptions}>{children}</WeightedSimilarityForm>\n\n        </Form>\n    )\n}\n\nexport default AlgoForm","import React from 'react'\nimport {Dropdown, Form} from \"semantic-ui-react\"\nimport {Parameters} from \"./Parameters\";\nimport {StorePropertyAndRelationshipType} from \"../Form/StorePropertyAndRelationshipType\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({readOnly, onChange, children, itemLabel, categoryLabel, labelOptions, relationshipType, relationshipTypeOptions, writeProperty, writeRelationshipType, similarityCutoff, degreeCutoff, direction, persist}) => {\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <SimilarityGraph onChange={onChange}\n                             relationshipTypeOptions={relationshipTypeOptions}\n                             itemLabel={itemLabel}\n                             relationshipType={relationshipType}\n                             categoryLabel={categoryLabel}\n                             readOnly={readOnly}\n                             labelOptions={labelOptions}\n            />\n\n            <Parameters onChange={onChange} similarityCutoff={similarityCutoff} degreeCutoff={degreeCutoff}\n                        readOnly={readOnly}/>\n\n            <StorePropertyAndRelationshipType persist={persist} onChange={onChange}\n                                              writeProperty={writeProperty} readOnly={readOnly}\n                                              writeRelationshipType={writeRelationshipType}\n            >{children}</StorePropertyAndRelationshipType>\n\n        </Form>\n    )\n}\n\nconst SimilarityGraph = ({labelOptions, onChange, relationshipTypeOptions, itemLabel, categoryLabel, readOnly, relationshipType}) => {\n    return <OpenCloseSection title=\"Projected Graph\">\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Item Label</label>\n            <Dropdown value={itemLabel} placeholder='Item Label' search selection options={labelOptions}\n                      onChange={(evt, data) => onChange(\"itemLabel\", data.value)}/>\n        </Form.Field>\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Relationship Type</label>\n            <Dropdown placeholder='RelationshipType' search selection options={relationshipTypeOptions}\n                      value={relationshipType}\n                      onChange={(evt, data) => onChange(\"relationshipType\", data.value)}/>\n        </Form.Field>\n        <Form.Field inline className={readOnly ? \"disabled\" : null}>\n            <label style={{'width': '12em'}}>Category Label</label>\n            <Dropdown value={categoryLabel} placeholder='Category Label' search selection options={labelOptions}\n                      onChange={(evt, data) => onChange(\"categoryLabel\", data.value)}/>\n        </Form.Field>\n    </OpenCloseSection>\n}\n\n\nexport default AlgoForm","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport WeightedSimilarityForm from \"./WeightedSimilarityForm\";\n\nexport const AlgoForm = ({readOnly, onChange, labelOptions, itemLabel, categoryLabel, relationshipType, children, relationshipTypeOptions, propertyKeyOptions, writeProperty, writeRelationshipType, similarityCutoff, degreeCutoff, direction, persist}) => {\n\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <WeightedSimilarityForm onChange={onChange} direction={direction} writeProperty={writeProperty}\n                                    persist={persist} readOnly={readOnly}\n                                    itemLabel={itemLabel} categoryLabel={categoryLabel} relationshipType={relationshipType}\n                                    labelOptions={labelOptions} writeRelationshipType={writeRelationshipType}\n                                    similarityCutoff={similarityCutoff}\n                                    degreeCutoff={degreeCutoff} propertyKeyOptions={propertyKeyOptions}\n                                    relationshipTypeOptions={relationshipTypeOptions}>\n                {children}\n            </WeightedSimilarityForm>\n\n        </Form>\n    )\n}\n\nexport default AlgoForm\n","import React from 'react'\nimport {Dropdown, Form, Input, Label, Segment} from \"semantic-ui-react\"\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {StorePropertyAndRelationshipType} from \"../Form/StorePropertyAndRelationshipType\";\nimport {OpenCloseSection} from \"../Form/OpenCloseSection\";\n\nconst AlgoForm = ({onChange, readOnly, relationshipType, label, children, propertyKeyOptions, labelOptions, relationshipOrientationOptions, relationshipTypeOptions, writeProperty, writeRelationshipType, nodeWeightProperty, sampleRate, deltaThreshold, topK, randomJoins, direction, persist}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        onChange,\n        readOnly\n    }\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n            <Parameters onChange={onChange} readOnly={readOnly} propertyKeyOptions={propertyKeyOptions} nodeWeightProperty={nodeWeightProperty} sampleRate={sampleRate} topK={topK} deltaThreshold={deltaThreshold} randomJoins={randomJoins} />\n            <StorePropertyAndRelationshipType persist={persist} onChange={onChange}\n                                              writeProperty={writeProperty}\n                                              writeRelationshipType={writeRelationshipType} readOnly={readOnly}\n            >{children}</StorePropertyAndRelationshipType>\n        </Form>\n    )\n}\n\nconst Parameters = ({onChange, readOnly, nodeWeightProperty, propertyKeyOptions, sampleRate, deltaThreshold, topK, randomJoins}) => {\n    const [open, setOpen] = React.useState(true);\n    const style = {display: open ? \"\" : \"none\"}\n\n    return <Segment>\n        <Label as='a' attached='top left' onClick={() => setOpen(!open)}>\n            Algorithm Parameters\n        </Label>\n\n\n        <Form style={style}>\n\n            <Form.Field disabled={readOnly} inline\n                        label={<label style={{'width': '12em'}}># of neighbors per nodes</label>}\n                        control={Input} type='number' value={topK}\n                        onChange={(evt, data) => onChange('topK', data.value)} min={1} max={50} step={1}/>\n\n            <Form.Field inline className={readOnly ? \"disabled\" : null}>\n                <label style={{'width': '12em'}}>Node Weight Property</label>\n                <Dropdown disabled={readOnly} placeholder='Weight Property' value={nodeWeightProperty}\n                          search selection\n                          options={propertyKeyOptions}\n                          onChange={(evt, data) => onChange(\"nodeWeightProperty\", data.value)}/>\n            </Form.Field>\n\n            <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Sample Rate</label>}\n                        control={Input} type='number' value={sampleRate} step={0.01}\n                        onChange={(evt, data) => onChange('sampleRate', data.value)}/>\n\n            <Form.Field disabled={readOnly} inline label={<label style={{'width': '12em'}}>Delta Threshold</label>}\n                        control={Input} type='number' value={deltaThreshold} step={0.01}\n                        onChange={(evt, data) => onChange('deltaThreshold', data.value)}/>\n\n            <Form.Field disabled={readOnly} inline\n                        label={<label style={{'width': '12em'}}>Random Joins</label>}\n                        control={Input} type='number' value={randomJoins}\n                        onChange={(evt, data) => onChange('randomJoins', data.value)} min={1} max={50} step={1}/>\n\n            {/*<Form.Field inline className={readOnly ? \"disabled\" : null}>*/}\n            {/*    <label style={{'width': '12em'}}>Similarity Cutoff</label>*/}\n            {/*    <input*/}\n            {/*        value={similarityCutoff}*/}\n            {/*        onChange={evt => onChange('similarityCutoff', evt.target.value)}*/}\n            {/*        style={{'width': '7em'}}*/}\n            {/*    />*/}\n            {/*</Form.Field>*/}\n            {/*<Form.Field inline className={readOnly ? \"disabled\" : null}>*/}\n            {/*    <label style={{'width': '12em'}}>Degree Cutoff</label>*/}\n            {/*    <input*/}\n            {/*        value={degreeCutoff}*/}\n            {/*        onChange={evt => onChange('degreeCutoff', evt.target.value)}*/}\n            {/*        style={{'width': '7em'}}*/}\n            {/*    />*/}\n            {/*</Form.Field>*/}\n        </Form>\n    </Segment>\n}\n\nexport default AlgoForm\n","import React from \"react\"\nimport { Dropdown, Form, Input, Label, Segment } from \"semantic-ui-react\"\nimport { ProjectedGraphWithNoWeights } from \"../Form/ProjectedGraph\"\nimport { StorePropertyAndRelationshipType } from \"../Form/StorePropertyAndRelationshipType\"\nimport { OpenCloseSection } from \"../Form/OpenCloseSection\"\n\nconst AlgoForm = ({\n\tonChange,\n\treadOnly,\n\trelationshipType,\n\tlabel,\n\tchildren,\n\tpropertyKeyOptions,\n\tlabelOptions,\n\trelationshipOrientationOptions,\n\trelationshipTypeOptions,\n\twriteProperty,\n\twriteRelationshipType,\n\tnodeWeightProperty,\n\tsampleRate,\n\tdeltaThreshold,\n\ttopK,\n\trandomJoins,\n\tdirection,\n\tpersist,\n\tsimilarityMetric\n}) => {\n\tconst projectedGraphProps = {\n\t\tlabel,\n\t\tlabelOptions,\n\t\trelationshipType,\n\t\tdirection,\n\t\trelationshipTypeOptions,\n\t\trelationshipOrientationOptions,\n\t\tonChange,\n\t\treadOnly,\n\t\tsimilarityMetric\n\t}\n\treturn (\n\t\t<Form size=\"mini\" style={{ marginBottom: \"1em\" }}>\n\t\t\t<ProjectedGraphWithNoWeights {...projectedGraphProps} />\n\t\t\t<Parameters\n\t\t\t\tonChange={onChange}\n\t\t\t\treadOnly={readOnly}\n\t\t\t\tpropertyKeyOptions={propertyKeyOptions}\n\t\t\t\tnodeWeightProperty={nodeWeightProperty}\n\t\t\t\tsampleRate={sampleRate}\n\t\t\t\ttopK={topK}\n\t\t\t\tdeltaThreshold={deltaThreshold}\n\t\t\t\trandomJoins={randomJoins}\n\t\t\t\tsimilarityMetric={similarityMetric}\n\t\t\t/>\n\t\t\t<StorePropertyAndRelationshipType\n\t\t\t\tpersist={persist}\n\t\t\t\tonChange={onChange}\n\t\t\t\twriteProperty={writeProperty}\n\t\t\t\twriteRelationshipType={writeRelationshipType}\n\t\t\t\treadOnly={readOnly}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</StorePropertyAndRelationshipType>\n\t\t</Form>\n\t)\n}\n\nconst Parameters = ({\n\tonChange,\n\treadOnly,\n\tnodeWeightProperty,\n\tpropertyKeyOptions,\n\tsampleRate,\n\tdeltaThreshold,\n\ttopK,\n\trandomJoins,\n\tsimilarityMetric\n}) => {\n\tconst [open, setOpen] = React.useState(true)\n\tconst style = { display: open ? \"\" : \"none\" }\n\n\tconst similarityMetricOptions = [\n\t\t\"COSINE\",\n\t\t\"EUCLIDEAN\",\n\t\t\"PEARSON\",\n\t\t\"JACCARD\",\n\t\t\"OVERLAP\"\n\t].map(el => ({\n\t\tkey: el,\n\t\ttext: el,\n\t\tvalue: el\n\t}))\n\n\treturn (\n\t\t<Segment>\n\t\t\t<Label as=\"a\" attached=\"top left\" onClick={() => setOpen(!open)}>\n\t\t\t\tAlgorithm Parameters\n\t\t\t</Label>\n\n\t\t\t<Form.Field inline className={readOnly ? \"disabled\" : null}>\n\t\t\t\t<label style={{ width: \"12em\" }}>Similarity Metric</label>\n\t\t\t\t<Dropdown\n\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\tplaceholder=\"Similarity Metric\"\n\t\t\t\t\tvalue={similarityMetric}\n\t\t\t\t\tsearch\n\t\t\t\t\tselection\n\t\t\t\t\toptions={similarityMetricOptions}\n\t\t\t\t\tonChange={(evt, data) => onChange(\"similarityMetric\", data.value)}\n\t\t\t\t/>\n\t\t\t</Form.Field>\n\n\t\t\t<Form style={style}>\n\t\t\t\t<Form.Field\n\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\tinline\n\t\t\t\t\tlabel={\n\t\t\t\t\t\t<label style={{ width: \"12em\" }}># of neighbors per nodes</label>\n\t\t\t\t\t}\n\t\t\t\t\tcontrol={Input}\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={topK}\n\t\t\t\t\tonChange={(evt, data) => onChange(\"topK\", data.value)}\n\t\t\t\t\tmin={1}\n\t\t\t\t\tmax={50}\n\t\t\t\t\tstep={1}\n\t\t\t\t/>\n\n\t\t\t\t<Form.Field inline className={readOnly ? \"disabled\" : null}>\n\t\t\t\t\t<label style={{ width: \"12em\" }}>Node Property</label>\n\t\t\t\t\t<Dropdown\n\t\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\t\tplaceholder=\"Weight Property\"\n\t\t\t\t\t\tvalue={nodeWeightProperty}\n\t\t\t\t\t\tsearch\n\t\t\t\t\t\tselection\n\t\t\t\t\t\toptions={propertyKeyOptions}\n\t\t\t\t\t\tonChange={(evt, data) => onChange(\"nodeWeightProperty\", data.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Form.Field>\n\n\t\t\t\t<Form.Field\n\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\tinline\n\t\t\t\t\tlabel={<label style={{ width: \"12em\" }}>Sample Rate</label>}\n\t\t\t\t\tcontrol={Input}\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={sampleRate}\n\t\t\t\t\tstep={0.01}\n\t\t\t\t\tonChange={(evt, data) => onChange(\"sampleRate\", data.value)}\n\t\t\t\t/>\n\n\t\t\t\t<Form.Field\n\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\tinline\n\t\t\t\t\tlabel={<label style={{ width: \"12em\" }}>Delta Threshold</label>}\n\t\t\t\t\tcontrol={Input}\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={deltaThreshold}\n\t\t\t\t\tstep={0.01}\n\t\t\t\t\tonChange={(evt, data) => onChange(\"deltaThreshold\", data.value)}\n\t\t\t\t/>\n\n\t\t\t\t<Form.Field\n\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\tinline\n\t\t\t\t\tlabel={<label style={{ width: \"12em\" }}>Random Joins</label>}\n\t\t\t\t\tcontrol={Input}\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={randomJoins}\n\t\t\t\t\tonChange={(evt, data) => onChange(\"randomJoins\", data.value)}\n\t\t\t\t\tmin={1}\n\t\t\t\t\tmax={50}\n\t\t\t\t\tstep={1}\n\t\t\t\t/>\n\n\t\t\t\t{/*<Form.Field inline className={readOnly ? \"disabled\" : null}>*/}\n\t\t\t\t{/*    <label style={{'width': '12em'}}>Similarity Cutoff</label>*/}\n\t\t\t\t{/*    <input*/}\n\t\t\t\t{/*        value={similarityCutoff}*/}\n\t\t\t\t{/*        onChange={evt => onChange('similarityCutoff', evt.target.value)}*/}\n\t\t\t\t{/*        style={{'width': '7em'}}*/}\n\t\t\t\t{/*    />*/}\n\t\t\t\t{/*</Form.Field>*/}\n\t\t\t\t{/*<Form.Field inline className={readOnly ? \"disabled\" : null}>*/}\n\t\t\t\t{/*    <label style={{'width': '12em'}}>Degree Cutoff</label>*/}\n\t\t\t\t{/*    <input*/}\n\t\t\t\t{/*        value={degreeCutoff}*/}\n\t\t\t\t{/*        onChange={evt => onChange('degreeCutoff', evt.target.value)}*/}\n\t\t\t\t{/*        style={{'width': '7em'}}*/}\n\t\t\t\t{/*    />*/}\n\t\t\t\t{/*</Form.Field>*/}\n\t\t\t</Form>\n\t\t</Segment>\n\t)\n}\n\nexport default AlgoForm\n","import React from 'react'\nimport {Tab, Table} from \"semantic-ui-react\"\nimport PropertiesView from \"../PropertiesView\"\n\nimport {Loader} from 'semantic-ui-react'\n\nconst LoaderExampleInlineCentered = () => <Loader active inline='centered'>Algorithm running</Loader>\n\nexport default ({task}) => (\n  <Tab.Pane key={task.startTime.toLocaleString()} style={{padding: '1em 0', borderTop: '0'}}>\n    <Table color='green'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell width={2}>From</Table.HeaderCell>\n          <Table.HeaderCell>Nodes</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {task.result ?\n          (task.result && task.result.rows.length > 0 ?  task.result.rows.map((result, idx) =>\n            <Table.Row key={idx}>\n              <Table.Cell>\n                <PropertiesView properties={result.fromProperties} labels={result.fromLabels} database={task.database}/>\n              </Table.Cell>\n              <Table.Cell>\n                {result.to.map((m, idx) => <PropertiesView key={\"properties-\" + idx} properties={m.properties} labels={m.labels} database={task.database} similarity={m.similarity} />)}\n              </Table.Cell>\n\n            </Table.Row>\n          ) : (<Table.Row key={\"no-results\"}>\n            <Table.Cell colspan={5}>No results found</Table.Cell>\n          </Table.Row>)) :\n          (<Table.Row key=\"loading-centrality-result\">\n            <Table.Cell colSpan={5}>\n              <LoaderExampleInlineCentered/>\n            </Table.Cell>\n          </Table.Row>)\n        }\n      </Table.Body>\n    </Table>\n  </Tab.Pane>\n)\n","import React from \"react\"\nimport { Form, Label, Segment, Dropdown } from \"semantic-ui-react\"\nimport { ProjectedGraphWithNoWeights } from \"../Form/ProjectedGraph\"\nimport { StorePropertyAndRelationshipType } from \"../Form/StorePropertyAndRelationshipType\"\n\nconst AlgoForm = ({\n\tonChange,\n\treadOnly,\n\trelationshipType,\n\tlabel,\n\tchildren,\n\tpropertyKeyOptions,\n\tlabelOptions,\n\trelationshipOrientationOptions,\n\trelationshipTypeOptions,\n\twriteProperty,\n\twriteRelationshipType,\n\tsimilarityCutoff,\n\tdegreeCutoff,\n\tdirection,\n\tpersist,\n\tsimilarityMetric\n}) => {\n\tconst projectedGraphProps = {\n\t\tlabel,\n\t\tlabelOptions,\n\t\trelationshipType,\n\t\tdirection,\n\t\trelationshipTypeOptions,\n\t\trelationshipOrientationOptions,\n\t\tonChange,\n\t\treadOnly,\n\t\tsimilarityMetric\n\t}\n\n\tconst [open, setOpen] = React.useState(true)\n\tconst style = { display: open ? \"\" : \"none\" }\n\n\tconst similarityMetricOptions = [\"Jaccard\", \"Overlap\"].map(el => ({\n\t\tkey: el,\n\t\ttext: el,\n\t\tvalue: el\n\t}))\n\n\treturn (\n\t\t<Form size=\"mini\" style={{ marginBottom: \"1em\" }}>\n\t\t\t<ProjectedGraphWithNoWeights {...projectedGraphProps} />\n\t\t\t<Segment>\n\t\t\t\t<Label as=\"a\" attached=\"top left\" onClick={() => setOpen(!open)}>\n\t\t\t\t\tAlgorithm Parameters\n\t\t\t\t</Label>\n\t\t\t\t<Form style={style}>\n\t\t\t\t\t<Form.Field inline className={readOnly ? \"disabled\" : null}>\n\t\t\t\t\t\t<label style={{ width: \"12em\" }}>Similarity Metric</label>\n\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\tdisabled={readOnly}\n\t\t\t\t\t\t\tplaceholder=\"Similarity Metric\"\n\t\t\t\t\t\t\tvalue={similarityMetric}\n\t\t\t\t\t\t\tsearch\n\t\t\t\t\t\t\tselection\n\t\t\t\t\t\t\toptions={similarityMetricOptions}\n\t\t\t\t\t\t\tonChange={(evt, data) => onChange(\"similarityMetric\", data.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Form.Field inline className={readOnly ? \"disabled\" : null}>\n\t\t\t\t\t\t<label style={{ width: \"12em\" }}>Similarity Cutoff</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={similarityCutoff}\n\t\t\t\t\t\t\tonChange={evt => onChange(\"similarityCutoff\", evt.target.value)}\n\t\t\t\t\t\t\tstyle={{ width: \"7em\" }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Form.Field inline className={readOnly ? \"disabled\" : null}>\n\t\t\t\t\t\t<label style={{ width: \"12em\" }}>Degree Cutoff</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={degreeCutoff}\n\t\t\t\t\t\t\tonChange={evt => onChange(\"degreeCutoff\", evt.target.value)}\n\t\t\t\t\t\t\tstyle={{ width: \"7em\" }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t</Form>\n\t\t\t</Segment>\n\t\t\t<StorePropertyAndRelationshipType\n\t\t\t\tpersist={persist}\n\t\t\t\tonChange={onChange}\n\t\t\t\twriteProperty={writeProperty}\n\t\t\t\twriteRelationshipType={writeRelationshipType}\n\t\t\t\treadOnly={readOnly}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</StorePropertyAndRelationshipType>\n\t\t</Form>\n\t)\n}\n\nexport default AlgoForm\n","import {\n\tconstructSimilarityMaps,\n\tconstructWeightedSimilarityMaps,\n\trunAlgorithm,\n\trunkNNAlgorithm,\n\trunAlgorithmOld\n} from \"../../services/similarity\"\nimport {\n\tknnParams,\n\tknnParamsNew,\n\tnodeSimilarityParams,\n\tnodeSimilarityParamsNew,\n\tsimilarityParams\n} from \"../../services/queries\"\nimport JaccardForm from \"./JaccardForm\"\nimport SimilarityResult from \"./SimilarityResult\"\nimport CosineForm from \"./CosineForm\"\nimport PearsonForm from \"./PearsonForm\"\nimport OverlapForm from \"./OverlapForm\"\nimport EuclideanForm from \"./EuclideanForm\"\nimport KNNForm from \"./KNNForm\"\nimport KNNFormNew from \"./KNNFormNew\"\nimport KNNResult from \"./KNNResult\"\nimport NodeSimilarityForm from \"./NodeSimilarityForm\"\n\nconst constructStreamingQueryGetter = (callAlgorithm, constructMapsFn) => (\n\titem,\n\trelationshipType,\n\tcategory,\n\tweightProperty\n) =>\n\t`${constructMapsFn(item, relationshipType, category, weightProperty)}\nWITH $config AS config, data\nWITH config { .*, data: data} as config\n\n${callAlgorithm}\n\nYIELD item1, item2, similarity\nRETURN gds.util.asNode(item1) AS from, gds.util.asNode(item2) AS to, similarity\nORDER BY similarity DESC\nLIMIT toInteger($limit)`\n\nconst constructStoreQueryGetter = (callAlgorithm, constructMapsFn) => (\n\titem,\n\trelationshipType,\n\tcategory,\n\tweightProperty\n) =>\n\t`${constructMapsFn(item, relationshipType, category, weightProperty)}\nWITH $config AS config, data\nWITH config { .*, data: data} as config\n\n${callAlgorithm}\n\nYIELD nodes, similarityPairs, writeRelationshipType, writeProperty, min, max, mean, stdDev, p25, p50, p75, p90, p95, p99, p999, p100\nRETURN nodes, similarityPairs, writeRelationshipType, writeProperty, min, max, mean, p95`\n\nconst constructFetchQuery = (item, writeRelationshipType, config) => {\n\tconst itemNode1 = item && item !== \"*\" ? `(from:\\`${item}\\`)` : `(from)`\n\tconst itemNode2 = item && item !== \"*\" ? `(to:\\`${item}\\`)` : `(to)`\n\tconst rel = `[rel:\\`${writeRelationshipType}\\`]`\n\n\treturn `MATCH ${itemNode1}-${rel}-${itemNode2}\nWHERE exists(rel.\\`${config.writeProperty}\\`)\nRETURN from, to, rel.\\`${config.writeProperty}\\` AS similarity\nORDER BY similarity DESC\nLIMIT toInteger($limit)`\n}\n\nconst constructkNNFetchQuery = (item, writeRelationshipType, config) => {\n\tconst itemNode1 = item && item !== \"*\" ? `(from:\\`${item}\\`)` : `(from)`\n\tconst itemNode2 = item && item !== \"*\" ? `(to:\\`${item}\\`)` : `(to)`\n\tconst rel = `[rel:\\`${writeRelationshipType}\\`]`\n\n\treturn `MATCH ${itemNode1}-${rel}->${itemNode2}\nWHERE exists(rel.\\`${config.writeProperty}\\`)\nWITH from, to, rel.\\`${config.writeProperty}\\` AS similarity\nORDER BY from, similarity DESC\nWITH from, collect({node: to, similarity: similarity}) AS to\nRETURN from, to\nLIMIT toInteger($limit)`\n}\n\nconst algorithms = {\n\tJaccard: {\n\t\talgorithmName: \"gds.nodeSimilarity\",\n\t\tForm: JaccardForm,\n\t\tparametersBuilder: nodeSimilarityParams,\n\t\tservice: runAlgorithm,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\tlabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR_JACCARD\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 1,\n\t\t\tdirection: \"Natural\"\n\t\t},\n\t\tstreamQuery: `CALL gds.nodeSimilarity.stream($generatedName, $config) YIELD node1, node2, similarity\nRETURN gds.util.asNode(node1) AS from, gds.util.asNode(node2) AS to, similarity\nORDER BY similarity DESC\nLIMIT toInteger($limit)`,\n\t\tstoreQuery: `CALL gds.nodeSimilarity.write($generatedName, $config)`,\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `measures similarities between sets. It is defined as the size of the intersection divided by the size of the union of two sets.`\n\t},\n\tOverlap: {\n\t\talgorithmName: \"gds.alpha.similarity\",\n\t\tForm: OverlapForm,\n\t\tparametersBuilder: similarityParams,\n\t\tservice: runAlgorithmOld,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\titemLabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tcategoryLabel: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR_OVERLAP\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 0,\n\t\t\twrite: true\n\t\t},\n\t\tstreamQuery: constructStreamingQueryGetter(\n\t\t\t\"CALL gds.alpha.similarity.overlap.stream(config)\",\n\t\t\tconstructSimilarityMaps\n\t\t),\n\t\tstoreQuery: constructStoreQueryGetter(\n\t\t\t`CALL gds.alpha.similarity.overlap.write(config)`,\n\t\t\tconstructSimilarityMaps\n\t\t),\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `measures overlap between two sets. It is defined as the size of the intersection of two sets, divided by the size of the smaller of the two sets.`\n\t},\n\n\tCosine: {\n\t\talgorithmName: \"gds.alpha.similarity.cosine\",\n\t\tForm: CosineForm,\n\t\tparametersBuilder: similarityParams,\n\t\tservice: runAlgorithmOld,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\titemLabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tcategoryLabel: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR_COSINE\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 0,\n\t\t\twrite: true,\n\t\t\tweightProperty: \"weight\"\n\t\t},\n\t\tstreamQuery: constructStreamingQueryGetter(\n\t\t\t\"CALL gds.alpha.similarity.cosine.stream(config)\",\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tstoreQuery: constructStoreQueryGetter(\n\t\t\t`CALL gds.alpha.similarity.cosine.write(config)`,\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `calculates the dot product of the two vectors divided by the product of the two vectors' lengths (or magnitudes).`\n\t},\n\n\tPearson: {\n\t\talgorithmName: \"gds.alpha.similarity.pearson\",\n\t\tForm: PearsonForm,\n\t\tparametersBuilder: similarityParams,\n\t\tservice: runAlgorithmOld,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\titemLabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tcategoryLabel: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR_PEARSON\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 0,\n\t\t\twrite: true,\n\t\t\tweightProperty: \"weight\"\n\t\t},\n\t\tstreamQuery: constructStreamingQueryGetter(\n\t\t\t\"CALL gds.alpha.similarity.pearson.stream(config)\",\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tstoreQuery: constructStoreQueryGetter(\n\t\t\t`CALL gds.alpha.similarity.pearson.write(config)`,\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `the covariance of the two n-dimensional vectors divided by the product of their standard deviations.`\n\t},\n\n\tEuclidean: {\n\t\talgorithmName: \"gds.alpha.similarity.euclidean\",\n\t\tForm: EuclideanForm,\n\t\tparametersBuilder: similarityParams,\n\t\tservice: runAlgorithmOld,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\titemLabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tcategoryLabel: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR_EUCLIDEAN\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 0,\n\t\t\twrite: true,\n\t\t\tweightProperty: \"weight\"\n\t\t},\n\t\tstreamQuery: constructStreamingQueryGetter(\n\t\t\t\"CALL gds.alpha.similarity.euclidean.stream(config)\",\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tstoreQuery: constructStoreQueryGetter(\n\t\t\t`CALL gds.alpha.similarity.euclidean.write(config)`,\n\t\t\tconstructWeightedSimilarityMaps\n\t\t),\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `measures the straight line distance between two points in n-dimensional space.`\n\t},\n\t\"Node Similarity\": {\n\t\talgorithmName: \"gds.nodeSimilarity\",\n\t\tForm: NodeSimilarityForm,\n\t\tparametersBuilder: nodeSimilarityParamsNew,\n\t\tservice: runAlgorithm,\n\t\tResultView: SimilarityResult,\n\t\tparameters: {\n\t\t\tlabel: \"*\",\n\t\t\trelationshipType: \"*\",\n\t\t\tpersist: false,\n\t\t\twriteProperty: \"score\",\n\t\t\twriteRelationshipType: \"SIMILAR\",\n\t\t\tsimilarityCutoff: 0.1,\n\t\t\tdegreeCutoff: 1,\n\t\t\tdirection: \"Natural\",\n\t\t\tsimilarityMetric: \"Jaccard\"\n\t\t},\n\t\tstreamQuery: `CALL gds.nodeSimilarity.stream($generatedName, $config) YIELD node1, node2, similarity\nRETURN gds.util.asNode(node1) AS from, gds.util.asNode(node2) AS to, similarity\nORDER BY similarity DESC\nLIMIT toInteger($limit)`,\n\t\tstoreQuery: `CALL gds.nodeSimilarity.write($generatedName, $config)`,\n\t\tgetFetchQuery: constructFetchQuery,\n\t\tdescription: `measures similarities between sets. It can use either the Jaccard or Overlap similarity metric.`\n\t}\n}\n\nconst knnBase = {\n\talgorithmName: \"gds.beta.knn\",\n\tForm: KNNForm,\n\tparametersBuilder: knnParams,\n\tservice: runkNNAlgorithm,\n\tResultView: KNNResult,\n\tparameters: {\n\t\tlabel: \"*\",\n\t\trelationshipType: \"*\",\n\t\tpersist: false,\n\t\twriteProperty: \"score\",\n\t\twriteRelationshipType: \"SIMILAR_KNN\",\n\t\tdirection: \"Natural\",\n\t\tnodeWeightProperty: \"weight\",\n\t\ttopK: 10,\n\t\tsampleRate: 0.5,\n\t\tdeltaThreshold: 0.001,\n\t\tmaxIterations: 100,\n\t\trandomJoins: 10\n\t},\n\tstreamQuery: `CALL gds.beta.knn.stream($generatedName, $config) \nYIELD node1, node2, similarity\nWITH node1, collect({node: gds.util.asNode(node2), similarity: similarity}) AS to\nRETURN gds.util.asNode(node1) AS from, to\nLIMIT toInteger($limit)`,\n\tstoreQuery: `CALL gds.beta.knn.write($generatedName, $config)`,\n\tgetFetchQuery: constructkNNFetchQuery,\n\tdescription: `computes similarities between node pairs based on node properties`\n}\n\nexport default {\n\talgorithmList: gdsVersion => {\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\t\tconst mainVersion = parseInt(gdsVersion.split(\".\")[0])\n\t\tif (mainVersion == 1) {\n\t\t\treturn [\n\t\t\t\t\"Jaccard\",\n\t\t\t\t\"Overlap\",\n\t\t\t\t\"Cosine\",\n\t\t\t\t\"Pearson\",\n\t\t\t\t\"Euclidean\",\n\t\t\t\t\"K-Nearest Neighbors\"\n\t\t\t]\n\t\t}\n\n\t\treturn [\"Node Similarity\", \"K-Nearest Neighbors\"]\n\t},\n\talgorithmDefinitions: (algorithm, gdsVersion) => {\n\t\tconst mainVersion = parseInt(gdsVersion.split(\".\")[0])\n\t\tconst version = parseInt(gdsVersion.split(\".\")[1])\n\t\tswitch (algorithm) {\n\t\t\tcase \"K-Nearest Neighbors\": {\n\t\t\t\tif (mainVersion == 1) {\n\t\t\t\t\treturn knnBase\n\t\t\t\t}\n\t\t\t\tknnBase.streamQuery = `CALL gds.knn.stream($generatedName, $config) \n\t\t\t\tYIELD node1, node2, similarity\n\t\t\t\tWITH node1, collect({node: gds.util.asNode(node2), similarity: similarity}) AS to\n\t\t\t\tRETURN gds.util.asNode(node1) AS from, to\n\t\t\t\tLIMIT toInteger($limit)`\n\t\t\t\tknnBase.storeQuery = `CALL gds.knn.write($generatedName, $config)`\n\t\t\t\tknnBase.Form = KNNFormNew\n\t\t\t\tknnBase.parametersBuilder = knnParamsNew\n\t\t\t\tknnBase.algorithmName = \"gds.knn\"\n\n\t\t\t\tObject.assign(knnBase.parameters, { similarityMetric: \"COSINE\" })\n\n\t\t\t\treturn knnBase\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn algorithms[algorithm]\n\t\t}\n\t}\n}\n","import React from 'react'\nimport {Form} from \"semantic-ui-react\"\nimport {ProjectedGraphWithNoWeights} from \"../Form/ProjectedGraph\";\nimport {StorePropertyAndRelationshipType} from \"../Form/StorePropertyAndRelationshipType\";\nimport {Parameters} from \"./Parameters\";\n\nconst AlgoForm = ({onChange, readOnly, relationshipType, label, children, propertyKeyOptions, labelOptions, relationshipOrientationOptions, relationshipTypeOptions, writeProperty, writeRelationshipType, similarityCutoff, degreeCutoff, direction, persist}) => {\n    const projectedGraphProps = {\n        label,\n        labelOptions,\n        relationshipType,\n        direction,\n        relationshipTypeOptions,\n        relationshipOrientationOptions,\n        onChange,\n        readOnly\n    }\n    return (\n        <Form size='mini' style={{marginBottom: '1em'}}>\n            <ProjectedGraphWithNoWeights {...projectedGraphProps} />\n            <Parameters onChange={onChange} similarityCutoff={similarityCutoff} degreeCutoff={degreeCutoff} readOnly={readOnly} />\n            <StorePropertyAndRelationshipType persist={persist} onChange={onChange}\n                                              writeProperty={writeProperty}\n                                              writeRelationshipType={writeRelationshipType} readOnly={readOnly}\n            >{children}</StorePropertyAndRelationshipType>\n        </Form>\n    )\n}\n\nexport default AlgoForm","import centralitiesDictionary from './Centralities/algorithmsDictionary'\nimport communitiesDictionary from './Communities/algorithmsDictionary'\nimport embeddingsDictionary from './GraphEmbeddings/algorithmsDictionary'\nimport pathFindingDictionary from './PathFinding/algorithmsDictionary'\nimport similarityDictionary from './Similarity/algorithmsDictionary'\n\nexport const algorithmGroups = (gdsVersion) => {\n    const version = parseInt(gdsVersion.split(\".\")[1])\n\n    const commonCategories = {\n        \"Centralities\": centralitiesDictionary,\n        \"Community Detection\": communitiesDictionary,\n        \"Path Finding\": pathFindingDictionary,\n        \"Similarity\": similarityDictionary,\n        \"Graph Embeddings\": embeddingsDictionary\n    };\n\n    return commonCategories\n}\n\nexport const getAlgorithms = (group, gdsVersion) => {\n    return (algorithmGroups(gdsVersion)[group] || {algorithmList: () => []}).algorithmList(gdsVersion)\n}\n\nexport const getAlgorithmDefinitions = (group, algorithm, gdsVersion) => {\n    return algorithmGroups(gdsVersion)[group].algorithmDefinitions(algorithm, gdsVersion)\n}\n\n\nexport const getGroup = (algorithm, gdsVersion) => {\n    const algorithmToGroup = {}\n    Object.keys(algorithmGroups(gdsVersion)).forEach(group => {\n        getAlgorithms(group, gdsVersion || \"1.4.0\").forEach(algorithm => {\n            algorithmToGroup[algorithm] = group\n        })\n    })\n\n    return algorithmToGroup[algorithm]\n}\n","import { getAlgorithmDefinitions, getAlgorithms } from \"../components/algorithmsLibrary\"\n\nconst NAME = 'ALGORITHMS'\nconst SELECT_GROUP = `${NAME}/SELECT_GROUP`\nconst SELECT_ALGORITHM = `${NAME}/SELECT_ALGORITHM`\n\nexport const selectGroup = (group, gdsVersion) => ({\n  type: SELECT_GROUP,\n  group,\n  gdsVersion\n})\n\nexport const selectAlgorithm = algorithm => ({\n  type: SELECT_ALGORITHM,\n  algorithm\n})\n\nconst initialState = {\n  group: 'Home',\n  algorithm: ''\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_GROUP:\n      return {\n        algorithm: getAlgorithms(action.group, action.gdsVersion)[0],\n        group: action.group\n      }\n    case SELECT_ALGORITHM:\n      return {\n        ...state,\n        algorithm: action.algorithm\n      }\n    default:\n      return state\n  }\n}\n","const NAME = 'connection'\n\nexport const SET_STATUS = `${NAME}/SET_STATUS`\nexport const SET_CREDENTIALS = `${NAME}/SET_CREDENTIALS`\nexport const SET_CONNECTED = `${NAME}/SET_CONNECTED`\nexport const SET_DISCONNECTED = `${NAME}/SET_DISCONNECTED`\n\nexport const INITIAL = 'INITIAL'\nexport const CONNECTING = 'CONNECTING'\nexport const CONNECTED = 'CONNECTED'\nexport const DISCONNECTED = 'DISCONNECTED'\n\nexport const setStatus = status => ({\n  type: SET_STATUS,\n  status\n})\n\nexport const setCredentials = credentials => ({\n  type: SET_CREDENTIALS,\n  credentials\n})\n\nexport const setConnected = credentials => ({\n  type: SET_CONNECTED,\n  credentials\n})\n\nexport const setDisconnected = () => ({\n  type: SET_DISCONNECTED\n})\n\nconst initialState = {\n  status: INITIAL,\n  credentials: null\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_STATUS:\n      return {\n        ...state,\n        status: action.status\n      }\n    case SET_CREDENTIALS:\n      return {\n        ...state,\n        credentials: action.credentials\n      }\n    case SET_CONNECTED:\n      return {\n        status: CONNECTED,\n        credentials: action.credentials\n      }\n    case SET_DISCONNECTED:\n      return {\n        status: DISCONNECTED,\n        credentials: null\n      }\n    default:\n      return state\n  }\n}","const NAME = 'MENU'\nconst SELECT_MENU_ITEM = `${NAME}/SELECT_MENU_ITEM`\n\nexport const selectMenuItem = item => ({\n  type: SELECT_MENU_ITEM,\n  item: item\n})\n\n\nconst initialState = {\n  item: 'Home',\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SELECT_MENU_ITEM:\n      return {\n        item: action.item\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport tasks from './tasks'\nimport algorithms from './algorithms'\nimport metadata from './metadata'\nimport connections from './connection'\nimport settings from './settings'\nimport menu from './menu'\n\nconst reducers = {\n  algorithms,\n  menu,\n  tasks,\n  metadata,\n  connections,\n  settings\n}\n\nexport default combineReducers({ ...reducers })\n","import {runCypher} from \"./stores/neoStore\"\n\nexport const findApocProceduresCypher = `\nSHOW PROCEDURES\nYIELD name\nWHERE name STARTS WITH \"apoc\"\nRETURN count(*) AS count`\n\nexport const checkApocMetaProcedure = \"CALL apoc.meta.schema() YIELD value RETURN count(*) AS count\";\n\nexport const checkApocInstalled = () => {\n  return runCypher(findApocProceduresCypher)\n      .then(result => (parseResultStream(result)))\n      .catch(handleException)\n}\n\nexport const checkApocMetaProcedureAvailable = () => {\n  return runCypher(checkApocMetaProcedure)\n      .then(result => true)\n      .catch(error => false)\n}\n\nexport const findGraphAlgosProceduresCypher = `SHOW PROCEDURES\nYIELD name\nWHERE name STARTS WITH \"gds\"\nRETURN count(*) AS count`\n\nexport const checkGraphAlgorithmsInstalled = () => {\n  return runCypher(findGraphAlgosProceduresCypher)\n    .then(result => (parseResultStream(result)))\n    .catch(handleException)\n}\n\nconst handleException = error => {\n  console.error(error)\n  throw new Error(error)\n}\n\nexport const parseResultStream = result => {\n  if (result.records) {\n    return result.records[0].get(\"count\").toNumber() > 0\n  } else {\n    return false;\n  }\n}\n","export default {\n\tenv: window.location.href.indexOf(\"neuler.graphapp.io\") > -1 ? \"prod\" : \"dev\",\n\tmixpanelId: {\n\t\tdev: \"e71d493fc40289f04b92ba09c751d698\",\n\t\tprod: \"c4488ddf14af6efe91014e60cecef01e\"\n\t},\n\tdefaultLimit: 42,\n\tdefaultCommunityNodeLimit: 10,\n\tversion: \"0.1.57\"\n}\n","import constants from \"../../constants\";\n\nconst mixpanel = require('mixpanel-browser');\nconst env = constants.env;\nmixpanel.init(constants.mixpanelId[env]);\n\nexport const sendMetrics = (category, label, data = {}) => {\n    // console.log(category, label, data)\n    if (!!window.neo4jDesktopApi) {\n        window.neo4jDesktopApi.sendMetrics(category, label, data)\n    } else {\n        if (mixpanel && mixpanel.track) {\n            const eventName = `NEULER_${category}_${label}`\n            // console.log(eventName, data)\n            mixpanel.track(eventName, {...data});\n        }\n    }\n}\n","import {Divider, Icon, Image, List, Popup, Table} from \"semantic-ui-react\"\nimport React from \"react\"\nimport {connect} from \"react-redux\"\nimport {NavLink} from \"react-router-dom\";\nimport constants from \"../constants\";\nimport {setDisconnected} from \"../ducks/connection\";\n\n\nconst navStyle = {\n    padding: \"11px\"\n}\n\nconst url = new URL(window.location.href)\nexport const publicPathTo = (append) => {\n    if (url.protocol.includes('http')) return `/${append}`\n    return `${url.protocol}//${url.pathname.split('/dist/')[0]}/dist/${append}`\n}\n\nconst AlgorithmsGroupMenu = ({metadata, setDatasetsActive, credentials, setDisconnected}) =>\n    <header\n        style={{display: \"flex\", justifyContent: \"space-between\", background: \"#000\", color: \"#fff\", height: \"37px\"}}>\n        <div style={{display: \"flex\"}}>\n            <Image src={publicPathTo(\"images/noun_Sandbox Toys_1207953.png\")} style={{height: \"37px\"}}/>\n            <span style={{padding: \"10px 0 10px 0\"}}>NEuler</span>\n        </div>\n        <div style={navStyle}>\n            <nav>\n                <NavLink exact={true} activeClassName=\"selected\" to=\"/\">Home</NavLink>\n                <NavLink activeClassName=\"selected\" to=\"/algorithms\">Run Single Algorithm</NavLink>\n                <NavLink activeClassName=\"selected\" to=\"/recipes\">Run Algorithm Recipe</NavLink>\n            </nav>\n        </div>\n        <div style={navStyle}>\n            <nav>\n\n                <Popup trigger={<Icon name=\"setting\" size=\"large\"/>} flowing hoverable className=\"about-menu\">\n                    <List>\n                        <List.Item className=\"connection-list-item\">\n                            <List className=\"connection\">\n                                <List.Item className=\"connection-item\">\n                                    <label>Username</label>\n                                    <span>{credentials.username}</span>\n                                </List.Item>\n                                <List.Item className=\"connection-item\">\n                                    <label>Server</label>\n                                    <span>{credentials.host}</span>\n                                </List.Item>\n                                <List.Item className=\"connection-item\">\n                                    <label>Database</label>\n                                    <span>{metadata.activeDatabase}</span>\n                                </List.Item>\n                            </List>\n                            <div className=\"configure-database\">\n                                <NavLink to=\"/database\">Configure Database</NavLink>\n                            </div>\n                        </List.Item>\n\n\n                        <Divider/>\n                        <List.Item>\n                            <List className=\"connection\">\n                                <List.Item className=\"connection-item\">\n                                    <label>NEuler</label>\n                                    <span>{constants.version}</span>\n                                </List.Item>\n                                <List.Item className=\"connection-item\">\n                                    <label>GDSL</label>\n                                    <span>{metadata.versions.gdsVersion}</span>\n                                </List.Item>\n                                <List.Item className=\"connection-item\">\n                                    <label>Neo4j Server</label>\n                                    <span>{metadata.versions.neo4jVersion}</span>\n                                </List.Item>\n                            </List>\n\n                        </List.Item>\n\n                        <Divider/>\n\n                        <List.Item as='a' onClick={() => setDatasetsActive(true)} className=\"about-menu\">\n                            <Image size=\"mini\" src={publicPathTo(\"images/noun_Import Database_281767.png\")}/>\n                            <List.Content>\n                                <List.Header as=\"a\">Sample Graphs</List.Header>\n                            </List.Content>\n                        </List.Item>\n\n                        <List.Item as='a' onClick={() => setDisconnected()} className=\"about-menu\">\n                            <Image size=\"mini\" src={publicPathTo(\"images/noun_sign out_1157133.png\")}/>\n                            <List.Content>\n                                <List.Header as=\"a\">Sign Out</List.Header>\n                            </List.Content>\n                        </List.Item>\n\n                    </List>\n                </Popup>\n\n            </nav>\n        </div>\n    </header>\n\nconst mapStateToProps = state => ({\n    activeAlgorithm: state.algorithms.algorithm,\n    activeMenuItem: state.menu.item,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setDisconnected: () => dispatch(setDisconnected()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlgorithmsGroupMenu)\n","import React, {useState} from 'react'\nimport {Form, Image, Message, Segment} from \"semantic-ui-react\"\n\nimport {checkGraphAlgorithmsInstalled, findGraphAlgosProceduresCypher} from \"../services/installation\"\nimport {sendMetrics} from \"./metrics/sendMetrics\";\nimport {publicPathTo} from \"./AlgorithmGroupsMenu\";\n\n\nconst CheckGraphAlgorithmsInstalled = (props) => {\n    const libraryName = \"gds\";\n    const [checkComplete, setCheckComplete] = useState(false)\n    const [algorithmsInstalled, setAlgorithmsInstalled] = useState(true)\n\n    React.useEffect(() => {\n        let isSubscribed = true\n        checkGraphAlgorithmsInstalled().then(result => {\n            if(isSubscribed) {\n                if (!result) {\n                    sendMetrics(\"neuler-connected\", \"missing-dependency\", {library: libraryName})\n                    props.didNotFindPlugin(libraryName);\n                    setCheckComplete(true)\n                } else {\n                    props.gdsInstalled();\n                    setCheckComplete(true)\n                }\n\n                setAlgorithmsInstalled(result)\n            }\n        });\n\n        return () => isSubscribed = false\n    }, [libraryName])\n\n    if (!checkComplete) {\n        return <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"Checking GDS Library Installation\"/>\n            <Segment attached={true}>\n                We are checking whether the library is installed by running the following query:\n                <pre>\n                        {findGraphAlgosProceduresCypher};\n                    </pre>\n            </Segment>\n        </div>\n    }\n\n\n    if (!algorithmsInstalled) {\n        return <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"Graph Data Science Library Missing\"/>\n            {props.desktop ? <MissingLibraryOnDesktop /> : <MissingLibraryOnWebapp />}\n\n        </div>\n    }\n\n    return <div className=\"loading-container\">\n        <Message color=\"grey\" attached={true} header=\"GDS Library Installed\"/>\n        <Message color=\"grey\" attached={true}  align=\"center\" className=\"loading-message\" >\n            <Message.Content>\n                <p>\n                    The GDS Library is installed on this Neo4j Server. Proceeding to the next step.\n                </p>\n            </Message.Content>\n        </Message>\n    </div>\n\n}\n\nconst MissingLibraryOnDesktop = () => {\n    return <React.Fragment>\n        <Form className='attached fluid segment'>\n            <div align=\"center\" className='attached fluid segment'>\n                <Image src= {publicPathTo(\"images/gds-plugin.png\")}  />\n            </div>\n        </Form>\n        <Message color=\"grey\" attached={true} align=\"center\" className=\"loading-message\">\n            <Message.Content>\n                <p>\n                    This application relies on the Graph Data Science Library.\n                    <br/>You can install it via the 'Plugins' tab of your database.\n                </p>\n            </Message.Content>\n        </Message>\n\n        <Segment attached={true}>\n            We check whether the library is installed by running the following query:\n            <pre>\n                        {findGraphAlgosProceduresCypher};\n                    </pre>\n        </Segment>\n    </React.Fragment>\n}\n\nconst MissingLibraryOnWebapp = () => {\n    return <React.Fragment>\n        <Message color=\"grey\" attached={true} align=\"center\" className=\"loading-message\">\n            <Message.Content>\n                <p>\n                    This application relies on the Graph Data Science Library.\n                    <br/>You can find installation instructions at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://neo4j.com/docs/graph-data-science/current/installation/\">neo4j.com/docs/graph-data-science/current/installation</a>\n                </p>\n            </Message.Content>\n        </Message>\n    </React.Fragment>\n}\n\nexport default CheckGraphAlgorithmsInstalled\n","import React, {useState} from 'react'\nimport {Form, Image, Loader, Message, Segment} from \"semantic-ui-react\"\n\nimport {\n    checkApocInstalled,\n    checkApocMetaProcedure,\n    checkApocMetaProcedureAvailable,\n    findApocProceduresCypher\n} from \"../services/installation\"\nimport {sendMetrics} from \"./metrics/sendMetrics\";\nimport Clipboard from \"react-clipboard.js\";\nimport {publicPathTo} from \"./AlgorithmGroupsMenu\";\n\n\nconst CheckGraphAlgorithmsInstalled = (props) => {\n    const [checkComplete, setCheckComplete] = useState(false)\n    const [pluginInstalled, setPluginInstalled] = useState(false)\n    const [metaAvailable, setMetaAvailable] = useState(false)\n    const libraryName = \"apoc\";\n\n    React.useEffect(() => {\n        let isSubscribed = true\n        checkApocInstalled().then(apocInstalled => {\n\n            if (isSubscribed) {\n                if (!apocInstalled) {\n                    sendMetrics(\"neuler-connected\", \"missing-dependency\", {library: libraryName})\n                    props.didNotFindPlugin(libraryName);\n                    setPluginInstalled(false)\n                    setCheckComplete(true)\n                } else {\n                    setPluginInstalled(true)\n                    checkApocMetaProcedureAvailable().then(apocMetaProcedureAvailable => {\n                        if (isSubscribed) {\n                            if (!apocMetaProcedureAvailable) {\n                                sendMetrics(\"neuler-connected\", \"missing-dependency\", {\n                                    library: libraryName,\n                                    description: \"apoc.meta.nodeTypeProperties is unavailable\"\n                                })\n                                props.didNotFindPlugin(libraryName);\n                            } else {\n                                props.apocInstalled();\n                            }\n\n                            setCheckComplete(true)\n                            setMetaAvailable(apocMetaProcedureAvailable)\n                        }\n                    })\n                }\n            }\n        });\n\n        return () => isSubscribed = false\n    }, [libraryName])\n\n    if (!checkComplete) {\n        return <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"Checking APOC Library Installation\"/>\n            <Segment attached={true}>\n                We are checking whether the library is installed by running the following queries:\n                <pre>\n                        {findApocProceduresCypher};\n                    </pre>\n                <pre>\n                        {checkApocMetaProcedure};\n                    </pre>\n            </Segment>\n        </div>\n    }\n\n    if (!pluginInstalled) {\n        return <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"APOC Library Missing\"/>\n            {props.desktop ? <MissingLibraryOnDesktop/> : <MissingLibraryOnWebapp/>}\n\n            <Segment attached={true}>\n                    We check whether the library is installed by running the following queries:\n                    <pre>\n                        {findApocProceduresCypher};\n                    </pre>\n                <pre>\n                        {checkApocMetaProcedure};\n                    </pre>\n            </Segment>\n        </div>\n    }\n\n    if(!metaAvailable) {\n        return <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"APOC Metadata Procedure Unavailable\"/>\n            <MetaUnavailable />\n        </div>\n    }\n\n    return <div className=\"loading-container\">\n        <Message color=\"grey\" attached={true} header=\"APOC Library Installed\"/>\n        <Message color=\"grey\" attached={true}  align=\"center\" className=\"loading-message\" >\n            <Message.Content>\n                <p>\n                    The APOC Library is installed on this Neo4j Server. Proceeding to the next step.\n                </p>\n            </Message.Content>\n        </Message>\n    </div>\n\n}\n\nconst MissingLibraryOnDesktop = () => {\n    return <React.Fragment>\n        <Form className='attached fluid segment'>\n            <div align=\"center\" className='attached fluid segment'>\n                <Image  src= {publicPathTo(\"images/apoc-plugin.png\")}/>\n            </div>\n        </Form>\n\n        <Message color=\"grey\" attached={true}  align=\"center\" className=\"loading-message\" >\n            <Message.Content>\n                <p>\n                    This application relies on the APOC Library.\n                    <br/>You can install it via the 'Plugins' tab of your database.\n                </p>\n            </Message.Content>\n        </Message>\n    </React.Fragment>\n}\n\nconst MissingLibraryOnWebapp = () => {\n    return <React.Fragment>\n        <Message color=\"grey\" attached={true}  align=\"center\" className=\"loading-message\" >\n            <Message.Content>\n                <p>\n                    This application relies on the APOC Library.\n                    <br/>You can find installation instructions at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://neo4j.com/labs/apoc/4.1/installation/\">neo4j.com/labs/apoc/4.1/installation</a>\n                </p>\n            </Message.Content>\n        </Message>\n    </React.Fragment>\n}\n\nconst MetaUnavailable = () => {\n    const sandboxSetting = \"dbms.security.procedures.unrestricted=,jwt.security.*,gds.*,apoc.*\"\n    return <React.Fragment>\n        <Message color=\"grey\" attached={true}  align=\"center\"  >\n            <Message.Content>\n                <p>\n                    This application uses the <i>apoc.meta.schema</i> procedure, which is currently unavailable because it is sandboxed and has dependencies outside of the sandbox. Sandboxing is controlled by the <i>dbms.security.procedures.unrestricted setting</i>.\n                </p>\n                <p>You can add the following entry to your Neo4j configuration file to allow access:\n                </p>\n                <Message>\n                    <pre>\n                        {sandboxSetting}\n                    </pre>\n                    <Clipboard onSuccess={(event) => {\n                        event.trigger.textContent = \"Copied\";\n                        setTimeout(() => {\n                            event.trigger.textContent = 'Copy';\n                        }, 2000);\n                    }}\n                               button-className=\"code\"\n                               data-clipboard-text={sandboxSetting}>\n                        Copy\n                    </Clipboard>\n                </Message>\n\n            </Message.Content>\n        </Message>\n    </React.Fragment>\n}\n\nexport default CheckGraphAlgorithmsInstalled\n","import {extractMainVersion, runCypher, runCypherSystemDatabase} from \"./stores/neoStore\"\n\nexport const loadLabels = () => {\n  return runCypher(\"CALL db.labels()\", {})\n    .then(parseLabelsResultStream)\n    .catch(handleException)\n}\n\nexport const loadRelationshipTypes = () => {\n  return runCypher(`CALL db.relationshipTypes() \nYIELD relationshipType\nRETURN relationshipType\nORDER BY relationshipType`, {})\n    .then(parseRelTypesResultStream)\n    .catch(handleException)\n}\n\nexport const loadPropertyKeys = () => {\n  return runCypher(`call db.propertyKeys()\nYIELD propertyKey\nRETURN propertyKey\nORDER BY propertyKey`, {})\n    .then(parsePropertyKeysResultStream)\n    .catch(handleException)\n}\n\nexport const loadNodePropertyKeys = () => {\n  return runCypher(`CALL apoc.meta.schema({maxRels: 0})\nYIELD value\nUNWIND keys(value) AS key\nWITH key, value \nWHERE value[key].type = \"node\"\nRETURN key AS label, keys(value[key].properties) AS propertyKeys`, {})\n      .then(parseNodePropertyKeysResultStream)\n      .catch(handleException)\n}\n\nexport const loadRelPropertyKeys = () => {\n  return runCypher(`CALL apoc.meta.schema({maxRels: 0})\n  YIELD value\n  UNWIND keys(value) AS key\n  WITH key, value \n  WHERE value[key].type = \"relationship\"\n  UNWIND keys(value[key].properties) AS propertyKey\n  RETURN distinct propertyKey\n  ORDER BY propertyKey\n  `, {})\n      .then(parsePropertyKeysResultStream)\n      .catch(handleException)\n}\n\nexport const loadVersions = () => {\n  return runCypher(`CALL dbms.components() \nYIELD versions\nUNWIND versions as version \nRETURN version AS neo4jVersion, gds.version() AS gdsVersion\nLIMIT 1`, {})\n    .then(parseGdsVersionResultStream)\n    .catch(handleException)\n}\n\nexport const loadDatabases = (neo4jVersion) => {\n  const version = extractMainVersion(neo4jVersion)\n\n  if(version >= 4) {\n    return runCypherSystemDatabase(`SHOW DATABASES`)\n      .then(parseDatabasesResultStream)\n      .catch(handleException)\n  } else {\n    return Promise.resolve([{name: \"neo4j\", default: true}]);\n  }\n}\n\nexport const loadMetadata = (neo4jVersion) => {\n  return loadDatabases(neo4jVersion).then(databases => {\n    return loadLabels().then(labels => {\n      return loadRelationshipTypes().then(relationships => {\n        return loadPropertyKeys().then(propertyKeys => {\n          return loadRelPropertyKeys().then(relPropertyKeys => {\n            return loadNodePropertyKeys().then(nodePropertyKeys => ({\n              labels, relationships, propertyKeys, nodePropertyKeys, databases, relPropertyKeys\n            }))\n          })\n        })\n      })\n    })\n  })\n};\n\nconst parseLabelsResultStream = result => {\n  if (result.records) {\n    return result.records.map(record => {\n      return {\n        label: record.get(\"label\")\n      }\n    })\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst parseRelTypesResultStream = result => {\n  if (result.records) {\n    return result.records.map(record => {\n      return {\n        label: record.get(\"relationshipType\")\n      }\n    })\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst parseNodePropertyKeysResultStream = result => {\n  if (result.records) {\n    return result.records.reduce((map, record) => {\n      map[record.get(\"label\")] = record.get(\"propertyKeys\")\n      return map;\n    }, {})\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst parsePropertyKeysResultStream = result => {\n  if (result.records) {\n    return result.records.map(record => {\n      return {\n        propertyKey: record.get(\"propertyKey\")\n      }\n    })\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst parseGdsVersionResultStream = result => {\n  if (result.records) {\n    let row = result.records[0];\n    return {gdsVersion: row.get(\"gdsVersion\"), neo4jVersion: row.get(\"neo4jVersion\")}\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst parseDatabasesResultStream = result => {\n  if (result.records) {\n    return result.records.filter(record => record.get(\"name\") !== \"system\").map(record => {\n      return {\n        name: record.get(\"name\"),\n        default: record.get(\"default\"),\n      }\n    })\n  } else {\n    console.error(result.error)\n    throw new Error(result.error)\n  }\n}\n\nconst handleException = error => {\n  console.error(error)\n  throw new Error(error)\n}\n","import {loadMetadata, loadVersions} from \"../../services/metadata\";\nimport {sendMetrics} from \"../metrics/sendMetrics\";\nimport {onNeo4jVersion} from \"../../services/stores/neoStore\";\nimport {selectCaption, selectRandomColor} from \"../NodeLabel\";\nimport constants from \"../../constants\";\n\nexport const ALL_DONE = \"all-done\";\nexport const CONNECTING_TO_DATABASE = \"connect-server\";\nexport const SELECT_DATABASE = \"select-database\";\nexport const CHECKING_GDS_PLUGIN = \"gds\";\nexport const CHECKING_APOC_PLUGIN = \"apoc\";\nexport const steps = [\n    CONNECTING_TO_DATABASE, CHECKING_GDS_PLUGIN, CHECKING_APOC_PLUGIN, ALL_DONE\n]\n\nexport const webAppSteps = [\n    CONNECTING_TO_DATABASE,  CHECKING_GDS_PLUGIN, CHECKING_APOC_PLUGIN, SELECT_DATABASE, ALL_DONE\n]\n\nexport const setLimitDefaults = (props) => {\n    props.updateLimit(constants.defaultLimit)\n    props.updateCommunityNodeLimit(constants.defaultCommunityNodeLimit)\n}\n\nexport const refreshMetadata = (props, firstConnection = false, finished = () => {}) => {\n    return loadVersions().then(versions => {\n        if(firstConnection) {\n            sendMetrics(\"neuler-connected\", true, versions)\n        }\n\n        props.setGds(versions)\n        onNeo4jVersion(versions.neo4jVersion)\n\n        return loadMetadata(versions.neo4jVersion).then(metadata => {\n            updateMetadata(props, metadata, (props.metadata.activeDatabase || \"neo4j\"))\n            finished(versions)\n            return Promise.resolve(metadata)\n        })\n\n    });\n}\n\nexport const updateMetadata = (props, metadata, selectedDatabase) => {\n    props.setLabels(metadata.labels)\n    props.setRelationshipTypes(metadata.relationships)\n    props.setPropertyKeys(metadata.propertyKeys)\n    props.setRelPropertyKeys(metadata.relPropertyKeys)\n    props.setNodePropertyKeys(metadata.nodePropertyKeys)\n    props.setDatabases(metadata.databases)\n\n    metadata.databases.forEach(database => {\n        props.addDatabase(database.name)\n    })\n\n    metadata.labels.forEach(label => {\n        props.initLabel(selectedDatabase, label.label, selectRandomColor(), selectCaption(metadata.nodePropertyKeys[label.label]))\n    })\n}\n","import React from \"react\";\n\nexport const Render = ({ if: cond, children }) => {\n  return cond ? React.Children.only(children) : null;\n};","import React from 'react'\nimport {Render} from './Render'\nimport {Button, Divider, Dropdown, Form, Input, Message} from 'semantic-ui-react'\n\nconst defaultUrlComponents = { scheme: \"neo4j\", port: 7687, address: \"localhost\"}\n\nconst schemeOptions = [\n    {key: 'neo4j', value: 'neo4j', text: 'neo4j'},\n    {key: 'neo4j+s', value: 'neo4j+s', text: 'neo4j+s'},\n    {key: 'neo4j+ssc', value: 'neo4j+ssc', text: 'neo4j+ssc'},\n    {key: 'bolt', value: 'bolt', text: 'bolt'},\n    {key: 'bolt+s', value: 'bolt+s', text: 'bolt+s'},\n    {key: 'bolt+ssc', value: 'bolt+ssc', text: 'bolt+ssc'},\n]\n\nexport const extractComponents = (url) => {\n    // http://localhost:3000/?username=training&url=localhost&accessToken=training\n    // http://localhost:3000/?username=movies&url=neo4j://demo.neo4jlabs.com&accessToken=movies\n    // http://localhost:3000?url=bolt://100.25.221.22:41382&username=neo4j&accessToken=headquarters-ampere-jewel\n\n    if (!url) {\n        return defaultUrlComponents\n    }\n\n    let [scheme, theRest] = url.split(\"://\")\n    if (!scheme) {\n        return defaultUrlComponents\n    }\n\n    if (!schemeOptions.map(option => option.key).includes(scheme)) {\n        scheme = \"neo4j\"\n    }\n\n    if (!theRest) {\n        theRest = \"localhost:7687\"\n    }\n\n    const urlParts = theRest.split(\":\");\n    if (urlParts.length > 1) {\n        return {scheme: scheme, port: parseInt(urlParts[urlParts.length - 1]), address: urlParts[0]}\n    } else {\n        return {scheme: scheme, address: urlParts[0], port: 7687}\n    }\n}\n\nconst ConnectForm = (props) => {\n    const {errorMsg, extraErrorMessage, clearErrorMessages} = props\n    const [username, setUsername] = React.useState(\"neo4j\")\n    const [password, setPassword] = React.useState(\"\")\n    const [scheme, setScheme] = React.useState(\"neo4j\")\n    const [address, setAddress] = React.useState(\"localhost\")\n    const [port, setPort] = React.useState(7687)\n\n    const [rawServerAddress, setRawServerAddress] = React.useState(false)\n    const [rawBoltUri, setRawBoltUri] = React.useState(\"neo4j://localhost:7687\")\n\n    const updateComponentsFromRaw = () => {\n        const components = extractComponents(rawBoltUri)\n        setScheme(components.scheme)\n        setPort(components.port)\n        setAddress(components.address)\n    }\n\n    const updateRawFromComponents = () => {\n        setRawBoltUri(`${scheme}://${address}:${port}`)\n    }\n\n    const onSubmit = () => {\n        const boltUri = rawServerAddress ? rawBoltUri : `${scheme}://${address}:${port}`\n\n        let [theScheme] = boltUri.split(\"://\")\n        if(!schemeOptions.map(value => value.key).includes(theScheme)) {\n            props.hasError()\n            props.setErrorMessage(\"Could not get a connection! Unknown scheme: \" + theScheme + \". \")\n            props.setExtraErrorMessage(\"Valid schemes are: \" + schemeOptions.map(value => value.key))\n        } else {\n            props.onSubmit(boltUri, username, password)\n        }\n\n    };\n\n    React.useEffect(() => {\n        setUsername(props.queryParameters.username || \"neo4j\")\n        setPassword(props.queryParameters.accessToken || \"\")\n\n        const {scheme, port, address} = extractComponents(props.queryParameters.url)\n        setScheme(scheme)\n        setPort(port)\n        setAddress(address)\n\n    }, [props.queryParameters])\n\n\n    return (\n        <div className=\"loading-container\">\n            <Message color=\"grey\" attached={true} header=\"Connect to Neo4j Server\"/>\n            <Form error={!!errorMsg} onSubmit={onSubmit} className='attached fluid segment'>\n                <Form.Field>\n                    <label>Server Address</label>\n                    <Form.Field inline>\n                        {!rawServerAddress && <React.Fragment>\n                            <Dropdown style={{minWidth: \"7em\"}}\n                                  selection search value={scheme}\n                                  options={schemeOptions}\n                                  onChange={(_, {value}) => {\n                                      clearErrorMessages()\n                                      setScheme(value)\n                                  }}\n                                  onClick={clearErrorMessages}\n                        />\n                        <p style={{margin: \"0 .85714286em 0 0\"}}>://</p>\n                        <Input style={{margin: \"0 .85714286em 0 0\"}}\n                               value={address}\n                               name='address'\n                               onChange={(_, {value}) => {\n                                   clearErrorMessages()\n                                   setAddress(value)\n                               }}\n                               onClick={clearErrorMessages}\n                               placeholder='Server Address'\n                        />\n                        <p style={{margin: \"0 .85714286em 0 0\"}}>:</p>\n                        <Input style={{width: \"7em\", minWidth: \"7em\", marginRight: \"1em\"}}\n                               value={port}\n                               type=\"number\"\n                               name='port'\n                               onChange={(_, {value}) => {\n                                   setPort(value)\n                                   clearErrorMessages()\n                               }}\n                               onClick={clearErrorMessages}\n                               placeholder='Port'\n                        />\n                        </React.Fragment>}\n\n                        {rawServerAddress &&\n                        <Input style={{width: \"31.45rem\"}}\n                            value={rawBoltUri}\n                            name='boltUri'\n                            onChange={(_, {value}) => {\n                                clearErrorMessages()\n                                setRawBoltUri(value)\n                            }}\n                            onClick={clearErrorMessages}\n                            placeholder='Bolt URI'\n                        />\n                        }\n                        <div className=\"ui input\">\n                        <a href=\"#\" onClick={() => {\n                            clearErrorMessages()\n                            setRawServerAddress(!rawServerAddress)\n                            if(rawServerAddress) {\n                                updateComponentsFromRaw()\n                            } else {\n                                updateRawFromComponents()\n                            }\n                        }}>{!rawServerAddress ? \"Raw\" : \"Structured\"}</a>\n                        </div>\n\n                    </Form.Field>\n\n\n                </Form.Field>\n\n                <Form.Field>\n                    <label>Username</label>\n                    <Input\n                        value={username}\n                        name='username'\n                        onChange={(_, {value}) => {\n                            clearErrorMessages()\n                            setUsername(value)\n                        }}\n                        onClick={clearErrorMessages}\n                        placeholder='Username'\n                    />\n                </Form.Field>\n                <Form.Field>\n                    <label>Password</label>\n                    <Input\n                        value={password}\n                        name='password'\n                        onChange={(_, {value}) => {\n                            clearErrorMessages()\n                            setPassword(value)\n                        }}\n                        onClick={clearErrorMessages}\n                        type='password'\n                        placeholder='Password'\n                    />\n                </Form.Field>\n                <Render if={errorMsg}>\n                    <Message error>\n                        <Message.Header>\n                            Error connecting to {scheme}://{address}:{port}\n                        </Message.Header>\n                        <Message.Content>\n                            {errorMsg}\n                        </Message.Content>\n                        <Divider/>\n                        <Message.Content style={{fontStyle: \"italic\"}}>\n                            <p>\n                                {extraErrorMessage}\n                            </p>\n                        </Message.Content>\n                    </Message>\n                </Render>\n                <Divider/>\n                <Button\n                    onClick={() => {\n                        clearErrorMessages()\n                        onSubmit()\n                    }}\n                    positive\n                    icon='right arrow'\n                    labelPosition='right'\n                    content='Connect'\n                />\n            </Form>\n\n        </div>\n    )\n\n}\n\nexport const ConnectModal = (props) => {\n    const [initial, setInitial] = React.useState(true)\n    const onSubmit = (boltUri, username, password) => {\n        setInitial(false)\n        props.onSubmit(boltUri, username, password)\n    };\n\n    const errorMsg = initial ? false : props.errorMsg\n    return (\n        <ConnectForm\n            onSubmit={onSubmit}\n            hasError={() => setInitial(false)}\n            setErrorMessage={props.setErrorMessage}\n            queryParameters={props.queryParameters}\n            errorMsg={errorMsg}\n            extraErrorMessage={props.extraErrorMessage}\n            setExtraErrorMessage={props.setExtraErrorMessage}\n            clearErrorMessages={props.clearErrorMessages}\n        />\n    )\n}\n","export const getActiveProject = (context = {}) => {\n    if (!context) return null;\n    const { projects } = context;\n    if (!Array.isArray(projects)) return null;\n    const activeProject = projects.find(project => {\n      if (!project) return false;\n      if (!(project.graphs && Array.isArray(project.graphs))) return false;\n      return project.graphs.find(({ status }) => status === \"ACTIVE\");\n    });\n    return activeProject || null;\n  };\n\nexport const getCredentials = (type, connection) => {\n  if (!connection) return null;\n  const { configuration = null } = connection;\n  if (\n    !(\n      configuration &&\n      configuration.constructor &&\n      configuration.constructor === Object\n    )\n  ) {\n    return null;\n  }\n  if (\n    !(\n      configuration.protocols &&\n      configuration.protocols.constructor &&\n      configuration.protocols.constructor === Object\n    )\n  ) {\n    return null;\n  }\n  if (typeof configuration.protocols[type] === \"undefined\") {\n    return null;\n  }\n  return configuration.protocols[type];\n};\n\nexport const getActiveGraph = (context = {}) => {\n  const activeProject = getActiveProject(context);\n  if (!activeProject) return null;\n  return activeProject.graphs.find(({ status }) => status === \"ACTIVE\");\n};\n\nexport const getActiveCredentials = (type, context) => {\n  const activeGraph = getActiveGraph(context);\n  if (!activeGraph || typeof activeGraph.connection === \"undefined\")\n    return null;\n  const creds = getCredentials(type, activeGraph.connection);\n  return creds || null;\n};\n\nexport const getActiveDatabaseCredentials = (context) => {\n  const creds = getActiveCredentials(\"bolt\", context);\n  if (creds) {\n    return {\n      host: creds.url || `bolt://${creds.host}:${creds.port}`,\n      encrypted: creds.tlsLevel === \"REQUIRED\",\n      username: creds.username,\n      password: creds.password,\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const subscribeToDatabaseCredentialsForActiveGraph = (\n  integrationPoint,\n  onNewActiveGraph,\n  onNoActiveGraph\n) => {\n  if (integrationPoint && integrationPoint.getContext) {\n    integrationPoint\n      .getContext()\n      .then((context) => {\n        const credentials = getActiveDatabaseCredentials(context);\n        const activeProject = getActiveProject(context);\n        const activeGraph = getActiveGraph(context);\n        if (credentials) {\n          onNewActiveGraph(\n            credentials,\n            { name: activeProject.name, id: activeProject.id },\n            {\n              name: activeGraph.name,\n              id: activeGraph.id,\n              description: activeGraph.description,\n            }\n          );\n        } else {\n          onNoActiveGraph();\n        }\n      })\n      .catch((e) => {}); // Catch but don't bother\n    integrationPoint.onContextUpdate((event, newContext, oldContext) => {\n      switch (event.type) {\n        case \"GRAPH_ACTIVE\":\n          const credentials = getActiveDatabaseCredentials(newContext);\n          const activeProject = getActiveProject(newContext);\n          const activeGraph = getActiveGraph(newContext);\n          if (credentials) {\n            onNewActiveGraph(\n              credentials,\n              { name: activeProject.name, id: activeProject.id },\n              {\n                name: activeGraph.name,\n                id: activeGraph.id,\n                description: activeGraph.description,\n              }\n            );\n          } else {\n            onNoActiveGraph();\n          }\n          break;\n        case \"GRAPH_INACTIVE\":\n          onNoActiveGraph();\n          break;\n        default:\n          break;\n      }\n    });\n  }\n};\n","import {subscribeToDatabaseCredentialsForActiveGraph} from './graph-app-kit/helpers'\nimport {\n    extractMainVersion,\n    onDisconnected,\n    onNewConnection,\n    runCypherDefaultDatabase,\n    runCypherSystemDatabase\n} from \"./stores/neoStore\"\n\nexport const initializeDesktopConnection = (setConnected, setDisconnected, onError, setActiveProject, setActiveGraph, noActiveGraph) => {\n    if (window.neo4jDesktopApi) {\n        subscribeToDatabaseCredentialsForActiveGraph(window.neo4jDesktopApi,\n            (credentials, activeProject, activeGraph) => {\n                setActiveProject(activeProject.name)\n                setActiveGraph(activeGraph.name)\n                onNewConnection(credentials).then(version => {\n                    setConnected(credentials)\n                })\n            },\n            () => {\n                setDisconnected()\n                noActiveGraph()\n                onDisconnected()\n            }\n        )\n        window.neo4jDesktopApi.showMenuOnRightClick && window.neo4jDesktopApi.showMenuOnRightClick(false)\n    }\n}\n\nexport const tryConnect = credentials => {\n    return onNewConnection(credentials).then(version => {\n        const mainVersion = extractMainVersion(version)\n        if (mainVersion < 4) {\n            return runCypherDefaultDatabase(\"RETURN 1\")\n        } else {\n            return runCypherSystemDatabase(\"show databases\")\n        }\n    })\n\n}","import {Button, Message, Table} from \"semantic-ui-react\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport NodeLabel from \"../NodeLabel\";\n\n\nconst SelectedDatabase = ({metadata, onRefresh}) => {\n    return <div>\n        <Message color=\"grey\" style={{color: \"#000000\"}}>\n            <Message.Header>\n                Database Contents\n            </Message.Header>\n            <Message.Content>\n                <Table basic='very' celled collapsing>\n                    <Table.Body>\n                        <Table.Row>\n                            <Table.Cell style={{width: \"150px\"}}>Node Labels</Table.Cell>\n                            <Table.Cell style={{display: \"flex\", flexWrap: \"wrap\"}}>{\n                                metadata.labels.map(value => <NodeLabel key={value.label} database={metadata.activeDatabase} labels={[value.label]} caption={value.label} />)\n                            }\n                            </Table.Cell>\n                        </Table.Row>\n                        <Table.Row>\n                            <Table.Cell style={{width: \"150px\"}}>Relationship Types</Table.Cell>\n                            <Table.Cell>{\n                                metadata.relationshipTypes.map(value => <span style={{\"background\": \"#ccc\"}} key={value.label} className=\"label\">{value.label}</span>)\n                            }\n                            </Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n                </Table>\n\n                <Button size=\"tiny\"  className=\"code\" onClick={ (event, data) => {\n                    const target = event.target\n                    target.textContent = \"Refreshing\";\n                    setTimeout( () => {\n                        target.textContent = \"Refresh\";\n                    }, 2000);\n\n                    onRefresh()\n                }}>\n                    Refresh\n                </Button>\n            </Message.Content>\n        </Message>\n    </div>\n}\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata\n})\n\nexport default connect(mapStateToProps)(SelectedDatabase)\n","import {Button, Message} from \"semantic-ui-react\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\n\nconst whatIsMissing = (metadata) => {\n    const hasNodeLabels = metadata.labels.length > 0;\n    const hasRelationshipTypes = metadata.relationshipTypes.length > 0;\n\n    if(!hasNodeLabels && !hasRelationshipTypes) {\n        return \"nodes or relationships\"\n    }\n\n    if(!hasNodeLabels) {\n        return \"nodes\";\n    }\n\n    if(!hasRelationshipTypes) {\n        return \"relationships\"\n    }\n\n    return null\n}\n\nconst WhatIsMissing = ({metadata,  setDatasetsActive}) => {\n    return <div>\n        <Message color='purple'>\n            <Message.Header>\n                Missing: {whatIsMissing(metadata)}.\n            </Message.Header>\n            <Message.Content>\n                <div>\n                    <p>\n                        This database does not contain any {whatIsMissing(metadata)}.\n                        You need to load some data, otherwise the graph algorithms won't return any results.\n                    </p>\n                    <p>\n                        If you don't have any data, you can load one of the sample graphs.\n                    </p>\n\n                    <Button primary onClick={() => setDatasetsActive(true)}>\n                        View Sample Graphs\n                    </Button>\n                </div>\n            </Message.Content>\n        </Message>\n\n    </div>\n}\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata\n})\n\nexport default connect(mapStateToProps)(WhatIsMissing)\n","import {Button, Container, Dropdown, List, Loader, Message} from \"semantic-ui-react\"\nimport React from 'react'\n\nimport {connect} from \"react-redux\";\nimport {\n    setActiveDatabase,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes\n} from \"../ducks/metadata\";\nimport {getActiveDatabase, hasNamedDatabase, onActiveDatabase} from \"../services/stores/neoStore\";\nimport {loadMetadata} from \"../services/metadata\";\nimport {addDatabase, initLabel} from \"../ducks/metadata\";\nimport WhatIsMissing from \"./Onboarding/WhatIsMissing\";\nimport SelectedDatabase from \"./Onboarding/SelectedDatabase\";\nimport {refreshMetadata, updateMetadata} from \"./Startup/startup\";\nimport {OpenCloseSection} from \"./Form/OpenCloseSection\";\n\nexport const hasNodesAndRelationships = (metadata) => {\n    return (metadata.labels.length > 0 && metadata.relationshipTypes.length > 0)\n}\n\nconst SelectDatabase = (props) => {\n    const {setActiveDatabase, metadata} = props\n    const [activeDatabaseSelected, setActiveDatabaseSelected] = React.useState(true)\n\n    const onRefresh = (selectedDatabase) => {\n        setActiveDatabaseSelected(false)\n        loadMetadata(props.metadata.versions.neo4jVersion).then(metadata => {\n            updateMetadata(props, metadata, selectedDatabase)\n            setActiveDatabaseSelected(true)\n        })\n    }\n\n    const containerStyle = {\n        padding: '1em'\n    }\n\n    const credentials = props.connectionInfo.credentials\n\n    const databaseOptions = metadata.databases.map(value => {\n        return {key: value.name, value: value.name, text: (value.name) + (value.default ? \" (default)\" : \"\")};\n    })\n\n\n    return (<div style={containerStyle}>\n            <Container fluid>\n                <OpenCloseSection title=\"Database Connection\">\n\n                    <List className=\"connection update\">\n                        <List.Item className=\"connection-item update\">\n                            <label>Username</label>\n                            <span>{credentials.username}</span>\n                        </List.Item>\n                        <List.Item className=\"connection-item update\">\n                            <label>Server</label>\n                            <span>{credentials.host}</span>\n                        </List.Item>\n                        <List.Item className=\"connection-item update\">\n                            <label>Database</label>\n\n                                <Dropdown compact value={metadata.activeDatabase} placeholder='Database' search selection\n                                          style={{\"width\": \"290px\"}}\n                                          options={databaseOptions} onChange={(evt, data) => {\n                                    if (data.value !== getActiveDatabase()) {\n                                        setActiveDatabase(data.value);\n                                        onActiveDatabase(data.value);\n                                        onRefresh(data.value)\n                                    }\n                                }}/>\n                                {hasNamedDatabase() ?\n                                    <Button icon style={{marginLeft: \"10px\"}} onClick={() => {\n                                        onRefresh(props.metadata.activeDatabase)\n                                    }}>\n                                        Refresh databases\n                                    </Button> : null}\n\n                        </List.Item>\n                    </List>\n\n\n                <div style={{paddingTop: \"10px\"}}>\n                    {\n                        activeDatabaseSelected ?\n                            (hasNodesAndRelationships(props.metadata)) ?\n                                <SelectedDatabase onRefresh={() => onRefresh(props.metadata.activeDatabase)}/> :\n                                <WhatIsMissing setDatasetsActive={props.setDatasetsActive}/>\n                            : <Message>\n                                <Message.Header>Refreshing</Message.Header>\n                                <Message.Content>\n                                    <Loader active inline style={{padding: \"5px 0\"}}/>\n                                </Message.Content>\n                            </Message>\n\n                    }\n\n                </div>\n                </OpenCloseSection>\n            </Container>\n\n        </div>\n\n    )\n\n}\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata,\n    labels: state.metadata.allLabels,\n    connectionInfo: state.connections,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setActiveDatabase: database => dispatch(setActiveDatabase(database)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectDatabase)\n","import {Button, Divider, Dropdown, Form, Loader, Message} from \"semantic-ui-react\";\nimport CheckGraphAlgorithmsInstalled from \"../CheckGraphAlgorithmsInstalled\";\nimport CheckAPOCInstalled from \"../CheckAPOCInstalled\";\nimport React from \"react\";\nimport {\n    ALL_DONE,\n    CHECKING_APOC_PLUGIN,\n    CHECKING_GDS_PLUGIN,\n    CONNECTING_TO_DATABASE,\n    refreshMetadata,\n    SELECT_DATABASE,\n    updateMetadata\n} from \"./startup\";\nimport {CONNECTING, DISCONNECTED, INITIAL} from \"../../ducks/connection\";\nimport {ConnectModal} from \"../ConnectModal\";\nimport {tryConnect} from \"../../services/connections\";\nimport {loadDatabases, loadMetadata} from \"../../services/metadata\";\nimport {getActiveDatabase, getNeo4jVersion, onActiveDatabase} from \"../../services/stores/neoStore\";\nimport {\n    addDatabase,\n    initLabel,\n    setActiveDatabase,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"../../ducks/metadata\";\nimport {connect} from \"react-redux\";\nimport {Render} from \"../Render\";\nimport SelectedDatabase from \"../Onboarding/SelectedDatabase\";\nimport {selectAlgorithm, selectGroup} from \"../../ducks/algorithms\";\nimport {hasNodesAndRelationships} from \"../SelectDatabase\";\n\n\nexport const WebAppLoadingArea = ({connectionStatus, isNeo4jDesktop, currentStep, setCurrentStep, setCurrentStepFailed, setConnected, setDisconnected, setCurrentStepInProgress, queryParameters, prepareMetadata}) => {\n    const placeholder = <Loader size='massive'>Checking plugin is installed</Loader>\n\n    const failedCurrentStep = () => {\n        setCurrentStepFailed(true)\n    }\n\n    const gdsInstalled = () => {\n        setCurrentStep(CHECKING_APOC_PLUGIN)\n        setCurrentStepFailed(false)\n    }\n\n    const apocInstalled = () => {\n        setCurrentStep(SELECT_DATABASE)\n        setCurrentStepFailed(false)\n    }\n\n    switch (currentStep) {\n        case CONNECTING_TO_DATABASE:\n            return <ConnectingToDatabase connectionStatus={connectionStatus} setCurrentStep={setCurrentStep} setCurrentStepFailed={setCurrentStepFailed}\n                                         setCurrentStepInProgress={setCurrentStepInProgress}\n                                         setConnected={setConnected} setDisconnected={setDisconnected}\n                                         queryParameters={queryParameters}\n                                         prepareMetadata={prepareMetadata}\n            />\n        case CHECKING_GDS_PLUGIN:\n            return <CheckGraphAlgorithmsInstalled didNotFindPlugin={failedCurrentStep} desktop={isNeo4jDesktop}\n                                                  gdsInstalled={gdsInstalled}>\n                {placeholder}\n            </CheckGraphAlgorithmsInstalled>;\n        case CHECKING_APOC_PLUGIN:\n            return <CheckAPOCInstalled didNotFindPlugin={failedCurrentStep} desktop={isNeo4jDesktop}\n                                       apocInstalled={apocInstalled}>\n                {placeholder}\n            </CheckAPOCInstalled>;\n        case SELECT_DATABASE:\n            return <SelectDatabase currentStep={currentStep} setCurrentStep={setCurrentStep} setCurrentStepFailed={setCurrentStepFailed} />\n        case ALL_DONE:\n            return <div className=\"loading-container\">\n                <Message color=\"grey\" attached header=\"Neuler ready to launch\"\n                         content=\"Connected to database and all dependencies found. Neuler will launch shortly\"/>\n            </div>\n        default:\n            return <Message>Unknown State</Message>;\n    }\n}\n\nconst SelectDatabaseForm =(props) => {\n    const {setActiveDatabase, setCurrentStep, setCurrentStepFailed} = props\n\n    const [databases, setDatabases] = React.useState([])\n    const [selectedDatabase, setSelectedDatabase] = React.useState(null)\n    const [loadedDatabases, setLoadedDatabases] = React.useState(false)\n    const [activeDatabaseSelected, setActiveDatabaseSelected] = React.useState(false)\n\n    const [errorMessage, setErrorMessage] = React.useState(null)\n    const errorMessageTemplate = \"No database selected. Pick a database to connect to from the dropdown above.\"\n\n    React.useEffect(() => {\n        loadDatabases(getNeo4jVersion()).then(databases => {\n            setDatabases(databases)\n            setLoadedDatabases(true)\n            if(databases.length === 1) {\n                setSelectedDatabase(databases[0].name)\n            }\n            if(databases.length > 1) {\n                const defaultDatabase = databases.find(database => database.default)\n                if(defaultDatabase) {\n                    setSelectedDatabase(defaultDatabase.name)\n                }\n            }\n        })\n    }, [])\n\n    React.useEffect(() => {\n        const prepareMetadata = async () => {\n            return await refreshMetadata(props, true, (versions) =>  {\n                setActiveDatabaseSelected(true)\n                props.selectGroup(\"Centralities\", versions.gdsVersion)\n                props.selectAlgorithm(\"Degree\")\n            });\n        }\n\n        prepareMetadata()\n    }, [props.connectionInfo])\n\n    const databaseOptions= databases.map(value => {\n        return  {key: value.name, value: value.name, text: (value.name) + (value.default ? \" (default)\" : \"\")};\n    })\n\n    const onSubmit = () => {\n        if(!selectedDatabase) {\n            setErrorMessage(errorMessageTemplate)\n            setCurrentStepFailed(true)\n        } else {\n            setActiveDatabase(selectedDatabase);\n            onActiveDatabase(selectedDatabase);\n            setCurrentStep(ALL_DONE)\n        }\n    }\n\n    const onRefresh = (database) => {\n        setActiveDatabaseSelected(false)\n        loadMetadata(props.metadata.versions.neo4jVersion).then(metadata => {\n            updateMetadata(props, metadata, database || selectedDatabase)\n            setActiveDatabaseSelected(true)\n        })\n    }\n\n    return <div className=\"loading-container\">\n        <Message color=\"grey\" attached={true} header=\"Select database\"/>\n        <Form error={!!errorMessage}  className='attached fluid segment' onSubmit={onSubmit}>\n            {databaseOptions.length > 0 &&\n            <React.Fragment>\n                <Dropdown placeholder='Database' fluid search selection value={selectedDatabase}\n                          style={{\"width\": \"290px\"}}\n                          options={databaseOptions} onChange={(evt, data) => {\n                    if (data.value !== getActiveDatabase()) {\n                        setErrorMessage(null)\n                        setSelectedDatabase(data.value)\n                        setActiveDatabase(data.value);\n                        onActiveDatabase(data.value);\n                        onRefresh(data.value)\n                    }\n                }}/>\n                <Render if={errorMessage}>\n                    <Message error>\n                        <Message.Header>\n                            No database selected\n                        </Message.Header>\n                        <Message.Content>\n                            {errorMessage}\n                        </Message.Content>\n                    </Message>\n                </Render>\n                <Divider/>\n\n                {activeDatabaseSelected ?\n                    (hasNodesAndRelationships(props.metadata)) ?\n                        <div className=\"startup-selectDatabase\">\n                            <SelectedDatabase onRefresh={() => onRefresh()}/>\n                        </div> :\n                        <Message color='purple'>\n                            <Message.Header>\n                                Missing nodes or relationships\n                            </Message.Header>\n                            <Message.Content>\n                                <div>\n                                    <p>\n                                        This database does not contain nodes or relationships.\n                                    </p>\n                                    <p>\n                                        You can import sample datasets once you launch the application.\n                                    </p>\n\n                                </div>\n                            </Message.Content>\n                        </Message>\n\n                    : <Message>\n                        <Message.Header>Refreshing</Message.Header>\n                        <Message.Content>\n                            <Loader active inline style={{padding: \"5px 0\"}}/>\n                        </Message.Content>\n                    </Message>}\n\n                <Button\n                    positive\n                    disabled={!activeDatabaseSelected}\n                    icon='right arrow'\n                    labelPosition='right'\n                    content='Select database'\n                    onClick={onSubmit}\n\n                />\n            </React.Fragment>\n            }\n\n            {loadedDatabases && databaseOptions.length === 0 &&\n            <Message>\n                    <Message.Header>\n                        No databases available\n                    </Message.Header>\n                    <Message.Content>\n                        The selected user does not have permissions to access any databases on this server\n                    </Message.Content>\n                </Message>}\n\n            {!loadedDatabases && <Loader active inline='centered'>Loading</Loader>}\n        </Form>\n\n    </div>\n}\n\nconst SelectDatabase = connect(state => ({\n    metadata: state.metadata,\n    labels: state.metadata.allLabels,\n}), dispatch => ({\n    selectGroup: (group, gdsVersion) => dispatch(selectGroup(group, gdsVersion)),\n    selectAlgorithm: algorithm => dispatch(selectAlgorithm(algorithm)),\n    setActiveDatabase: database => dispatch(setActiveDatabase(database)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setGds: version => dispatch(setVersions(version)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys))\n}))(SelectDatabaseForm)\n\nconst ConnectingToDatabaseForm = ({connectionStatus, setCurrentStep, setConnected, setDisconnected, setCurrentStepFailed, setCurrentStepInProgress, queryParameters, setActiveDatabase, prepareMetadata}) => {\n    const errorMsgTemplate = \"Could not get a connection! Check that you entered the correct credentials and that the database is running.\"\n    const [errorMessage, setErrorMessage] = React.useState(null)\n    const [extraErrorMessage, setExtraErrorMessage] = React.useState(null)\n\n    const tryingToConnect = <div className=\"loading-container\">\n        <Message color=\"grey\" attached header=\"Trying to connect\"\n                 content=\"Trying to connect to active database. This should only take a few seconds. If it takes longer than that, check that you have a running database.\"/>\n    </div>\n\n    switch (connectionStatus) {\n        case INITIAL:\n        case DISCONNECTED:\n            return <ConnectModal\n                key=\"modal\"\n                errorMsg={errorMessage}\n                extraErrorMessage={extraErrorMessage}\n                setErrorMessage={setErrorMessage}\n                setExtraErrorMessage={setExtraErrorMessage}\n                clearErrorMessages={() => {\n                    setErrorMessage(null)\n                    setExtraErrorMessage(null)\n                }}\n                queryParameters={queryParameters}\n                onSubmit={(boltUri, username, password) => {\n                    setCurrentStepInProgress(true)\n                    setErrorMessage(null)\n                    setExtraErrorMessage(null)\n                    const credentials = {host: boltUri, username, password}\n                    tryConnect(credentials)\n                        .then(() => {\n                            setConnected(credentials)\n                            return loadDatabases(getNeo4jVersion());\n                        }).then(databases => {\n                        if (databases.length === 0) {\n                            setCurrentStepFailed(true)\n                        } else {\n                            if (databases.length === 1) {\n                                onActiveDatabase(databases[0].name)\n                                setActiveDatabase(databases[0].name)\n                            } else {\n                                const defaultDatabase = databases.find(database => database.default)\n                                if (defaultDatabase) {\n                                    onActiveDatabase(defaultDatabase.name)\n                                    setActiveDatabase(defaultDatabase.name)\n                                } else {\n                                    const db = databases[Math.floor(Math.random() * databases.length)];\n                                    onActiveDatabase(db)\n                                    setActiveDatabase(db)\n                                }\n                            }\n                            setCurrentStep(CHECKING_GDS_PLUGIN)\n                            setCurrentStepFailed(false)\n                        }\n                    })\n                        .catch((error) => {\n                            setCurrentStepInProgress(false)\n                            setCurrentStepFailed(true)\n                            setDisconnected()\n                            setErrorMessage(errorMsgTemplate)\n                            setExtraErrorMessage(error.message)\n                        })\n                }}\n                show={true}\n            />\n\n        case CONNECTING:\n            return tryingToConnect\n        default:\n            return tryingToConnect\n    }\n}\n\nconst ConnectingToDatabase = connect(() => ({}), dispatch => ({\n    setActiveDatabase: database => dispatch(setActiveDatabase(database)),\n}))(ConnectingToDatabaseForm)\n","import {Icon, Loader} from \"semantic-ui-react\";\nimport React from \"react\";\n\n\nexport const LoadingIcon = ({steps, step, currentStep, currentStepFailed}) => {\n    const currentIndex = steps.indexOf(currentStep)\n    const stepIndex = steps.indexOf(step)\n\n    if (step === currentStep) {\n        return currentStepFailed ?\n            <Icon size=\"big\" name='close' color='red' className=\"loading-icon\"/> :\n            <Loader active inline className=\"loading-icon\" size=\"large\"/>;\n    } else {\n        if (stepIndex > currentIndex) {\n            return <Icon size=\"big\" name='question circle' color='grey' className=\"loading-icon\"/>\n        } else {\n            return <Icon size=\"big\" name='checkmark' color='green' className=\"loading-icon\"/>\n        }\n    }\n}\n\nexport const UserInputLoadingIcon = ({steps, step, currentStep, currentStepFailed, currentStepInProgress}) => {\n    const currentIndex = steps.indexOf(currentStep)\n    const stepIndex = steps.indexOf(step)\n\n    if (step === currentStep) {\n        if(currentStepInProgress) {\n            return <Loader active inline className=\"loading-icon\" size=\"large\"/>;\n        }\n\n        return currentStepFailed ?\n            <Icon size=\"big\" name='close' color='red' className=\"loading-icon\"/> :\n            <Icon size=\"big\" name='keyboard' color='red' className=\"loading-icon\"/>;\n    } else {\n        if (stepIndex > currentIndex) {\n            return <Icon size=\"big\" name='question circle' color='grey' className=\"loading-icon\"/>\n        } else {\n            return <Icon size=\"big\" name='checkmark' color='green' className=\"loading-icon\"/>\n        }\n    }\n}","export const sampleGraphs = {\n  4: {\n    \"Game of Thrones\": {\n      name: \"Game of Thrones\",\n      author: \"Andrew Beveridge\",\n      authorLink: \"https://networkofthrones.wordpress.com/\",\n      description: `A dataset containing interactions between the characters across the first 7 seasons of the popular TV show.`,\n      queries: [\n        `CREATE CONSTRAINT ON (c:Character) ASSERT c.id IS UNIQUE`,\n        `UNWIND range(1,7) AS season\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/got/got-s\" + season + \"-nodes.csv\" AS row\nMERGE (c:Character {id: row.Id})\nON CREATE SET c.name = row.Label`,\n        `UNWIND range(1,7) AS season\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/got/got-s\" + season + \"-edges.csv\" AS row\nMATCH (source:Character {id: row.Source})\nMATCH (target:Character {id: row.Target})\nCALL apoc.merge.relationship(source, \"INTERACTS_SEASON\" + season, {}, {}, target) YIELD rel\nSET rel.weight = toInteger(row.Weight)`,\n      ],\n      algorithms: [\n        {\n          name: \"Page Rank\",\n          category: \"Centralities\",\n          description:\n            \"Find the most influential characters in Westeros and elsewhere.\",\n        },\n        {\n          name: \"Shortest Path\",\n          category: \"Path Finding\",\n          description: \"Who can introduce Jon to Daenerys? Or Sansa to Drogo?\",\n        },\n      ],\n    },\n\n    \"European Roads\": {\n      name: \"European Roads\",\n      author: \"Lasse Westh-Nielsen\",\n      authorLink:\n        \"http://lassewesth.blogspot.com/2018/07/the-international-e-road-network-and.html\",\n      description: `A dataset containing European Roads.`,\n      queries: [\n        `CREATE CONSTRAINT ON (p:Place) ASSERT p.name IS UNIQUE`,\n        `USING PERIODIC COMMIT 1000\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/eroads/roads.csv\"\nAS row\n\nMERGE (origin:Place {name: row.origin_reference_place})\nSET origin.countryCode = row.origin_country_code\n\nMERGE (destination:Place {name: row.destination_reference_place})\nSET destination.countryCode = row.destination_country_code\n\nMERGE (origin)-[eroad:EROAD {road_number: row.road_number}]->(destination)\nSET eroad.distance = toInteger(row.distance), eroad.watercrossing = row.watercrossing`,\n      ],\n      algorithms: [\n        {\n          name: \"Degree\",\n          category: \"Centralities\",\n          description: \"Find the most connected cities on the continent.\",\n        },\n        {\n          name: \"All Pairs Shortest Path\",\n          category: \"Path Finding\",\n          description:\n            \"What's the quickest route between the different European cities.\",\n        },\n      ],\n    },\n    Twitter: {\n      name: \"Twitter\",\n      author: \"Mark Needham\",\n      authorLink: \"https://markhneedham.com/blog/\",\n      description: `A dataset containing Twitter followers of the graph community`,\n      queries: [\n        `CREATE CONSTRAINT ON(u:User) ASSERT u.id IS unique`,\n        `CALL apoc.load.json(\"https://github.com/neo4j-apps/neuler/raw/master/sample-data/twitter/users.json\")\nYIELD value\nMERGE (u:User {id: value.user.id })\nSET u += value.user\nFOREACH (following IN value.following |\n  MERGE (f1:User {id: following})\n  MERGE (u)-[:FOLLOWS]->(f1))\nFOREACH (follower IN value.followers |\n  MERGE(f2:User {id: follower})\n  MERGE (u)<-[:FOLLOWS]-(f2));`,\n      ],\n      algorithms: [\n        {\n          name: \"Page Rank\",\n          category: \"Centralities\",\n          description:\n            \"Find the most influential accounts in the Neo4j twittersphere.\",\n        },\n        {\n          name: \"Strongly Connected Components\",\n          category: \"Community Detection\",\n          description: \"Find groups of people that follow each other.\",\n        },\n      ],\n    },\n\n    Recipes: {\n      name: \"Recipes\",\n      author: \"DBpedia\",\n      authorLink: \"https://wiki.dbpedia.org/\",\n      description: `A dataset containing recipes and their ingredients.`,\n      queries: [\n        `CREATE CONSTRAINT ON (r:Recipe) ASSERT r.name IS UNIQUE`,\n        `CREATE CONSTRAINT ON (i:Ingredient) ASSERT i.name IS UNIQUE`,\n        `USING PERIODIC COMMIT 1000\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/recipes/recipes.csv\"\nAS row\nMERGE (r:Recipe{name:row.recipe})\nWITH r,row.ingredients as ingredients\nUNWIND split(ingredients,',') as ingredient\nMERGE (i:Ingredient{name:ingredient})\nMERGE (r)-[:CONTAINS_INGREDIENT]->(i)`,\n      ],\n      algorithms: [\n        {\n          name: \"Degree\",\n          category: \"Centralities\",\n          description:\n            \"Find the most used ingredients or most diverse recipes.\",\n        },\n        {\n          name: \"Node Similarity\",\n          category: \"Similarity\",\n          description: \"Find the most similar recipes.\",\n        },\n      ],\n    },\n    FIFA: {\n      name: \"FIFA\",\n      author: \"Aman Shrivastava\",\n      authorLink: \"https://github.com/4m4n5\",\n      description: `A dataset of FIFA players and their rankings.`,\n      queries: [\n        `CREATE CONSTRAINT ON (p:Player) ASSERT p.name IS UNIQUE`,\n        `USING PERIODIC COMMIT 500\nload csv with headers from \"https://github.com/4m4n5/fifa18-all-player-statistics/raw/master/2019/data.csv\" AS row\nMERGE (p:Player {name: row.Name})\nSET p.club = row.Club,\n\n    p.crossing = toInteger(row.Crossing),\n    p.finishing = toInteger(row.Finishing),\n    p.headingAccuracy = toInteger(row.\\`HeadingAccuracy\\`),\n    p.shortPassing = toInteger(row.\\`ShortPassing\\`),\n    p.volleys = toInteger(row.\\`Volleys\\`),\n    \n    p.dribbling = toInteger(row.\\`Dribbling\\`),\n    p.curve = toInteger(row.\\`Curve\\`),\n    p.fkAccuracy = toInteger(row.\\`FK Accuracy\\`),\n    p.longPassing = toInteger(row.\\`LongPassing\\`),\n    p.ballControl = toInteger(row.\\`BallControl\\`),\n    \n    p.acceleration = toInteger(row.\\`Acceleration\\`),\n    p.sprintSpeed = toInteger(row.\\`SprintSpeed\\`),\n    p.agility = toInteger(row.\\`Agility\\`),\n    p.reactions = toInteger(row.\\`Reactions\\`),\n    p.balance = toInteger(row.\\`Balance\\`),\n    \n    p.shotPower = toInteger(row.\\`ShotPower\\`),\n    p.jumping = toInteger(row.\\`Jumping\\`),\n    p.stamina = toInteger(row.\\`Stamina\\`),\n    p.strength = toInteger(row.\\`Strength\\`),\n    p.longShots = toInteger(row.\\`LongShots\\`),\n    \n    p.standingTackle = toInteger(row.\\`StandingTackle\\`),\n    p.positioning = toInteger(row.\\`Positioning\\`),\n    p.penalties = toInteger(row.\\`Penalties\\`),\n    p.aggression = toInteger(row.\\`Aggression\\`),\n    p.composure = toInteger(row.\\`Composure\\`),\n    p.vision = toInteger(row.\\`Vision\\`),\n    p.marking = toInteger(row.\\`Marking\\`),\n    p.slidingTackle = toInteger(row.\\`SlidingTackle\\`),\n    p.crossing = toInteger(row.\\`Crossing\\`),\n    \n    p.gkHandling = toInteger(row.\\`GKHandling\\`),\n    p.gkPositioning = toInteger(row.\\`GKPositioning\\`),\n    p.gkReflexes = toInteger(row.\\`GKReflexes\\`),\n    p.gkDiving = toInteger(row.\\`GKDiving\\`),\n    p.gkKicking = toInteger(row.\\`GKKicking\\`),\n\n    p.overall = toInteger(row.\\`Overall\\`),\n    \n    p.position = row.\\`Position\\`,\n    p.value = row.\\`Value\\``,\n        `MATCH (p:Player)\nSET p.embedding = [key in keys(p) \n                   WHERE not(key IN [\"name\", \"position\", \"value\", \"overall\"]) \n                   AND apoc.meta.cypher.type(p[key]) = \"INTEGER\"\n                   | p[key] * 1.0]`,\n        `match (p:Player)\nWHERE size(p.embedding) = 0\nDELETE p`,\n      ],\n      algorithms: [\n        {\n          name: \"K-Nearest Neighbors\",\n          category: \"Similarity\",\n          description:\n            \"Find similar pairs of players based on node properties.\",\n        },\n      ],\n    },\n  },\n  5: {\n    \"Game of Thrones\": {\n      name: \"Game of Thrones\",\n      author: \"Andrew Beveridge\",\n      authorLink: \"https://networkofthrones.wordpress.com/\",\n      description: `A dataset containing interactions between the characters across the first 7 seasons of the popular TV show.`,\n      queries: [\n        `CREATE CONSTRAINT IF NOT EXISTS FOR (c:Character) REQUIRE c.id IS UNIQUE`,\n        `UNWIND range(1,7) AS season\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/got/got-s\" + season + \"-nodes.csv\" AS row\nMERGE (c:Character {id: row.Id})\nON CREATE SET c.name = row.Label`,\n        `UNWIND range(1,7) AS season\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/got/got-s\" + season + \"-edges.csv\" AS row\nMATCH (source:Character {id: row.Source})\nMATCH (target:Character {id: row.Target})\nCALL apoc.merge.relationship(source, \"INTERACTS_SEASON\" + season, {}, {}, target) YIELD rel\nSET rel.weight = toInteger(row.Weight)`,\n      ],\n      algorithms: [\n        {\n          name: \"Page Rank\",\n          category: \"Centralities\",\n          description:\n            \"Find the most influential characters in Westeros and elsewhere.\",\n        },\n        {\n          name: \"Shortest Path\",\n          category: \"Path Finding\",\n          description: \"Who can introduce Jon to Daenerys? Or Sansa to Drogo?\",\n        },\n      ],\n    },\n\n    \"European Roads\": {\n      name: \"European Roads\",\n      author: \"Lasse Westh-Nielsen\",\n      authorLink:\n        \"http://lassewesth.blogspot.com/2018/07/the-international-e-road-network-and.html\",\n      description: `A dataset containing European Roads.`,\n      queries: [\n        `CREATE CONSTRAINT IF NOT EXISTS FOR (p:Place) REQUIRE p.name IS UNIQUE`,\n        `\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/eroads/roads.csv\"\nAS row\n\nMERGE (origin:Place {name: row.origin_reference_place})\nSET origin.countryCode = row.origin_country_code\n\nMERGE (destination:Place {name: row.destination_reference_place})\nSET destination.countryCode = row.destination_country_code\n\nMERGE (origin)-[eroad:EROAD {road_number: row.road_number}]->(destination)\nSET eroad.distance = toInteger(row.distance), eroad.watercrossing = row.watercrossing`,\n      ],\n      algorithms: [\n        {\n          name: \"Degree\",\n          category: \"Centralities\",\n          description: \"Find the most connected cities on the continent.\",\n        },\n        {\n          name: \"All Pairs Shortest Path\",\n          category: \"Path Finding\",\n          description:\n            \"What's the quickest route between the different European cities.\",\n        },\n      ],\n    },\n    Twitter: {\n      name: \"Twitter\",\n      author: \"Mark Needham\",\n      authorLink: \"https://markhneedham.com/blog/\",\n      description: `A dataset containing Twitter followers of the graph community`,\n      queries: [\n        `CREATE CONSTRAINT FOR (u:User) REQUIRE u.id IS unique`,\n        `CALL apoc.load.json(\"https://github.com/neo4j-apps/neuler/raw/master/sample-data/twitter/users.json\")\nYIELD value\nMERGE (u:User {id: value.user.id })\nSET u += value.user\nFOREACH (following IN value.following |\n  MERGE (f1:User {id: following})\n  MERGE (u)-[:FOLLOWS]->(f1))\nFOREACH (follower IN value.followers |\n  MERGE(f2:User {id: follower})\n  MERGE (u)<-[:FOLLOWS]-(f2));`,\n      ],\n      algorithms: [\n        {\n          name: \"Page Rank\",\n          category: \"Centralities\",\n          description:\n            \"Find the most influential accounts in the Neo4j twittersphere.\",\n        },\n        {\n          name: \"Strongly Connected Components\",\n          category: \"Community Detection\",\n          description: \"Find groups of people that follow each other.\",\n        },\n      ],\n    },\n\n    Recipes: {\n      name: \"Recipes\",\n      author: \"DBpedia\",\n      authorLink: \"https://wiki.dbpedia.org/\",\n      description: `A dataset containing recipes and their ingredients.`,\n      queries: [\n        `CREATE CONSTRAINT FOR (r:Recipe) REQUIRE r.name IS UNIQUE`,\n        `CREATE CONSTRAINT FOR (i:Ingredient) REQUIRE i.name IS UNIQUE`,\n        `\nLOAD CSV WITH HEADERS FROM \"https://github.com/neo4j-apps/neuler/raw/master/sample-data/recipes/recipes.csv\"\nAS row\nCALL {\n    WITH row\nMERGE (r:Recipe{name:row.recipe})\nWITH r,row.ingredients as ingredients\nUNWIND split(ingredients,',') as ingredient\nMERGE (i:Ingredient{name:ingredient})\nMERGE (r)-[:CONTAINS_INGREDIENT]->(i)} IN TRANSACTIONS`,\n      ],\n      algorithms: [\n        {\n          name: \"Degree\",\n          category: \"Centralities\",\n          description:\n            \"Find the most used ingredients or most diverse recipes.\",\n        },\n        {\n          name: \"Node Similarity\",\n          category: \"Similarity\",\n          description: \"Find the most similar recipes.\",\n        },\n      ],\n    },\n    FIFA: {\n      name: \"FIFA\",\n      author: \"Aman Shrivastava\",\n      authorLink: \"https://github.com/4m4n5\",\n      description: `A dataset of FIFA players and their rankings.`,\n      queries: [\n        `CREATE CONSTRAINT FOR (p:Player) REQUIRE p.name IS UNIQUE`,\n        `\nLOAD CSV WITH HEADERS FROM \"https://github.com/4m4n5/fifa18-all-player-statistics/raw/master/2019/data.csv\" AS row\nCALL {\n    WITH row\n\n    MERGE (p:Player {name: row.Name})\n    SET p.club = row.Club,\n\n    p.crossing = toInteger(row.Crossing),\n    p.finishing = toInteger(row.Finishing),\n    p.headingAccuracy = toInteger(row.\\`HeadingAccuracy\\`),\n    p.shortPassing = toInteger(row.\\`ShortPassing\\`),\n    p.volleys = toInteger(row.\\`Volleys\\`),\n    \n    p.dribbling = toInteger(row.\\`Dribbling\\`),\n    p.curve = toInteger(row.\\`Curve\\`),\n    p.fkAccuracy = toInteger(row.\\`FK Accuracy\\`),\n    p.longPassing = toInteger(row.\\`LongPassing\\`),\n    p.ballControl = toInteger(row.\\`BallControl\\`),\n    \n    p.acceleration = toInteger(row.\\`Acceleration\\`),\n    p.sprintSpeed = toInteger(row.\\`SprintSpeed\\`),\n    p.agility = toInteger(row.\\`Agility\\`),\n    p.reactions = toInteger(row.\\`Reactions\\`),\n    p.balance = toInteger(row.\\`Balance\\`),\n    \n    p.shotPower = toInteger(row.\\`ShotPower\\`),\n    p.jumping = toInteger(row.\\`Jumping\\`),\n    p.stamina = toInteger(row.\\`Stamina\\`),\n    p.strength = toInteger(row.\\`Strength\\`),\n    p.longShots = toInteger(row.\\`LongShots\\`),\n    \n    p.standingTackle = toInteger(row.\\`StandingTackle\\`),\n    p.positioning = toInteger(row.\\`Positioning\\`),\n    p.penalties = toInteger(row.\\`Penalties\\`),\n    p.aggression = toInteger(row.\\`Aggression\\`),\n    p.composure = toInteger(row.\\`Composure\\`),\n    p.vision = toInteger(row.\\`Vision\\`),\n    p.marking = toInteger(row.\\`Marking\\`),\n    p.slidingTackle = toInteger(row.\\`SlidingTackle\\`),\n    p.crossing = toInteger(row.\\`Crossing\\`),\n    \n    p.gkHandling = toInteger(row.\\`GKHandling\\`),\n    p.gkPositioning = toInteger(row.\\`GKPositioning\\`),\n    p.gkReflexes = toInteger(row.\\`GKReflexes\\`),\n    p.gkDiving = toInteger(row.\\`GKDiving\\`),\n    p.gkKicking = toInteger(row.\\`GKKicking\\`),\n\n    p.overall = toInteger(row.\\`Overall\\`),\n    \n    p.position = row.\\`Position\\`,\n    p.value = row.\\`Value\\`} IN TRANSACTIONS`,\n        `MATCH (p:Player)\nSET p.embedding = [key in keys(p) \n                   WHERE not(key IN [\"name\", \"position\", \"value\", \"overall\"]) \n                   AND apoc.meta.cypher.type(p[key]) = \"INTEGER\"\n                   | p[key] * 1.0]`,\n        `match (p:Player)\nWHERE size(p.embedding) = 0\nDELETE p`,\n      ],\n      algorithms: [\n        {\n          name: \"K-Nearest Neighbors\",\n          category: \"Similarity\",\n          description:\n            \"Find similar pairs of players based on node properties.\",\n        },\n      ],\n    },\n  },\n};\n","import React, {useState, useEffect} from \"react\";\nimport {Button, Checkbox, Icon, TextArea, Form} from \"semantic-ui-react\";\nimport {sampleGraphs} from \"../SampleGraphs/sampleGraphs\";\n\nexport const postFeedback = (body) => {\n  const formData = new URLSearchParams();\n  formData.append(\"project\", \"neuler\")\n  formData.append(\"helpful\", body.helpful)\n  formData.append(\"url\", `@neuler/${body.page}`)\n\n  if(body.reason) {\n    formData.append(\"reason\", body.reason)\n  }\n\n  if(body.moreInformation) {\n    formData.append(\"moreInformation\", body.moreInformation)\n  }\n\n  fetch('https://uglfznxroe.execute-api.us-east-1.amazonaws.com/dev/Feedback', {\n    method: 'post',\n    body: formData,\n    mode: \"no-cors\"\n  }).then(function(response) {\n    return response;\n  }).then(function(data) {\n    console.log(data)\n  }).catch(error => {\n    console.log(error)\n  });\n}\n\nexport const FeedbackForm = (props) => {\n  const [open, setOpen] = useState(true);\n  const [feedback, setFeedback] = useState({complete: false})\n\n  const [page, setPage] = useState(props.page)\n  useEffect(() => {\n    setPage(props.page);\n    setFeedback({complete: false})\n  }, [props.page])\n\n  let View\n\n  const helpLink = \"http://community.neo4j.com/new-topic?title=NEuler%20Problem&body=Hi%20%40mark.needham%2C%0A%0AI%27m%20having%20problems%20getting%20NEuler%20to%20work.%20%0A%0A%3CAdd%20detail%20here%3E%0A%0APlease%20can%20you%20help%3F%0A%0A&category=neo4j-graph-platform/graph-algorithms&tags=neuler\"\n  if (feedback.complete) {\n    const message = feedback.success ?\n        \"Thanks for your feedback. We're happy to hear that NEuler is serving you well!\" :\n        <React.Fragment>\n          <p>Thanks for your feedback. We'll take it account when we're updating NEuler.</p>\n          <p>Feedback submitted via this form is anonymous. If you need a reply to help you solve a problem you're having with NEuler,\n            you can <a target=\"_blank\" rel=\"noopener noreferrer\" href={helpLink}>create a topic on the community site</a> and we'll try to help.\n          </p>\n          <Button primary as='a' href={helpLink} target=\"_blank\">\n            Post on community site\n          </Button>\n        </React.Fragment>\n    View = <FeedbackThanks open={open} setOpen={setOpen} message={message}/>\n  } else {\n    if (feedback.success === undefined) {\n      View = <FeedbackFirstScreen open={open} setOpen={setOpen} response={(wasSuccessful) => {\n        const newFeedback = {success: wasSuccessful}\n        if (wasSuccessful) {\n          newFeedback.complete = true\n          postFeedback({page: page, helpful: true})\n        }\n        setFeedback(newFeedback)\n      }}/>\n    } else {\n      View = <FeedbackSecondScreen open={open} setOpen={setOpen}\n                                   skip={() => {\n                                     const newFeedback = {complete: true, success: false }\n                                     setFeedback(newFeedback)\n\n                                     postFeedback({page: page, helpful: false})\n                                   }}\n                                   submit={(reason, moreInformation) => {\n                                     const newFeedback = {complete: true, success: false, reason: reason, moreInformation: moreInformation }\n                                     setFeedback(newFeedback)\n\n                                     postFeedback({page: page, helpful: false, reason: reason, moreInformation: moreInformation})\n                                   }}/>\n    }\n\n  }\n\n  return <div id=\"search-feedback-module\"\n              style={{\n                boxShadow: \"rgba(0, 0, 0, 0.17) 0px 2px 10px\",\n                width: \"300px\",\n                background: \"rgb(249, 251, 253)\",\n                position: \"fixed\",\n                bottom: \"12px\",\n                right: \"12px\",\n                borderRadius: \"5px\",\n                opacity: \"1\"\n              }}>\n    {View}\n  </div>\n}\n\nconst headerStyle = {\n  padding: \"18px 24px\",\n  fontSize: \"16px\",\n  margin: \"0px\",\n  borderTopLeftRadius: \"5px\",\n  borderTopRightRadius: \"5px\",\n  fontWeight: \"normal\",\n  borderBottom: \"1px solid rgba(210, 213, 218, 0.5)\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  cursor: \"pointer\",\n  background: \"hsl(210, 16%, 82%)\",\n  color: \"hsl(209, 20%, 25%)  \"\n};\n\nconst FeedbackFirstScreen = (props) => {\n  const outerStyle = {padding: \"24px\"}\n  const innerStyle = {marginBottom: \"10px\", color: \"#000\"}\n\n  if (!props.open) {\n    innerStyle.display = \"none\"\n    outerStyle.display = \"none\"\n  }\n\n  return <React.Fragment>\n    <h4 style={headerStyle} onClick={() => props.setOpen(!props.open)}>Help us improve NEuler <Icon className=\"angle down large\" /></h4>\n    <div style={outerStyle}>\n      <form>\n        <div style={innerStyle}><p>Were you able to do what you wanted?</p>\n\n          <div>\n            <Icon className=\"thumbs up big green feedback-icon\" style={{marginRight: \"5px\", fontSize: \"2.5em\"}} onClick={() => props.response(true)}/>\n            <Icon className=\"thumbs down big red feedback-icon\" style={{fontSize: \"2.5em\"}} onClick={() => props.response(false)} />\n          </div>\n\n        </div>\n\n      </form>\n    </div>\n  </React.Fragment>\n}\n\nconst FeedbackSecondScreen = (props) => {\n  const outerStyle = {padding: \"24px\"}\n  const innerStyle = {marginBottom: \"10px\", color: \"#000\"}\n\n  if (!props.open) {\n    innerStyle.display = \"none\"\n    outerStyle.display = \"none\"\n  }\n\n  let [reason, setReason] = useState(\"results\")\n  let [moreInformation, setMoreInformation] = useState(\"\")\n\n  return <React.Fragment>\n    <h4 style={headerStyle}>Help us improve NEuler <Icon className=\"angle down large\" onClick={() => props.setOpen(!props.open)}/></h4>\n    <div style={outerStyle}>\n      <form>\n        <div style={innerStyle}>\n          <p>Thanks for your feedback. How can we improve?</p>\n          <Form style={{marginBottom: \"10px\"}}>\n\n            <Form.Field>\n              <Checkbox\n                  className=\"feedback-form\"\n                radio\n                label=\"Results are confusing or don't make sense\"\n                name='checkboxRadioGroup'\n                value='results'\n                checked={reason === 'results'}\n                onChange={() => setReason(\"results\")}\n              />\n            </Form.Field>\n            <Form.Field>\n              <Checkbox\n                  className=\"feedback-form\"\n                radio\n                label=\"Missing algorithm or functionality\"\n                name='checkboxRadioGroup'\n                value='missing'\n                checked={reason === 'missing'}\n                onChange={() => setReason(\"missing\")}\n              />\n            </Form.Field>\n            <Form.Field>\n              <Checkbox\n                  className=\"feedback-form\"\n                  radio\n                label=\"The app is confusing/I don't know what to do\"\n                name='checkboxRadioGroup'\n                value='hard-to-follow'\n                checked={reason === 'hard-to-follow'}\n                onChange={() => setReason(\"hard-to-follow\")}\n              />\n            </Form.Field>\n            <Form.Field>\n              <Checkbox\n                className=\"feedback-form\"\n                radio\n                label='It has another problem not covered by the above'\n                name='checkboxRadioGroup'\n                value='other'\n                checked={reason === 'other'}\n                onChange={() => setReason(\"other\")}\n              />\n            </Form.Field>\n\n            <TextArea id=\"feedback-form\" placeholder='Tell us more' onChange={(event, data) => setMoreInformation(data.value)}  rows={5} />\n          </Form>\n\n          <Button onClick={(e) => {props.submit(reason, moreInformation); e.preventDefault()}}>Submit</Button>\n          {/*<Button onClick={(e) => {props.skip(); e.preventDefault()}}>Skip</Button>*/}\n\n        </div>\n\n      </form>\n    </div>\n  </React.Fragment>\n}\n\n\nconst FeedbackThanks = (props) => {\n  const outerStyle = {padding: \"24px\"}\n  const innerStyle = {color: '#000'}\n\n  if (!props.open) {\n    innerStyle.display = \"none\"\n    outerStyle.display = \"none\"\n  }\n\n  return <React.Fragment>\n    <h4 style={headerStyle}>Help us improve NEuler\n      <Icon className=\"angle down large\" onClick={() => props.setOpen(!props.open)}/>\n    </h4>\n    <div style={outerStyle}>\n      <div style={innerStyle}>\n        <p>{props.message}</p>\n      </div>\n\n    </div>\n  </React.Fragment>\n}\n","import React from 'react'\nimport {Container, Divider, Segment} from \"semantic-ui-react\"\nimport '../../App.css'\nimport {connect} from \"react-redux\"\nimport {\n    addDatabase,\n    initLabel,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"../../ducks/metadata\"\nimport {CONNECTED, setConnected, setDisconnected} from \"../../ducks/connection\"\nimport {communityNodeLimit, limit} from \"../../ducks/settings\";\nimport {WebAppLoadingArea} from \"./WebAppLoadingArea\";\nimport {LoadingIcon, UserInputLoadingIcon} from \"./LoadingIcon\";\nimport {\n    ALL_DONE,\n    CHECKING_APOC_PLUGIN,\n    CHECKING_GDS_PLUGIN,\n    CONNECTING_TO_DATABASE,\n    SELECT_DATABASE,\n    setLimitDefaults,\n    webAppSteps\n} from \"./startup\";\nimport * as qs from \"qs\";\nimport {FeedbackForm} from \"../Feedback/FeedbackForm\";\nimport constants from \"../../constants\";\nimport {Redirect} from \"react-router-dom\";\nimport { subscribeToDatabaseCredentialsForActiveGraph } from '../../services/graph-app-kit/helpers'\n\nconst NewApp = (props) => {\n    const [queryParameters, setQueryParameters] = React.useState({})\n    React.useEffect(() => {\n        setQueryParameters(qs.parse(props.location.search, { ignoreQueryPrefix: true }))\n        props.history.push(props.location.pathname)\n    }, [props.isNeo4jDesktop])\n\n    React.useEffect(() => {\n        if(props.isNeo4jDesktop) {\n            subscribeToDatabaseCredentialsForActiveGraph(window.neo4jDesktopApi,\n                (credentials, activeProject, activeGraph) => {\n                    setQueryParameters({username: credentials.username, accessToken: credentials.password, url: credentials.host})\n                },\n                () => {}\n            )\n        }\n    }, [props.isNeo4jDesktop])\n\n    const [currentStep, setCurrentStep] = React.useState(CONNECTING_TO_DATABASE)\n    const [currentStepFailed, setCurrentStepFailed] = React.useState(false)\n    const [currentStepInProgress, setCurrentStepInProgress] = React.useState(false)\n    const [showNeuler, setShowNeuler] = React.useState(false)\n    const [metadataLoaded, setMetadataLoaded] = React.useState(false)\n    const {setConnected, setDisconnected, connectionInfo} = props\n\n    const [serverInfo, setServerInfo] = React.useState(null)\n\n    React.useEffect(() => {\n        if (props.connectionInfo.status === CONNECTED) {\n            setServerInfo(props.connectionInfo.credentials.username + \"@\" + props.connectionInfo.credentials.host)\n        }\n\n    }, [props.connectionInfo.status])\n\n    React.useEffect(() => {\n        if (currentStep === ALL_DONE) {\n            setMetadataLoaded(true)\n            setLimitDefaults(props)\n        }\n    }, [currentStep])\n\n\n\n    if (currentStep === ALL_DONE && metadataLoaded) {\n        if (showNeuler) {\n            return <Redirect to=\"/\" />\n        } else {\n            setTimeout(function () {\n                setShowNeuler(true)\n            }, 1000);\n        }\n    }\n\n    const smallStyle = {fontSize: \"1.2rem\", lineHeight: \"20px\", fontStyle: \"italic\"}\n\n    return <Container fluid style={{display: 'flex', height: '100%', overflowY: 'auto'}}>\n        <div style={{width: '100%'}}>\n            <Segment basic inverted vertical={false}>\n                <div style={{textAlign: \"center\"}}>\n                    <h1 className=\"loading\">Launching NEuler - The Graph Data Science Playground</h1>\n                </div>\n                <Divider/>\n                <div className=\"loading-wrapper\">\n                    <div className=\"loading\">\n                        <UserInputLoadingIcon step={CONNECTING_TO_DATABASE} currentStep={currentStep}\n                                              steps={webAppSteps} currentStepInProgress={currentStepInProgress}\n                                              setCurrentStepInProgress={setCurrentStepInProgress}\n                                              currentStepFailed={currentStepFailed}/>\n                        <p>Connecting to server\n\n                        </p>\n                    </div>\n                    <div className=\"loading\">\n                        <LoadingIcon step={CHECKING_GDS_PLUGIN} currentStep={currentStep}\n                                     steps={webAppSteps}\n                                     currentStepFailed={currentStepFailed}/>\n                        <p>Checking GDS plugin</p>\n                    </div>\n                    <div className=\"loading\">\n                        <LoadingIcon step={CHECKING_APOC_PLUGIN} currentStep={currentStep}\n                                     steps={webAppSteps}\n                                     currentStepFailed={currentStepFailed}/>\n                        <p>Checking APOC plugin</p>\n                    </div>\n                    <div className=\"loading\">\n                        <UserInputLoadingIcon step={SELECT_DATABASE} currentStep={currentStep}\n                                              steps={webAppSteps}\n                                              currentStepFailed={currentStepFailed}/>\n                        <p>Select database</p>\n                    </div>\n                </div>\n\n                <div style={{...smallStyle, paddingBottom: \"10px\", textAlign: \"center\", color: \"#ccc\"}}>\n                    <div style={smallStyle}>\n                        {serverInfo ? <React.Fragment>Connected to: {serverInfo}</React.Fragment> : null}\n                    </div>\n                </div>\n\n                <Divider/>\n\n                <div>\n                    <WebAppLoadingArea setDisconnected={setDisconnected} setConnected={setConnected}\n                                       connectionStatus={connectionInfo.status} currentStep={currentStep}\n                                       setCurrentStep={setCurrentStep}\n                                        isNeo4jDesktop={props.isNeo4jDesktop}\n                                       setCurrentStepFailed={setCurrentStepFailed}\n                                       setCurrentStepInProgress={setCurrentStepInProgress}\n                                       queryParameters={queryParameters}\n                    />\n                </div>\n                <FeedbackForm page={constants.version + (props.isNeo4jDesktop ? \"/DesktopApp-Startup\" : \"/WebApp-Startup\") } />\n            </Segment>\n        </div>\n    </Container>\n}\n\nconst mapStateToProps = state => ({\n    connectionInfo: state.connections,\n    metadata: state.metadata,\n    limit: state.settings.limit,\n    communityNodeLimit: state.settings.communityNodeLimit,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setLabels: labels => dispatch(setLabels(labels)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    setGds: version => dispatch(setVersions(version)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    setConnected: credentials => dispatch(setConnected(credentials)),\n    setDisconnected: () => dispatch(setDisconnected()),\n\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys)),\n\n    updateLimit: value => dispatch(limit(value)),\n    updateCommunityNodeLimit: value => dispatch(communityNodeLimit(value)),\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewApp)\n","import {Container, Modal, Table} from \"semantic-ui-react\"\nimport React from 'react'\nimport {connect} from \"react-redux\";\nimport constants from \"../constants.js\";\n\nconst About = (props) => {\n    const containerStyle = {\n        margin: \"1em\",\n    }\n\n    return <Modal open={props.open}\n                  onClose={props.onClose}\n                  centered={false}\n                  closeIcon\n                  size=\"small\">\n        <Modal.Header>\n            Versions\n        </Modal.Header>\n        <Modal.Content>\n            <div style={containerStyle}>\n                <Container fluid>\n                    <Table basic='very' celled collapsing>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>\n                                    Component\n                                </Table.HeaderCell>\n                                <Table.HeaderCell>\n                                    Version\n                                </Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            <Table.Row>\n                                <Table.Cell>NEuler</Table.Cell>\n                                <Table.Cell>\n                                    {constants.version}\n                                </Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell>Graph Data Science Library</Table.Cell>\n                                <Table.Cell>{props.metadata.versions.gdsVersion}\n                                </Table.Cell>\n                            </Table.Row>\n                            <Table.Row>\n                                <Table.Cell>Neo4j Server</Table.Cell>\n                                <Table.Cell>{props.metadata.versions.neo4jVersion}\n                                </Table.Cell>\n                            </Table.Row>\n                        </Table.Body>\n                    </Table>\n\n                </Container>\n            </div>\n\n        </Modal.Content>\n    </Modal>\n\n}\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata\n})\n\n\nexport default connect(mapStateToProps)(About)\n","import {\n  Button,\n  Card,\n  CardGroup,\n  Container,\n  Dimmer,\n  Icon,\n  Loader,\n  Message,\n  Modal,\n} from \"semantic-ui-react\";\nimport React from \"react\";\nimport { runCypher } from \"../services/stores/neoStore\";\nimport { connect } from \"react-redux\";\nimport { sendMetrics } from \"./metrics/sendMetrics\";\nimport Clipboard from \"react-clipboard.js\";\nimport { sampleGraphs } from \"./SampleGraphs/sampleGraphs\";\nimport { useHistory } from \"react-router-dom\";\nimport { getAlgorithmDefinitions } from \"./algorithmsLibrary\";\n\nconst selectedStyle = { background: \"#e5f9e7\" };\n\nexport const SELECT_DATASET = \"select-dataset\";\nexport const IMPORT_DATASET = \"import-dataset\";\nexport const SELECT_ALGORITHM = \"select-algorithm\";\nexport const steps = [SELECT_DATASET, IMPORT_DATASET, SELECT_ALGORITHM];\n\nconst Datasets = (props) => {\n  const [currentStep, setCurrentStep] = React.useState(SELECT_DATASET);\n  const [selectedDataset, setSelectedDataset] = React.useState(null);\n  const [currentQueryIndex, setCurrentQueryIndex] = React.useState(-1);\n  const [completedQueryIndexes, setCompletedQueryIndexes] = React.useState({});\n  const [completed, setCompleted] = React.useState([]);\n  const [nextEnabled, setNextEnabled] = React.useState(false);\n  const [prevEnabled, setPrevEnabled] = React.useState(false);\n\n  const { neo4jVersion } = props;\n  const mainNeo4jVersion = neo4jVersion && neo4jVersion.split(\".\")[0];\n\n  const resetState = () => {\n    props.onClose();\n    setCurrentQueryIndex(-1);\n    setCompletedQueryIndexes({});\n    setSelectedDataset(null);\n    setNextEnabled(false);\n    setCurrentStep(SELECT_DATASET);\n  };\n\n  const show = (dimmer, datasetName) => () => {\n    setCurrentQueryIndex(-1);\n    setCompletedQueryIndexes({});\n    setCompleted([]);\n    setSelectedDataset(datasetName);\n    setNextEnabled(true);\n  };\n\n  const loadDataset = () => {\n    const queries = sampleGraphs[mainNeo4jVersion][selectedDataset].queries;\n    queries\n      .reduce((promiseChain, query, qIndex) => {\n        return promiseChain.then((chainResults) => {\n          setCurrentQueryIndex(qIndex);\n          return runCypher(query)\n            .catch((error) => {\n              if (\n                error.code !==\n                \"Neo.ClientError.Schema.EquivalentSchemaRuleAlreadyExists\"\n              )\n                throw new Error(error);\n            })\n            .then((currentResult) => {\n              // console.log(\"loadDataset.completedQueryIndexes\", completedQueryIndexes, {...completedQueryIndexes, [qIndex]: true}, qIndex)\n              setCompletedQueryIndexes((prevState) => {\n                return { ...prevState, [qIndex]: true };\n              });\n\n              return [...chainResults, currentResult];\n            });\n        });\n      }, Promise.resolve([]))\n      .then((results) => {\n        completed.push(selectedDataset);\n        setCurrentQueryIndex(-1);\n        setCompleted(completed);\n        setNextEnabled(true);\n        props.onComplete();\n        sendMetrics(\"neuler-loaded-dataset\", selectedDataset, {\n          dataset: selectedDataset,\n        });\n      });\n  };\n\n  const containerStyle = {\n    margin: \"1em\",\n  };\n\n  const selectScreen = (step) => {\n    switch (step) {\n      case SELECT_DATASET:\n        return {\n          header: \"Select Sample Graph\",\n          view: (\n            <SelectDataset\n              selectedDataset={selectedDataset}\n              selectedStyle={selectedStyle}\n              show={show}\n              nextEnabled={nextEnabled}\n              setNextEnabled={setNextEnabled}\n              mainNeo4jVersion={mainNeo4jVersion}\n            />\n          ),\n          next: (\n            <Button\n              disabled={!nextEnabled}\n              primary\n              onClick={() => {\n                setCurrentStep(IMPORT_DATASET);\n                setNextEnabled(false);\n                setPrevEnabled(true);\n              }}\n            >\n              Next <Icon name=\"chevron right\" />\n            </Button>\n          ),\n        };\n      case IMPORT_DATASET:\n        return {\n          header: \"Import Sample Graph\",\n          view: (\n            <ImportDataset\n              selectedDataset={selectedDataset}\n              completedQueryIndexes={completedQueryIndexes}\n              currentQueryIndex={currentQueryIndex}\n              completed={completed}\n              loadDataset={loadDataset}\n              mainNeo4jVersion={mainNeo4jVersion}\n            />\n          ),\n          previous: (\n            <Button\n              disabled={!prevEnabled}\n              style={{ float: \"left\" }}\n              primary\n              onClick={() => {\n                setCurrentStep(SELECT_DATASET);\n                setPrevEnabled(false);\n                setNextEnabled(true);\n              }}\n            >\n              <Icon name=\"chevron left\" /> Previous{\" \"}\n            </Button>\n          ),\n          next: (\n            <Button\n              disabled={!nextEnabled}\n              primary\n              onClick={() => setCurrentStep(SELECT_ALGORITHM)}\n            >\n              Next <Icon name=\"chevron right\" />\n            </Button>\n          ),\n        };\n      case SELECT_ALGORITHM:\n        return {\n          header: \"Choose algorithm\",\n          view: (\n            <SelectAlgorithms\n              allDone={resetState}\n              selectedDataset={selectedDataset}\n              metadata={props.metadata}\n              limit={props.limit}\n              communityNodeLimit={props.communityNodeLimit}\n              mainNeo4jVersion={mainNeo4jVersion}\n            />\n          ),\n          next: (\n            <Button disabled={!nextEnabled} positive onClick={resetState}>\n              All Done\n            </Button>\n          ),\n        };\n      default:\n        return null;\n    }\n  };\n\n  const currentScreen = selectScreen(currentStep);\n\n  return (\n    <Modal\n      open={props.open}\n      onClose={resetState}\n      centered={false}\n      closeIcon\n      size=\"large\"\n    >\n      <Modal.Header>{currentScreen.header}</Modal.Header>\n      <Modal.Content>\n        <div style={containerStyle}>\n          <Container fluid>{currentScreen.view}</Container>\n        </div>\n      </Modal.Content>\n      <Modal.Actions>\n        {currentScreen.previous}\n        {currentScreen.next}\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nconst SelectDataset = ({\n  selectedDataset,\n  selectedStyle,\n  show,\n  mainNeo4jVersion,\n}) => {\n  return (\n    <React.Fragment>\n      <p>\n        Below are some sample graphs that are useful for learning how to use the\n        Graph Data Science library.\n      </p>\n      <CardGroup>\n        {Object.keys(sampleGraphs[mainNeo4jVersion]).map((key) => {\n          return (\n            <Card\n              key={sampleGraphs[mainNeo4jVersion][key].name}\n              raised={sampleGraphs[mainNeo4jVersion][key].name === selectedDataset}\n            >\n              <Card.Content\n                style={\n                  sampleGraphs[mainNeo4jVersion][key].name === selectedDataset\n                    ? selectedStyle\n                    : null\n                }\n              >\n                <Icon name=\"sitemap\" />\n                <Card.Header>{sampleGraphs[mainNeo4jVersion][key].name}</Card.Header>\n                <Card.Meta>\n                  Author:{\" \"}\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href={sampleGraphs[mainNeo4jVersion][key].authorLink}\n                  >\n                    {sampleGraphs[mainNeo4jVersion][key].author}\n                  </a>\n                </Card.Meta>\n                <Card.Description>\n                  {sampleGraphs[mainNeo4jVersion][key].description}\n                </Card.Description>\n              </Card.Content>\n              <Card.Content\n                extra\n                style={\n                  sampleGraphs[mainNeo4jVersion][key].name === selectedDataset\n                    ? selectedStyle\n                    : null\n                }\n              >\n                <div className=\"ui two buttons\">\n                  <Button\n                    basic\n                    color=\"green\"\n                    onClick={show(true, sampleGraphs[mainNeo4jVersion][key].name)}\n                  >\n                    Select\n                  </Button>\n                </div>\n              </Card.Content>\n            </Card>\n          );\n        })}\n      </CardGroup>\n    </React.Fragment>\n  );\n};\n\nconst ImportDataset = ({\n  selectedDataset,\n  completedQueryIndexes,\n  currentQueryIndex,\n  completed,\n  loadDataset,\n  mainNeo4jVersion\n}) => {\n  return (\n    <React.Fragment>\n      <Message color=\"purple\">\n        <Message.Header>Do you want to load the sample graph?</Message.Header>\n        <Message.Content>\n          <p>\n            Pressing the 'Yes, load it!' button below will run the following\n            Cypher statements:\n          </p>\n        </Message.Content>\n      </Message>\n\n      <div>\n        {sampleGraphs[mainNeo4jVersion][selectedDataset].queries.map((query, queryIndex) => (\n          <Message key={queryIndex}>\n            {completedQueryIndexes[queryIndex] ? (\n              <Icon color=\"green\" name=\"check\" />\n            ) : null}\n            <pre style={{ whiteSpace: \"pre-wrap\" }}>{query};</pre>\n            <Clipboard\n              onSuccess={(event) => {\n                sendMetrics(\"neuler-sample-graphs\", \"copied-code\", {\n                  type: \"sample-graph-query\",\n                  graph: selectedDataset,\n                });\n                event.trigger.textContent = \"Copied\";\n                setTimeout(() => {\n                  event.trigger.textContent = \"Copy\";\n                }, 2000);\n              }}\n              button-className=\"code\"\n              data-clipboard-text={query}\n            >\n              Copy\n            </Clipboard>\n            <Dimmer active={queryIndex === currentQueryIndex}>\n              <Loader>Running</Loader>\n            </Dimmer>\n          </Message>\n        ))}\n      </div>\n\n      {completed.includes(selectedDataset) ? null : (\n        <div style={{ padding: \"12px 0 0 0\" }}>\n          <Button\n            disabled={currentQueryIndex >= 0}\n            positive\n            fluid\n            color=\"green\"\n            content=\"Yes, load it!\"\n            onClick={loadDataset}\n          />\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst SelectAlgorithms = (props) => {\n  const { selectedDataset, mainNeo4jVersion } = props;\n\n  const history = useHistory();\n\n  const addLimits = (params) => {\n    return {\n      ...params,\n      limit: props.limit,\n      communityNodeLimit: props.communityNodeLimit,\n    };\n  };\n\n  const generateAlgorithmState = (group, algorithm) => {\n    const { parameters, parametersBuilder } = getAlgorithmDefinitions(\n      group,\n      algorithm,\n      props.metadata.versions.gdsVersion\n    );\n    const params = parametersBuilder({\n      ...parameters,\n      requiredProperties: Object.keys(parameters),\n    });\n\n    const formParameters = addLimits(parameters);\n    return {\n      group: group,\n      algorithm: algorithm,\n      newParameters: params,\n      formParameters: formParameters,\n    };\n  };\n\n  return (\n    <React.Fragment>\n      <p>\n        The following algorithms are well suited to the {selectedDataset} sample\n        graph:\n      </p>\n\n      <CardGroup>\n        {sampleGraphs[mainNeo4jVersion][selectedDataset].algorithms.map((item) => {\n          return (\n            <Card key={item.name}>\n              <Card.Content>\n                <Icon name=\"sitemap\" />\n                <Card.Header>{item.name}</Card.Header>\n\n                <Card.Description>{item.description}</Card.Description>\n              </Card.Content>\n              <Card.Content extra>\n                <div className=\"ui two buttons\">\n                  <Button\n                    basic\n                    color=\"green\"\n                    onClick={() => {\n                      sendMetrics(\"neuler-sample-graphs\", \"try-out-algorithm\", {\n                        category: item.category,\n                        name: item.name,\n                      });\n                      history.push({\n                        pathname: \"/algorithms/new\",\n                        state: generateAlgorithmState(item.category, item.name),\n                      });\n                      props.allDone();\n                    }}\n                  >\n                    Try it out\n                  </Button>\n                </div>\n              </Card.Content>\n            </Card>\n          );\n        })}\n      </CardGroup>\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  metadata: state.metadata,\n  limit: state.settings.limit,\n  communityNodeLimit: state.settings.communityNodeLimit,\n});\n\nexport default connect(mapStateToProps)(Datasets);\n","import {\n    Button,\n    Card,\n    CardGroup,\n    Container,\n    Divider,\n    Dropdown,\n    List,\n    Header,\n    Icon, Image,\n    Loader,\n    Message\n} from \"semantic-ui-react\"\nimport React from 'react'\n\nimport {connect} from \"react-redux\";\nimport {\n    setActiveDatabase,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes\n} from \"../ducks/metadata\";\nimport {getActiveDatabase, hasNamedDatabase, onActiveDatabase} from \"../services/stores/neoStore\";\nimport {loadMetadata} from \"../services/metadata\";\nimport {addDatabase, initLabel} from \"../ducks/metadata\";\nimport WhatIsMissing from \"./Onboarding/WhatIsMissing\";\nimport SelectedDatabase from \"./Onboarding/SelectedDatabase\";\nimport {updateMetadata} from \"./Startup/startup\";\nimport {OpenCloseSection} from \"./Form/OpenCloseSection\";\nimport {useHistory} from \"react-router-dom\";\nimport {getAlgorithmDefinitions} from \"./algorithmsLibrary\";\nimport {hasNodesAndRelationships} from \"./SelectDatabase\";\nimport {publicPathTo} from \"./AlgorithmGroupsMenu\";\n\n\n\nconst Home = (props) => {\n    const {metadata} = props\n    const credentials = props.connectionInfo.credentials\n    const history = useHistory();\n\n    const addLimits = (params) => {\n        return {\n            ...params,\n            limit: props.limit,\n            communityNodeLimit: props.communityNodeLimit\n        }\n    }\n\n    const generateAlgorithmState = (group, algorithm) => {\n        const {parameters, parametersBuilder} = getAlgorithmDefinitions(group, algorithm, props.metadata.versions.gdsVersion)\n        const params = parametersBuilder({\n            ...parameters,\n            requiredProperties: Object.keys(parameters)\n        })\n\n        const formParameters = addLimits(parameters);\n        return {\n            group: group,\n            algorithm: algorithm,\n            newParameters: params,\n            formParameters: formParameters\n        }\n    }\n\n    const getDescription = (group, algorithm) => {\n        const {description} = getAlgorithmDefinitions(group, algorithm, props.metadata.versions.gdsVersion)\n        return description\n    }\n\n\n\n    return (<React.Fragment>\n            <div className=\"page-heading\">\n        Welcome to NEuler - The Graph Data Science Playground\n    </div>\n            <div className=\"top-level-container\">\n\n            <Container fluid>\n\n                <OpenCloseSection title=\"Database Connection\">\n                    <List className=\"connection\">\n                        <List.Item className=\"connection-item\">\n                            <label>Username</label>\n                            <span>{credentials.username}</span>\n                        </List.Item>\n                        <List.Item className=\"connection-item\">\n                            <label>Server</label>\n                            <span>{credentials.host}</span>\n                        </List.Item>\n                        <List.Item className=\"connection-item\">\n                            <label>Database</label>\n                            <span>{metadata.activeDatabase}</span>\n                        </List.Item>\n                    </List>\n                    <Button onClick={() => {\n                        history.push({\n                            pathname: '/database'\n                        })\n                    }}>\n                        Configure Database\n                    </Button>\n                </OpenCloseSection>\n\n\n                <OpenCloseSection title=\"Getting Started\" className=\"getting-started\">\n\n                    {!hasNodesAndRelationships(props.metadata) && <WhatIsMissing setDatasetsActive={props.setDatasetsActive}/>}\n\n                    {hasNodesAndRelationships(props.metadata) && <React.Fragment>\n                <p className=\"intro\">\n                    NEuler supports running graph algorithms in two ways:\n                </p>\n\n                <CardGroup>\n                    <Card key={\"run-algorithm\"}>\n                        <Card.Content>\n                            <Image src={publicPathTo(\"images/noun_algorithm_563285.png\")} />\n                            <Card.Header>\n                                Run single algorithm\n                            </Card.Header>\n                            <Card.Meta>\n                                Choose this option if you want to choose from any of the available algorithms in the Graph Data Science Library.\n                            </Card.Meta>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <div className='ui two buttons'>\n                                <Button basic color='green' onClick={() => {\n                                    history.push({\n                                        pathname: '/algorithms/new',\n                                        state: generateAlgorithmState(\"Centralities\", \"Degree\")\n                                    })\n                                }}>\n                                    Select\n                                </Button>\n                            </div>\n                        </Card.Content>\n                    </Card>\n\n                    <Card key={\"run-algorithm-recipe\"}>\n                        <Card.Content>\n                            <Image src={publicPathTo(\"images/noun_recipes_1566765.png\")} />\n                            <Card.Header>\n                                Run Algorithm Recipe\n                            </Card.Header>\n                            <Card.Meta>\n                                Choose this option if you aren't sure which algorithm to run and would like to suggestions of commonly used combinations of algorithms.\n                            </Card.Meta>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <div className='ui two buttons'>\n                                <Button basic color='green' onClick={() => {\n                                    history.push({\n                                        pathname: '/recipes'\n                                    })\n                                }}>\n                                    Select\n                                </Button>\n                            </div>\n                        </Card.Content>\n                    </Card>\n\n                </CardGroup>\n                    </React.Fragment>}\n                </OpenCloseSection>\n\n            </Container>\n\n        </div>\n        </React.Fragment>\n    )\n\n}\n\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata,\n    labels: state.metadata.allLabels,\n    connectionInfo: state.connections,\n    limit: state.settings.limit,\n    communityNodeLimit: state.settings.communityNodeLimit,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setActiveDatabase: database => dispatch(setActiveDatabase(database)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)\n","import {Menu} from \"semantic-ui-react\";\nimport React from \"react\";\n\nexport const FailedTopBar = ({ activeItem, handleMenuItemClick}) => {\n    return <Menu attached='top' tabular pointing secondary className=\"results-bar\"\n                 style={{display: 'flex', justifyContent: 'space-between'}}>\n        <div style={{display: 'flex'}}>\n            <Menu.Item name='Configure' active={activeItem === 'Configure'} onClick={handleMenuItemClick}>1. Configure</Menu.Item>\n            <Menu.Item name='Results' active={activeItem === 'Results'} onClick={handleMenuItemClick}>2. Results</Menu.Item>\n            <Menu.Item name='Code' active={activeItem === 'Code'} onClick={handleMenuItemClick}>3. Code</Menu.Item>\n        </div>\n    </Menu>\n}\n","import React from \"react\";\nimport {algorithmGroups, getAlgorithmDefinitions, getAlgorithms, getGroup} from \"./algorithmsLibrary\";\nimport {OpenCloseSection} from \"./Form/OpenCloseSection\";\nimport {Card, Header, Icon} from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\nimport {selectAlgorithm, selectGroup} from \"../ducks/algorithms\";\nimport ScrollMenu from \"react-horizontal-scrolling-menu\";\n\nconst SelectAlgorithmView = ({currentAlgorithm, metadata, selectAlgorithm, selectGroup}) => {\n    const [selectedAlgorithm, setSelectedAlgorithm] = React.useState(null)\n    const [selectingAlgorithm, setSelectingAlgorithm] = React.useState(false)\n    const algoGroupsForVersion = algorithmGroups(metadata.versions.gdsVersion);\n\n    React.useEffect(() => {\n        setSelectedAlgorithm(currentAlgorithm)\n    }, [])\n\n    const handleChange = ({value}) => {\n        const group = getGroup(value, metadata.versions.gdsVersion);\n        selectGroup(group, metadata.versions.gdsVersion)\n        selectAlgorithm(value)\n        setSelectedAlgorithm(value)\n    }\n\n    const allAlgorithms = {}\n    Object.keys(algoGroupsForVersion).forEach(group => {\n        getAlgorithms(group, metadata.versions.gdsVersion).forEach(algorithm => {\n            allAlgorithms[algorithm] = {\n                description: getAlgorithmDefinitions(group, algorithm, metadata.versions.gdsVersion).description,\n                group: group\n            }\n        })\n    })\n\n    const Arrow = ({ text, className }) => {\n        return <div className={className}>{text}</div>;\n    };\n    const ArrowLeft = <Icon className=\"arrow alternate circle left grey arrow-prev\" />\n    const ArrowRight = <Icon className=\"arrow alternate circle right grey arrow-next\" />\n\n    return (selectedAlgorithm &&\n        <OpenCloseSection title=\"Algorithm\">\n            <div style={{border: \"1px solid rgba(34,36,38,.15)\", borderRadius: \".28571429rem\", padding: \"10px\"}}>\n                <div style={{display: \"flex\", cursor: \"pointer\" ,justifyContent: \"space-between\"}} onClick={() => setSelectingAlgorithm(!selectingAlgorithm)}>\n                <Header as=\"h3\">\n                    {selectedAlgorithm}\n                    <Header.Subheader>\n                        {allAlgorithms[selectedAlgorithm].description}\n                    </Header.Subheader>\n                </Header>\n                <Icon name={selectingAlgorithm ? 'triangle up' : 'triangle down'} size=\"big\"/>\n                </div>\n\n                <div style={selectingAlgorithm ? {display: ''} : {display: 'none'}} className=\"algorithm-groups\">\n                    {Object.keys(algoGroupsForVersion).map(group => <div key={group} className=\"algorithm-group-container\">\n                        <div className=\"algorithm-group\">\n                            <span>{group}</span>\n                        </div>\n\n                            <ScrollMenu data={getAlgorithms(group, metadata.versions.gdsVersion).map(algorithm => {\n                                return <div key={\"card-\" + algorithm}\n                                             className={selectedAlgorithm === algorithm ? \"select-algorithm selected\" : \"select-algorithm\"}\n                                             onClick={() => {\n                                                 handleChange({value: algorithm})\n                                             }}\n                                >\n                                    {algorithm}\n                                </div>\n                            })}\n                                        transition={0.4}\n                                        arrowLeft={ArrowLeft}\n                                        arrowRight={ArrowRight}\n                                        scrollBy={0}\n                                        hideArrows={true}\n                                        translate={0}\n                            />\n\n                    </div>)\n                    }\n                </div>\n            </div>\n        </OpenCloseSection>)\n}\nexport default connect(state => ({\n    metadata: state.metadata,\n}), dispatch => ({\n    selectAlgorithm: algorithm => dispatch(selectAlgorithm(algorithm)),\n    selectGroup: (algorithm, gdsVersion) => dispatch(selectGroup(algorithm, gdsVersion)),\n}))(SelectAlgorithmView)\n","import React from 'react'\nimport {connect} from 'react-redux'\nimport {Button, Header} from 'semantic-ui-react'\nimport {getAlgorithmDefinitions} from \"./algorithmsLibrary\"\nimport {communityNodeLimit, limit} from \"../ducks/settings\"\nimport {ResultFilteringFields} from \"./Form/ResultsFiltering\";\nimport {ADDED} from \"../ducks/tasks\";\nimport {OpenCloseSection} from \"./Form/OpenCloseSection\";\nimport SelectAlgorithm from \"./SelectAlgorithm\";\n\nexport const AlgoFormView = (props) => {\n  const {task} = props\n  const [parameters, setParameters] = React.useState({})\n  const [labelOptions, setLabelOptions] = React.useState([{key: \"*\", value: \"*\", text: 'Any'}])\n  const [relationshipTypeOptions, setRelationshipTypeOptions] = React.useState([{key: \"*\", value: \"*\", text: 'Any'}])\n  const [propertyKeyOptions, setPropertyKeyOptions] = React.useState([])\n  const [relPropertyKeyOptions, setRelPropertyKeyOptions] = React.useState([])\n  const [relationshipOrientationOptions, setRelationshipOrientationOptions] = React.useState([{\n    key: \"Natural\",\n    value: \"Natural\",\n    text: 'Natural'\n  }])\n\n  const loadMetadata = (metadata) => {\n    const labels = metadata.labels.map(row => {\n      return {key: row.label, value: row.label, text: row.label}\n    })\n    labels.unshift({key: \"*\", value: \"*\", text: 'Any'})\n    setLabelOptions(labels)\n\n    const relationshipTypes = metadata.relationshipTypes.map(row => {\n      return {key: row.label, value: row.label, text: row.label}\n    })\n    relationshipTypes.unshift({key: \"*\", value: \"*\", text: 'Any'})\n    setRelationshipTypeOptions(relationshipTypes)\n\n    const propertyKeys = metadata.propertyKeys.map(row => {\n      return {key: row.propertyKey, value: row.propertyKey, text: row.propertyKey}\n    });\n    propertyKeys.unshift({key: null, value: null, text: 'None'})\n    setPropertyKeyOptions(propertyKeys)\n\n    const relPropertyKeys = metadata.relPropertyKeys.map(row => {\n      return {key: row.propertyKey, value: row.propertyKey, text: row.propertyKey}\n    });\n    relPropertyKeys.unshift({key: null, value: null, text: 'None'})\n    setRelPropertyKeyOptions(relPropertyKeys)\n\n    setRelationshipOrientationOptions([\n      {key: \"Natural\", value: \"Natural\", text: \"Natural\"},\n      {key: \"Reverse\", value: \"Reverse\", text: \"Reverse\"},\n      {key: \"Undirected\", value: \"Undirected\", text: \"Undirected\"},\n    ])\n  }\n\n  React.useEffect(() => {\n    loadMetadata(props.metadata)\n  }, [props.metadata])\n\n  React.useEffect(() => {\n    setParameters(props.task.formParameters)\n  }, [props.task.taskId])\n\n\n  const onChangeParam = (key, value) => {\n    setParameters({...parameters, [key]: value})\n  }\n\n  const onRunAlgo = () => {\n    const currentAlgorithm = getAlgorithmDefinitions(task.group, task.algorithm, props.metadata.versions.gdsVersion)\n    const {service, parametersBuilder} = currentAlgorithm\n    if (service) {\n      let formParameters = parameters;\n      const params = parametersBuilder({\n        ...formParameters,\n        requiredProperties: Object.keys(formParameters)\n      })\n\n      const persisted = formParameters.persist\n      const gdsVersion = props.metadata.versions.gdsVersion\n\n      props.onRun({\n        ...params,\n        limit: props.limit,\n        communityNodeLimit: props.communityNodeLimit,\n        gdsVersion: gdsVersion\n      }, formParameters, persisted)\n    }\n  }\n\n  const onCopyAlgo = () => {\n    const currentAlgorithm = getAlgorithmDefinitions(task.group, task.algorithm, props.metadata.versions.gdsVersion)\n    const {service, parametersBuilder} = currentAlgorithm\n    if (service) {\n      let formParameters = parameters;\n      const params = parametersBuilder({\n        ...formParameters,\n        requiredProperties: Object.keys(formParameters)\n      })\n\n      props.onCopy(task.group, task.algorithm, {\n        ...params,\n        limit: props.limit,\n        communityNodeLimit: props.communityNodeLimit\n      }, formParameters)\n    }\n  }\n\n  const currentAlgorithm = getAlgorithmDefinitions(task.group, task.algorithm, props.metadata.versions.gdsVersion)\n  const {Form: AlgoForm, returnsCommunities} = currentAlgorithm\n\n  const containerStyle = {\n    overflow: 'hidden',\n    height: '100%',\n    marginRight: '0'\n  }\n\n  const updateLimit = (evt, data) => {\n    onChangeParam(\"limit\", parseInt(data.value))\n    props.updateLimit(parseInt(data.value))\n  }\n\n  const updateCommunityNodeLimit = (evt, data) => {\n    onChangeParam(\"communityNodeLimit\", parseInt(data.value))\n    props.updateCommunityNodeLimit(parseInt(data.value))\n  }\n\n  const readOnly = task.status !== ADDED;\n  const selectedAlgorithmReadOnly = props.selectedAlgorithmReadOnly || readOnly\n  return (\n      <div style={containerStyle}>\n        {selectedAlgorithmReadOnly && <SelectedAlgorithm currentAlgorithm={currentAlgorithm} task={task}  />}\n        {!selectedAlgorithmReadOnly && <SelectAlgorithm currentAlgorithm={task.algorithm}  />}\n\n        <div style={{marginBottom: '1em'}}>\n\n          <AlgoForm {...parameters}\n                    labelOptions={labelOptions}\n                    relationshipTypeOptions={relationshipTypeOptions}\n                    relationshipOrientationOptions={relationshipOrientationOptions}\n                    propertyKeyOptions={propertyKeyOptions}\n                    relPropertyKeyOptions={relPropertyKeyOptions}\n                    readOnly={readOnly}\n                    onChange={onChangeParam}>\n            <ResultFilteringFields limit={parameters.limit}\n                                   communityNodeLimit={parameters.communityNodeLimit}\n                                   readOnly={readOnly}\n                                   returnsCommunities={returnsCommunities}\n                                   updateLimit={updateLimit}\n                                   updateCommunityNodeLimit={updateCommunityNodeLimit}/>\n          </AlgoForm>\n\n        </div>\n        <div>\n          {task.status === ADDED && <Button color='green' onClick={onRunAlgo}>Run Algorithm</Button>}\n\n          {task.status !== ADDED && task.completed &&\n          <Button title=\"Make a copy of the algorithm with parameters pre-populated\" color='blue' onClick={onCopyAlgo}>Edit configuration</Button>\n          }\n\n          {task.status !== ADDED && !task.completed &&\n          <Button disabled color='green' onClick={onRunAlgo}>Run Algorithm</Button>}\n\n        </div>\n\n      </div>\n  )\n}\n\nconst SelectedAlgorithm = ({task, currentAlgorithm}) => {\n  const {description} = currentAlgorithm\n  return <OpenCloseSection title=\"Algorithm\">\n    <Header disabled={true} as=\"h3\">\n      {task.algorithm}\n      <Header.Subheader>\n        {description}\n      </Header.Subheader>\n    </Header>\n  </OpenCloseSection>\n}\n\nconst mapStateToProps = state => ({\n  metadata: state.metadata,\n  limit: state.settings.limit,\n  communityNodeLimit: state.settings.communityNodeLimit,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  updateLimit: value => dispatch(limit(value)),\n  updateCommunityNodeLimit: value => dispatch(communityNodeLimit(value)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlgoFormView)\n","import React from \"react\"\nimport stringifyObject from \"stringify-object\"\nimport { isInt } from \"neo4j-driver\"\nimport Clipboard from \"react-clipboard.js\"\nimport { sendMetrics } from \"./metrics/sendMetrics\"\n\nclass RenderParams extends React.Component {\n\textractValue(parameters, key) {\n\t\treturn parameters[key]\n\t\t\t? typeof parameters[key] === \"string\"\n\t\t\t\t? `'${parameters[key].replace(/'/g, \"\\\\'\")}'`\n\t\t\t\t: typeof parameters[key] === \"object\"\n\t\t\t\t? `${stringifyObject(parameters[key], {\n\t\t\t\t\t\tindent: \"  \",\n\t\t\t\t\t\ttransform: (obj, prop, originalResult) => {\n\t\t\t\t\t\t\tif (isInt(obj[prop])) {\n\t\t\t\t\t\t\t\treturn obj[prop].toNumber()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn originalResult\n\t\t\t\t\t\t}\n\t\t\t\t  })}`\n\t\t\t\t: ` ${parameters[key]}`\n\t\t\t: \"null\"\n\t}\n\n\tgetText() {\n\t\tconst { parameters } = this.props\n\n\t\treturn (\n\t\t\tObject.keys(parameters)\n\t\t\t\t.filter(el => el !== \"gdsVersion\")\n\t\t\t\t.map(key => `:param ${key} => (${this.extractValue(parameters, key)})`)\n\t\t\t\t.join(\";\\n\") + \";\"\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { parameters, activeTab } = this.props\n\t\treturn (\n\t\t\t<React.Fragment key={activeTab}>\n\t\t\t\t{Object.keys(parameters)\n\t\t\t\t\t.filter(el => el !== \"gdsVersion\")\n\t\t\t\t\t.map(key => (\n\t\t\t\t\t\t<pre key={key}>\n\t\t\t\t\t\t\t:param {key} => ({this.extractValue(parameters, key)});\n\t\t\t\t\t\t</pre>\n\t\t\t\t\t))}\n\n\t\t\t\t<Clipboard\n\t\t\t\t\tonSuccess={event => {\n\t\t\t\t\t\tsendMetrics(\"neuler-code-view\", \"copied-code\", {\n\t\t\t\t\t\t\ttype: \"parameters\",\n\t\t\t\t\t\t\ttab: activeTab\n\t\t\t\t\t\t})\n\t\t\t\t\t\tevent.trigger.textContent = \"Copied\"\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tevent.trigger.textContent = \"Copy\"\n\t\t\t\t\t\t}, 2000)\n\t\t\t\t\t}}\n\t\t\t\t\tbutton-className=\"code\"\n\t\t\t\t\tbutton-onfocusout={() => console.log(\"focusout\")}\n\t\t\t\t\toption-text={this.getText.bind(this)}\n\t\t\t\t>\n\t\t\t\t\tCopy\n\t\t\t\t</Clipboard>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}\n\nexport default RenderParams\n","import React, { Component } from \"react\"\nimport { Button, Container, Divider, Message, Tab } from \"semantic-ui-react\"\nimport RenderParams from \"./renderParams\"\nimport { v4 as generateId } from \"uuid\"\nimport Clipboard from \"react-clipboard.js\"\nimport stringifyObject from \"stringify-object\"\nimport * as neo from \"neo4j-driver\"\nimport { hasNamedDatabase } from \"../services/stores/neoStore\"\nimport { sendMetrics } from \"./metrics/sendMetrics\"\nimport { filterParameters } from \"../services/queries\"\nimport { OpenCloseSection } from \"./Form/OpenCloseSection\"\n\nconst generateGuidesUrl =\n\t\"https://3uvkamww2b.execute-api.us-east-1.amazonaws.com/dev/generateBrowserGuide\"\n\nconst removeSpacing = query => query.replace(/^[^\\S\\r\\n]+|[^\\S\\r\\n]+$/gm, \"\")\n\nexport const constructQueries = (\n\talgorithmDefinition,\n\tparameters,\n\tstreamQuery\n) => {\n\tconst graphProperties = filterParameters(\n\t\tparameters.graphConfig ? parameters.graphConfig : {},\n\t\t[\"nodeProperties\"]\n\t)\n\tconst algorithmProperties = filterParameters(parameters.config, [\n\t\t\"writeProperty\",\n\t\t\"writeRelationshipType\",\n\t\t\"maxIterations\",\n\t\t\"normalization\",\n\t\t\"dampingFactor\",\n\t\t\"samplingSize\",\n\t\t\"similarityCutoff\",\n\t\t\"degreeCutoff\",\n\t\t\"includeIntermediateCommunities\",\n\t\t\"seedProperty\",\n\t\t\"latitudeProperty\",\n\t\t\"longitudeProperty\",\n\t\t\"propertyKeyLat\",\n\t\t\"propertyKeyLon\",\n\t\t\"relationshipWeightProperty\",\n\t\t\"similarityMetric\",\n\t\t\"nodeProperties\"\n\t])\n\n\tObject.keys(algorithmProperties).forEach(key => {\n\t\tif (neo.isInt(algorithmProperties[key])) {\n\t\t\talgorithmProperties[key] = algorithmProperties[key].toNumber()\n\t\t}\n\t})\n\n\tconst mainGdsVersion = parseInt(parameters.gdsVersion.split(\".\")[0])\n\n\tconst createGraph = `CALL gds.graph.${\n\t\tmainGdsVersion > 1 ? \"project\" : \"create\"\n\t}($generatedName, $graphConfig.nodeProjection, $graphConfig.relationshipProjection, ${stringfyParam(\n\t\tgraphProperties\n\t)})`\n\tconst dropGraph = `CALL gds.graph.drop($generatedName)`\n\n\tconst storeAlgorithmNamedGraph = algorithmDefinition.storeQuery\n\tconst streamAlgorithmNamedGraph = algorithmDefinition.streamQuery\n\n\treturn {\n\t\tcreateGraph,\n\t\tdropGraph,\n\t\tstoreAlgorithmNamedGraph,\n\t\tstreamAlgorithmNamedGraph\n\t}\n}\n\nexport const stringfyParam = value => {\n\tif (!value) {\n\t\treturn \"null\"\n\t}\n\n\tif (typeof value === \"object\") {\n\t\treturn (\n\t\t\t\"{\" +\n\t\t\tObject.keys(value)\n\t\t\t\t.map(key => `${key}: ${JSON.stringify(value[key])}`)\n\t\t\t\t.join(\", \") +\n\t\t\t\"}\"\n\t\t)\n\t} else {\n\t\treturn JSON.stringify(value)\n\t}\n}\n\nexport default class extends Component {\n\tstate = {\n\t\tbrowserGuide: {},\n\t\tactiveTab: \"Named Graph\"\n\t}\n\n\textractValue(parameters, key) {\n\t\treturn parameters[key]\n\t\t\t? typeof parameters[key] === \"string\"\n\t\t\t\t? `'${parameters[key].replace(/'/g, \"\\\\'\")}'`\n\t\t\t\t: typeof parameters[key] === \"object\"\n\t\t\t\t? `${stringifyObject(parameters[key], {\n\t\t\t\t\t\tindent: \"  \",\n\t\t\t\t\t\ttransform: (obj, prop, originalResult) => {\n\t\t\t\t\t\t\tif (neo.isInt(obj[prop])) {\n\t\t\t\t\t\t\t\treturn obj[prop].toNumber()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn originalResult\n\t\t\t\t\t\t}\n\t\t\t\t  })}`\n\t\t\t\t: ` ${parameters[key]}`\n\t\t\t: \"null\"\n\t}\n\n\tconstructPayload(\n\t\tparameters,\n\t\tquery,\n\t\tguid,\n\t\tsupportsNamedGraph,\n\t\tnamedGraphQueries\n\t) {\n\t\treturn {\n\t\t\tuuid: guid,\n\t\t\tparams: Object.keys(parameters)\n\t\t\t\t.filter(el => el !== \"gdsVersion\")\n\t\t\t\t.map(key => `:param ${key} => (${this.extractValue(parameters, key)});`)\n\t\t\t\t.join(\"\\n\"),\n\t\t\tquery: query,\n\t\t\tsupportsNamedGraph,\n\t\t\tnamedGraphQueries\n\t\t}\n\t}\n\n\tgenerateGuide(task) {\n\t\tconst {\n\t\t\tparameters,\n\t\t\tquery,\n\t\t\tnamedGraphQueries,\n\t\t\ttaskId,\n\t\t\talgorithm,\n\t\t\tgroup\n\t\t} = task\n\t\tconst guid = generateId()\n\n\t\tconst supportsNamedGraph = this.supportsNamedGraph(group, algorithm)\n\t\tconst payload = this.constructPayload(\n\t\t\tparameters,\n\t\t\tquery,\n\t\t\tguid,\n\t\t\tsupportsNamedGraph,\n\t\t\tnamedGraphQueries\n\t\t)\n\n\t\treturn fetch(generateGuidesUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\tmode: \"no-cors\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t},\n\t\t\tbody: JSON.stringify(payload)\n\t\t})\n\t\t\t.then(response => {\n\t\t\t\tsendMetrics(\"neuler-code-view\", \"generated-browser-guide\", {\n\t\t\t\t\tguideId: guid\n\t\t\t\t})\n\t\t\t\tthis.setState({\n\t\t\t\t\tbrowserGuide: {\n\t\t\t\t\t\t...this.state.browserGuide,\n\t\t\t\t\t\t[taskId]: `:play neuler/user-content-${guid}.html`\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn guid\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(\"GENERATE GUIDE CALL ERROR\", err)\n\t\t\t\tthrow err\n\t\t\t})\n\t}\n\n\topenBrowser(task) {\n\t\tthis.generateGuide(task).then(guideId => {\n\t\t\twindow.open(\n\t\t\t\t`neo4j-desktop://graphapps/neo4j-browser?cmd=play&arg=neuler/user-content-${guideId}.html`,\n\t\t\t\t\"_self\"\n\t\t\t)\n\t\t})\n\t}\n\n\trenderNamedDatabaseParam = activeDatabase => {\n\t\treturn hasNamedDatabase() ? (\n\t\t\t<Message>\n\t\t\t\t<pre>:use {activeDatabase};</pre>\n\t\t\t\t<Clipboard\n\t\t\t\t\tonSuccess={event => {\n\t\t\t\t\t\tsendMetrics(\"neuler-code-view\", \"copied-code\", {\n\t\t\t\t\t\t\ttype: \"database-name\",\n\t\t\t\t\t\t\ttab: this.state.activeTab\n\t\t\t\t\t\t})\n\t\t\t\t\t\tevent.trigger.textContent = \"Copied\"\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tevent.trigger.textContent = \"Copy\"\n\t\t\t\t\t\t}, 2000)\n\t\t\t\t\t}}\n\t\t\t\t\tbutton-className=\"code\"\n\t\t\t\t\tdata-clipboard-text={`:use ${activeDatabase};`}\n\t\t\t\t>\n\t\t\t\t\tCopy\n\t\t\t\t</Clipboard>\n\t\t\t</Message>\n\t\t) : null\n\t}\n\trenderParams = task => {\n\t\treturn task.parameters ? (\n\t\t\t<Message>\n\t\t\t\t<RenderParams\n\t\t\t\t\tparameters={task.parameters}\n\t\t\t\t\tactiveTab={this.state.activeTab}\n\t\t\t\t/>\n\t\t\t</Message>\n\t\t) : null\n\t}\n\n\tcreatePanes(task) {\n\t\tconst named = this.renderQueries(task.namedGraphQueries)\n\t\tconst namedDatabaseParam = this.renderNamedDatabaseParam(task.database)\n\t\tconst params = this.renderParams(task)\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tmenuItem: \"Named Graph\",\n\t\t\t\trender: () => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tA named graph is created in memory and remains there until it is\n\t\t\t\t\t\t\t\texplicitly deleted. Multiple algorithms can be run against a\n\t\t\t\t\t\t\t\tsingle named graph.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t{namedDatabaseParam}\n\t\t\t\t\t\t\t{params}\n\t\t\t\t\t\t\t{named}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t]\n\t}\n\n\trenderQueries = queries => {\n\t\treturn queries.map(query => {\n\t\t\tif (typeof query === \"function\") {\n\t\t\t\tquery = query()\n\t\t\t}\n\n\t\t\tconst cleanQuery = removeSpacing(query.replace(\"\\n  \", \"\\n\")) + \";\"\n\t\t\treturn (\n\t\t\t\t<Message key={cleanQuery}>\n\t\t\t\t\t<pre>{query && cleanQuery}</pre>\n\t\t\t\t\t<Clipboard\n\t\t\t\t\t\tonSuccess={event => {\n\t\t\t\t\t\t\tsendMetrics(\"neuler-code-view\", \"copied-code\", {\n\t\t\t\t\t\t\t\ttype: \"query\",\n\t\t\t\t\t\t\t\ttab: this.state.activeTab\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tevent.trigger.textContent = \"Copied\"\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tevent.trigger.textContent = \"Copy\"\n\t\t\t\t\t\t\t}, 2000)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tbutton-className=\"code\"\n\t\t\t\t\t\tdata-clipboard-text={query && cleanQuery}\n\t\t\t\t\t>\n\t\t\t\t\t\tCopy\n\t\t\t\t\t</Clipboard>\n\t\t\t\t</Message>\n\t\t\t)\n\t\t})\n\t}\n\n\tonTabChange = (event, data) => {\n\t\tthis.setState({\n\t\t\tactiveTab: data.panes[data.activeIndex].menuItem\n\t\t})\n\t}\n\n\tsupportsNamedGraph = (group, algorithm) => {\n\t\tconst noNamedGraph = {\n\t\t\tSimilarity: [\"Cosine\", \"Pearson\", \"Euclidean\", \"Overlap\"]\n\t\t}\n\t\treturn !(noNamedGraph[group] && noNamedGraph[group].includes(algorithm))\n\t}\n\n\tcodeFragments = task => {\n\t\tif (!task.query) {\n\t\t\treturn null\n\t\t}\n\n\t\tif (this.supportsNamedGraph(task.group, task.algorithm)) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<Tab\n\t\t\t\t\t\tmenu={{ color: \"blue\", secondary: true }}\n\t\t\t\t\t\tpanes={this.createPanes(task)}\n\t\t\t\t\t\tonTabChange={this.onTabChange.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\tconst anonymous = this.renderQueries(task.query)\n\t\t\tconst namedDatabaseParam = this.renderNamedDatabaseParam()\n\t\t\tconst params = this.renderParams(task)\n\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t{namedDatabaseParam}\n\t\t\t\t\t{params}\n\t\t\t\t\t{anonymous}\n\t\t\t\t</React.Fragment>\n\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { task } = this.props\n\t\tconst { browserGuide } = this.state\n\t\tconst taskGuide = browserGuide[task.taskId]\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\toverflowY: \"auto\",\n\t\t\t\t\toverflowX: \"hidden\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<OpenCloseSection title=\"Generate Neo4j Browser Guide\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tYou can generate a Neo4j Browser guide that contains the code to\n\t\t\t\t\t\treproduce the algorithm run:\n\t\t\t\t\t</p>\n\n\t\t\t\t\t{task.query ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tbasic\n\t\t\t\t\t\t\t\tcolor=\"green\"\n\t\t\t\t\t\t\t\ticon=\"play\"\n\t\t\t\t\t\t\t\tcontent=\"Send to Neo4j Browser\"\n\t\t\t\t\t\t\t\tonClick={() => this.openBrowser.bind(this)(task)}\n\t\t\t\t\t\t\t\tstyle={{ marginBottom: \"1rem\" }}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{taskGuide && (\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tIf the Neo4j Browser doesn't automatically open, you can\n\t\t\t\t\t\t\t\t\tcopy/paste the following command into the Neo4j Browser:\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t{taskGuide ? (\n\t\t\t\t\t\t\t\t<Message style={{ margin: \"1em 1em 0em 0em\" }}>\n\t\t\t\t\t\t\t\t\t<pre>{taskGuide}</pre>\n\n\t\t\t\t\t\t\t\t\t<Clipboard\n\t\t\t\t\t\t\t\t\t\tonSuccess={event => {\n\t\t\t\t\t\t\t\t\t\t\tsendMetrics(\"neuler-code-view\", \"copied-code\", {\n\t\t\t\t\t\t\t\t\t\t\t\ttype: \"browser-guide\"\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\tevent.trigger.textContent = \"Copied\"\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tevent.trigger.textContent = \"Copy\"\n\t\t\t\t\t\t\t\t\t\t\t}, 2000)\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tbutton-className=\"code\"\n\t\t\t\t\t\t\t\t\t\tdata-clipboard-text={taskGuide}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCopy\n\t\t\t\t\t\t\t\t\t</Clipboard>\n\t\t\t\t\t\t\t\t</Message>\n\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</OpenCloseSection>\n\n\t\t\t\t<OpenCloseSection title=\"Run code fragments\">\n\t\t\t\t\t<p style={{ margin: \"1rem 0\" }}>\n\t\t\t\t\t\tOr you can reproduce the algorithm run by running the following code\n\t\t\t\t\t\tfragments:\n\t\t\t\t\t</p>\n\n\t\t\t\t\t{this.codeFragments(task)}\n\t\t\t\t</OpenCloseSection>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import {Dropdown, Form, Menu} from \"semantic-ui-react\";\nimport React from \"react\";\nimport {ADDED, COMPLETED, RUNNING} from \"../../ducks/tasks\";\n\n// const printElement = element => {\n//     html2canvas(element).then(function (canvas) {\n//         const guid = generateId()\n//         ReImg.fromCanvas(canvas).downloadPng(`neuler-${guid}.png`);\n//     })\n// }\n\nexport const SuccessTopBar = ({task, activeItem, handleMenuItemClick}) => {\n    return <Menu attached='top' tabular pointing secondary className=\"results-bar\"\n                 style={{display: 'flex', justifyContent: 'space-between'}}>\n        <div style={{display: 'flex'}}>\n            <Menu.Item name=\"Configure\" active={activeItem === 'Configure'} onClick={handleMenuItemClick}>\n                1. Configure\n            </Menu.Item>\n\n                {[RUNNING, COMPLETED].includes(task.status) ?\n                    <React.Fragment>\n                        <Menu.Item name=\"Results\" active={activeItem === 'Results'} onClick={handleMenuItemClick}>\n                            2. Results\n                        </Menu.Item>\n\n                        <Menu.Item name='Code' active={activeItem === 'Code'} onClick={handleMenuItemClick}>\n                            3. Code\n                        </Menu.Item>\n                    </React.Fragment> : null}\n        </div>\n    </Menu>\n}\n\nexport const NewTopBar = () => {\n    return <Menu attached='top' tabular pointing secondary className=\"results-bar\"\n                 style={{display: 'flex', justifyContent: 'space-between'}}>\n        <div style={{display: 'flex'}}>\n            <Menu.Item name=\"Configure\" active={true}>\n                1. Configure\n            </Menu.Item>\n\n                    <Menu.Item name=\"Results\" active={false} disabled={true}>\n                        2. Results\n                    </Menu.Item>\n\n                    <Menu.Item name='Code' active={false}  disabled={true}>\n                        3. Code\n                    </Menu.Item>\n        </div>\n    </Menu>\n}\n\nexport const NavBar = ({task, tasks, setSelectedTaskId}) => {\n    const createMessage = (task) => {\n        return task.status !== ADDED ? ` (Started at: ${task.startTime.toLocaleTimeString()})` : \"\"\n    }\n\n    const taskOptions = tasks.map(value => {\n        return {key: value.taskId, value: value.taskId, text: value.algorithm + createMessage(value)};\n    })\n\n    return <div style={{\n        margin: \"3px\"\n    }}>\n        <Form>\n        <Dropdown options={taskOptions} text=\"Algorithm runs\" search selection value={task.taskId} onChange={(evt, data) => setSelectedTaskId(data.value)} >\n        </Dropdown>\n        </Form>\n    </div>\n}\n","import React from 'react'\nimport { ResponsiveBarCanvas } from '@nivo/bar'\n\nexport default ({ data }) => {\n  data.reverse()\n  return <div style={{ height: '50em' }}>\n    <ResponsiveBarCanvas\n      data={data}\n      keys={['score']}\n      indexBy=\"name\"\n      margin={{\n        \"top\": 50,\n        \"right\": 60,\n        \"bottom\": 50,\n        \"left\": 60\n      }}\n      enableGridX={false}\n      enableGridY={true}\n      enableLabel={true}\n      labelTextColor=\"inherit:darker(1.6)\"\n      isInteractive={true}\n      layout=\"horizontal\"\n      colors=\"red_grey\"\n      colorBy=\"score\"\n    />\n  </div>\n}","import Chart from \"../visualisation/Chart\";\nimport React from \"react\";\nimport {Loader} from \"semantic-ui-react\";\n\nconst LoaderExampleInlineCentered = ({ active }) => <Loader active={active} inline='centered'>Fetching Data</Loader>\n\nexport const ChartView = ({task}) => {\n    if (task.result && task.result.rows.length > 0) {\n        return <Chart data={task.result.rows.map(result => ({\n            name: result.properties.name || result.properties.title || result.properties.id || 'Node',\n            score: result.score\n        }))}/>\n    } else {\n        return <LoaderExampleInlineCentered active={true}/>\n    }\n}","import React from \"react\";\nimport {getActiveDatabase} from \"../services/stores/neoStore\";\nimport {Modal} from \"semantic-ui-react\";\nimport AlgorithmForm from \"./AlgorithmForm\";\nimport {connect} from \"react-redux\";\nimport {addTask, runTask} from \"../ducks/tasks\";\n\nexport const NewAlgorithmModal = (props) => {\n    const {activeGroup, activeAlgorithm, metadata, open, setOpen, task} = props\n\n    const addLimits = (params) => {\n        return {\n            ...params,\n            limit: props.limit,\n            communityNodeLimit: props.communityNodeLimit\n        }\n    }\n\n    return <Modal open={open} size=\"large\"  onClose={() => {\n        setOpen(false);\n    }} closeIcon centered={false}>\n        <Modal.Header>\n            Select and configure algorithm\n        </Modal.Header>\n        <Modal.Content>\n            <AlgorithmForm\n                task={task}\n                onRun={(newParameters, formParameters, persisted) => {\n                    props.addTask(task.taskId, activeGroup, activeAlgorithm, addLimits(newParameters), formParameters, persisted)\n                    props.onRunAlgo(task, newParameters, formParameters, persisted)\n                    setOpen(false)\n                }}\n                onCopy={() => {}}\n            />\n        </Modal.Content>\n    </Modal>\n}\n\nconst mapStateToProps = state => ({\n    tasks: state.tasks,\n    limit: state.settings.limit,\n    metadata: state.metadata,\n    activeGroup: state.algorithms.group,\n    activeAlgorithm: state.algorithms.algorithm,\n    communityNodeLimit: state.settings.communityNodeLimit,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    runTask: (taskId, query, namedGraphQueries, parameters, formParameters, persisted) => {\n        dispatch(runTask({ taskId, query, namedGraphQueries, parameters, formParameters, persisted }))\n    },\n    addTask: (taskId, group, algorithm, parameters, formParameters, persisted) => {\n        const task = {\n            group,\n            algorithm,\n            taskId,\n            parameters,\n            formParameters,\n            persisted,\n            startTime: new Date(),\n            database: getActiveDatabase()\n        }\n        dispatch(addTask({ ...task }))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewAlgorithmModal)\n","import { v4 as generateTaskId } from \"uuid\"\nimport { getActiveDatabase } from \"../services/stores/neoStore\"\nimport { ADDED } from \"../ducks/tasks\"\nimport { sendMetrics } from \"../components/metrics/sendMetrics\"\nimport { constructQueries } from \"../components/CodeView\"\nimport { getAlgorithmDefinitions } from \"../components/algorithmsLibrary\"\n\nexport const duplicateTask = (group, algorithm, parameters, formParameters) => {\n\tconst taskId = generateTaskId()\n\treturn {\n\t\tgroup,\n\t\talgorithm,\n\t\ttaskId,\n\t\tparameters,\n\t\tformParameters,\n\t\tpersisted: parameters.persist,\n\t\tstartTime: new Date(),\n\t\tdatabase: getActiveDatabase(),\n\t\tstatus: ADDED\n\t}\n}\n\nexport const duplicateWithNewId = (task, parameters, formParameters) => {\n\ttask.taskId = generateTaskId()\n\ttask.parameters = parameters\n\ttask.formParameters = formParameters\n\treturn task\n}\n\nexport const updateTask = (task, group, algorithm) => {\n\ttask.taskId = generateTaskId()\n\ttask.group = group\n\ttask.algorithm = algorithm\n\treturn task\n}\n\nexport const constructNewTask = (\n\tgroup,\n\talgorithm,\n\tlimit,\n\tcommunityNodeLimit,\n\tgdsVersion\n) => {\n\tconst taskId = generateTaskId()\n\tconst addLimits = params => {\n\t\treturn {\n\t\t\t...params,\n\t\t\tlimit: limit,\n\t\t\tcommunityNodeLimit: communityNodeLimit\n\t\t}\n\t}\n\tconst { parameters, parametersBuilder } = getAlgorithmDefinitions(\n\t\tgroup,\n\t\talgorithm,\n\t\tgdsVersion\n\t)\n\n\tconst params = parametersBuilder({\n\t\t...parameters,\n\t\trequiredProperties: Object.keys(parameters)\n\t})\n\n\tconst formParameters = addLimits(parameters)\n\n\treturn {\n\t\tgroup: group,\n\t\talgorithm: algorithm,\n\t\ttaskId,\n\t\tparameters: params,\n\t\tformParameters,\n\t\tpersisted: parameters.persist,\n\t\tstartTime: new Date(),\n\t\tdatabase: getActiveDatabase(),\n\t\tstatus: ADDED\n\t}\n}\n\nexport const onRunAlgo = (\n\ttask,\n\tparameters,\n\tformParameters,\n\tpersisted,\n\tversions,\n\tcompleteTask,\n\tonComplete,\n\trunTask\n) => {\n\tconst { taskId, group, algorithm } = task\n\tconst algorithmDefinition = getAlgorithmDefinitions(\n\t\tgroup,\n\t\talgorithm,\n\t\tversions.gdsVersion\n\t)\n\tconst { service, getFetchQuery } = algorithmDefinition\n\n\tlet fetchCypher\n\n\tlet streamQuery = algorithmDefinition.streamQuery\n\tlet storeQuery = algorithmDefinition.storeQuery\n\n\tif (group === \"Similarity\") {\n\t\tconst {\n\t\t\titemLabel,\n\t\t\trelationshipType,\n\t\t\tcategoryLabel,\n\t\t\tweightProperty\n\t\t} = parameters\n\t\tfetchCypher = getFetchQuery(\n\t\t\titemLabel,\n\t\t\tparameters.config.writeRelationshipType,\n\t\t\tparameters.config,\n\t\t\tparameters.graphConfig\n\t\t)\n\t\tdelete parameters.itemLabel\n\t\tdelete parameters.relationshipType\n\t\tdelete parameters.categoryLabel\n\t} else {\n\t\tfetchCypher = getFetchQuery(\n\t\t\tparameters.label,\n\t\t\tparameters.config,\n\t\t\tparameters.graphConfig\n\t\t)\n\t}\n\n\tconst serviceParameters = {\n\t\tstreamCypher: streamQuery,\n\t\tstoreCypher: storeQuery,\n\t\tfetchCypher,\n\t\tparameters,\n\t\tpersisted\n\t}\n\n\tconst params = { ...versions, taskId, algorithm, group }\n\n\tsendMetrics(\"neuler-call-algorithm\", algorithm, params)\n\n\tservice(serviceParameters)\n\t\t.then(result => {\n\t\t\tsendMetrics(\"neuler\", \"completed-algorithm-call\", params)\n\t\t\tcompleteTask(taskId, result)\n\t\t\tif (persisted) {\n\t\t\t\tonComplete()\n\t\t\t}\n\t\t})\n\t\t.catch(exc => {\n\t\t\tconsole.log(\"ERROR IN SERVICE\", exc)\n\t\t\tcompleteTask(taskId, [], exc.toString())\n\t\t})\n\n\tconst constructedQueries = constructQueries(\n\t\talgorithmDefinition,\n\t\tparameters,\n\t\tstreamQuery\n\t)\n\n\trunTask(\n\t\ttaskId,\n\t\tpersisted ? [storeQuery, fetchCypher] : [streamQuery],\n\t\tpersisted\n\t\t\t? [\n\t\t\t\t\tconstructedQueries.createGraph,\n\t\t\t\t\tconstructedQueries.storeAlgorithmNamedGraph,\n\t\t\t\t\tfetchCypher,\n\t\t\t\t\tconstructedQueries.dropGraph\n\t\t\t  ]\n\t\t\t: [\n\t\t\t\t\tconstructedQueries.createGraph,\n\t\t\t\t\tconstructedQueries.streamAlgorithmNamedGraph,\n\t\t\t\t\tconstructedQueries.dropGraph\n\t\t\t  ],\n\t\tparameters,\n\t\tformParameters,\n\t\tpersisted\n\t)\n}\n","import React, {useEffect, useState} from 'react'\nimport {Button} from 'semantic-ui-react'\nimport {connect} from \"react-redux\"\nimport {getAlgorithmDefinitions} from \"./algorithmsLibrary\"\n\nimport {ADDED, addTask, completeTask, removeTask, runTask} from \"../ducks/tasks\"\nimport {NavBar} from \"./Results/SuccessTopBar\";\nimport {v4 as generateTaskId} from \"uuid\";\nimport {getActiveDatabase} from \"../services/stores/neoStore\";\nimport NewAlgorithmModal from \"./NewAlgorithmModal\";\nimport {onRunAlgo} from \"../services/tasks\";\nimport {SingleTask} from \"./SingleTask\";\n\nexport const tabContentStyle = {\n  overflowY: 'auto',\n  overflowX: 'hidden'\n}\n\nconst TabExampleVerticalTabular = (props) => {\n  const [selectedTaskId, setSelectedTaskId] = useState(null)\n\n  useEffect(() => {\n    if(props.tasks.length > 0) {\n      setSelectedTaskId(props.tasks[0].taskId)\n    }\n  }, [props.tasks.length === 0])\n\n  const [newTask, setNewTask] = React.useState({})\n  const constructNewTask = (activeGroup, activeAlgorithm) => {\n    const taskId = generateTaskId()\n    const addLimits = (params) => {\n      return {\n        ...params,\n        limit: props.limit,\n        communityNodeLimit: props.communityNodeLimit\n      }\n    }\n    const {parameters, parametersBuilder} = getAlgorithmDefinitions(activeGroup, activeAlgorithm, props.metadata.versions.gdsVersion)\n\n    const params = parametersBuilder({\n      ...parameters,\n      requiredProperties: Object.keys(parameters)\n    })\n\n    const formParameters = addLimits(parameters);\n\n    return {\n      group: activeGroup,\n      algorithm: activeAlgorithm,\n      taskId,\n      parameters: params,\n      formParameters,\n      persisted: parameters.persist,\n      startTime: new Date(),\n      database: getActiveDatabase(),\n      status: ADDED\n    }\n  }\n\n  const addNewTask = (group, algorithm, parameters, formParameters) => {\n    setNewAlgorithmFormOpen(true)\n    const taskId = generateTaskId()\n    const task = {\n      group, algorithm, taskId,\n      parameters, formParameters, persisted: parameters.persist,\n      startTime: new Date(),\n      database: getActiveDatabase(),\n      status: ADDED\n    }\n\n    setNewTask(task)\n\n  }\n\n\n  const tasks = props.tasks\n\n  const [newAlgorithmFormOpen, setNewAlgorithmFormOpen] = React.useState(false)\n\n  React.useEffect(() => {\n    setNewTask(constructNewTask(props.activeGroup, props.activeAlgorithm))\n  }, [props.activeGroup, props.activeAlgorithm])\n\n  if (tasks && tasks.length > 0) {\n    const currentTask = selectedTaskId ? tasks.find(task => task.taskId === selectedTaskId) : tasks[0]\n    return <div style={{width: \"100%\"}}>\n      <nav className=\"top-nav\">\n        <NavBar task={currentTask} tasks={tasks} setSelectedTaskId={setSelectedTaskId}  />\n        <Button style={{margin: \"4px\", fontSize: \"0.9rem\", padding: \".6em 1.2em\"}} onClick={() => {\n          setNewTask(constructNewTask(props.activeGroup, props.activeAlgorithm))\n          setNewAlgorithmFormOpen(true)\n        }} primary>New algorithm</Button>\n      </nav>\n      <SingleTask\n        metadata={props.metadata}\n        onRunAlgo={onRunAlgo}\n        onCopyAlgo={addNewTask}\n        task={currentTask}\n        totalPages={tasks.length}\n        gdsVersion={props.metadata.versions.gdsVersion}\n    />\n      <NewAlgorithmModal\n          open={newAlgorithmFormOpen}\n          setOpen={setNewAlgorithmFormOpen}\n          onRunAlgo={onRunAlgo}\n          task={newTask}\n      />\n    </div>\n  } else {\n    return <div style={{\n      width: \"50%\",\n      margin: \"auto\",\n      maxHeight: \"300px\",\n      border: \"1px black dashed\",\n      padding: \"100px\",\n      textAlign: \"center\",\n      position: \"absolute\",\n      top: \"50%\",\n      left: \"50%\",\n      \"-moz-transform\": \"translateX(-50%) translateY(-50%)\",\n      \"-webkit-transform\": \"translateX(-50%) translateY(-50%)\",\n      transform: \"translateX(-50%) translateY(-50%)\"\n    }}>\n\n      <h1>No algorithms run yet</h1>\n\n        <Button onClick={() => {\n          setNewAlgorithmFormOpen(true)\n        }} primary>Run algorithm</Button>\n\n      <NewAlgorithmModal\n          open={newAlgorithmFormOpen}\n          setOpen={setNewAlgorithmFormOpen}\n          onRunAlgo={onRunAlgo}\n          task={newTask}\n      />\n    </div>\n  }\n}\n\nconst mapStateToProps = state => ({\n  tasks: state.tasks,\n  metadata: state.metadata,\n  activeGroup: state.algorithms.group,\n  activeAlgorithm: state.algorithms.algorithm,\n  limit: state.settings.limit,\n  communityNodeLimit: state.settings.communityNodeLimit,\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  runTask: (taskId, query, namedGraphQueries, parameters, formParameters, persisted) => {\n    dispatch(runTask({ taskId, query, namedGraphQueries, parameters, formParameters, persisted }))\n  },\n  completeTask: (taskId, result, error) => {\n    dispatch(completeTask({ taskId, result, error }))\n  },\n  onComplete: () => {\n    ownProps.onComplete()\n  },\n  addTask: (taskId, group, algorithm, parameters, formParameters, persisted) => {\n    const task = {\n      group,\n      algorithm,\n      taskId,\n      parameters,\n      formParameters,\n      persisted,\n      startTime: new Date(),\n      database: getActiveDatabase()\n    }\n    dispatch(addTask({ ...task }))\n  },\n  removeTask: (taskId) => {\n    dispatch(removeTask({ taskId}))\n  }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabExampleVerticalTabular)\n","import {getAlgorithmDefinitions} from \"../algorithmsLibrary\";\nimport NodeLabel from \"../NodeLabel\";\nimport React from \"react\";\nimport {tabContentStyle} from \"../AlgoResults\";\n\nexport const TableView = ({task, gdsVersion}) => {\n    const {ResultView} = getAlgorithmDefinitions(task.group, task.algorithm, gdsVersion)\n\n    const labels = task.result ? task.result.labels : []\n\n    return <div style={tabContentStyle}>\n        {labels.length > 0 ? <div style={{display: \"flex\"}}>\n            {labels.map(label => <NodeLabel key={label} labels={[label]} caption={label} database={task.database}/>)}\n        </div> : null}\n\n        <ResultView task={task}/>\n    </div>\n}\n","import {Button, Form, Icon, Select} from \"semantic-ui-react\"\nimport React from \"react\"\n\nexport default ({ labels, captions, nodeSize, nodeColor, updateCaption, updateNodeSize, updateNodeColor, onUpdateConfig }) => {\n  const allProps = flatMapProperties(labels)\n\n  return (\n    <Form>\n      <Form.Group inline>\n        {Object.keys(labels).map(label =>\n          <Form.Field inline key={label}>\n            <label>Caption for {label}</label>\n            <Select placeholder='Select caption'\n                    value={captions[label]}\n                    options={Array.from(labels[label]).map(prop => ({ key: prop, value: prop, text: prop }))}\n                    onChange={(evt, data) => updateCaption(label, data)}\n            />\n          </Form.Field>\n        )}\n\n        <Form.Field inline key='nodeSize'>\n          <label>Node Size</label>\n          <Select placeholder='Select node size'\n                  value={nodeSize}\n                  options={[{key: \"None\", value: null, text: \"None\"}, ...allProps.map(prop => ({ key: prop, value: prop, text: prop }))]}\n                  onChange={(evt, data) => updateNodeSize(data.value)}\n          />\n        </Form.Field>\n\n        <Form.Field inline key='nodeColor'>\n          <label>Node Color</label>\n          <Select placeholder='Select node color'\n                  value={nodeColor}\n                  options={[{key: \"None\", value: null, text: \"None\"}, ...allProps.map(prop => ({ key: prop, value: prop, text: prop }))]}\n                  onChange={(evt, data) => updateNodeColor(data.value)}\n          />\n        </Form.Field>\n\n\n        <Form.Field inline>\n          <Button basic icon labelPosition='right' onClick={onUpdateConfig}>\n            Refresh\n            <Icon name='refresh'/>\n          </Button>\n        </Form.Field>\n      </Form.Group>\n    </Form>\n  )\n}\n\nconst flatMapProperties = labels => Array.from(Object.keys(labels).reduce((propSet, label) => {\n  labels[label].forEach(prop => propSet.add(prop))\n  return propSet\n}, new Set()))\n","import React, {Component} from 'react'\nimport {Grid, Loader} from \"semantic-ui-react\"\nimport {runCypher} from \"../../services/stores/neoStore\"\nimport VisConfigurationBar from './VisConfigurationBar'\nimport {connect} from \"react-redux\";\nimport {ForceGraph2D} from \"react-force-graph\";\nimport * as neo from \"neo4j-driver\";\n\nconst captionCandidates = ['name', 'title']\nconst centralityLikeAlgos = ['Triangle Count', 'Local Clustering Coefficient']\n\nclass GraphVisualiser extends Component {\n    state = {\n        taskId: null,\n        labels: {},\n        captions: {},\n        nodeSize: null,\n        nodeColor: null,\n        relationshipThickness: \"weight\",\n        cypher: null,\n        limit: 50,\n        data: null\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.networks = {}\n\n        this.config = {\n            labels: {\n                \"Person\": {\n                    caption: \"name\",\n                    size: \"pagerank\",\n                    community: \"louvain\"\n                }\n            },\n            initial_cypher: `match (n:Person)\n      where exists(n.pagerank)\n      return n\n      LIMIT 50`\n        }\n    }\n\n    getVis() {\n        return this.networks[this.props.taskId]\n    }\n\n    onUpdateConfig(props) {\n        const {captions, cypher, nodeSize, nodeColor} = this.state\n        const {taskId, relationshipType} = props\n\n        this.config.labels = Object.keys(captions).reduce((labelConfig, label) => {\n            labelConfig[label] = {\n                caption: captions[label],\n                size: nodeSize,\n                community: nodeColor\n            }\n            return labelConfig\n        }, {})\n\n        this.config.initial_cypher = cypher\n\n        if (relationshipType) {\n            this.config.relationships = {\n                [relationshipType]: {\n                    caption: false,\n                    thickness: \"weight\"\n                }\n            }\n        }\n\n        const initVis = (taskId) => {\n            this.setState({rendering: true})\n            this.networks[taskId] = \"foo\"\n        }\n\n        if (this.networks[taskId]) {\n            initVis(taskId)\n        }\n    }\n\n    generateCypher(label, relationshipType, writeProperty, limit) {\n        return `match path = (n${label !== '*' ? ':' + label : ''})-[${relationshipType !== '*' ? ':' + relationshipType : ''}]-(m)\n        WHERE id(n) in $ids AND id(m) in $ids\nreturn m, n`\n\n    }\n\n    dataUpdated(props) {\n        const {results, label, relationshipType, taskId, limit, writeProperty} = props\n\n        if (results && results.rows.length > 0) {\n            const selectCaption = (choices) => {\n                const captionCandidate = choices.find(choice => captionCandidates.includes(choice))\n                return captionCandidate ? captionCandidate : choices[0]\n            }\n\n            const allowed = results.labels\n            const nodePropertyKeys = this.props.metadata.nodePropertyKeys\n            const labelProperties = Object.keys(nodePropertyKeys)\n                .filter(key => allowed.includes(key))\n                .reduce((obj, key) => {\n                    return {\n                        ...obj,\n                        [key]: nodePropertyKeys[key]\n                    };\n                }, {});\n\n            const captions = Object.keys(labelProperties).reduce((obj, key) => {\n                return {\n                    ...obj,\n                    [key]: selectCaption(labelProperties[key])\n                };\n            }, {})\n\n            this.setState({\n                cypher: this.generateCypher(label, relationshipType, writeProperty, limit), //, props.algorithm === 'Louvain'),\n                labels: labelProperties,\n                captions,\n                taskId\n            })\n\n            if (this.state.cypher !== null) {\n                const ids = props.results.ids;\n                runCypher(this.state.cypher, {ids: ids}).then(result => {\n                    if (result.records) {\n                        const nodes = []\n                        const links = result.records.map(r => {\n                            const m = r.get('m')\n\n                            const mProperties = m.properties\n                            Object.keys(mProperties).forEach(key  => {\n                                if (neo.isInt(mProperties[key])) {\n                                    mProperties[key] = mProperties[key].toNumber()\n                                }\n                            })\n\n                            const mLabels = m.labels\n\n                            const n = r.get('n')\n\n                            const nProperties = n.properties\n                            Object.keys(nProperties).forEach(key  => {\n                                if (neo.isInt(nProperties[key])) {\n                                    nProperties[key] = nProperties[key].toNumber()\n                                }\n                            })\n\n                            const nLabels = n.labels\n\n                            const source = {id: m.identity.toNumber(), label: mLabels[0], ...mProperties};\n                            nodes.push(source)\n\n                            const target = {id: n.identity.toNumber(), label: nLabels[0], ...nProperties};\n                            nodes.push(target)\n                            return {source: source.id, target: target.id}\n                        });\n\n                        this.setState({\n                            data: {\n                                links: [...new Set(links.map((o) => JSON.stringify(o)))].map((string) => JSON.parse(string)),\n                                nodes: [...new Set(nodes.map((o) => JSON.stringify(o)))].map((string) => JSON.parse(string))\n                            }\n                        })\n                    } else {\n                        console.error(result.error)\n                        throw new Error(result.error)\n                    }\n                })\n            }\n        }\n    }\n\n    updateCaption(label, prop) {\n        const captions = {...this.state.captions}\n        captions[label] = prop.value\n\n        this.setState({captions})\n    }\n\n    updateNodeSize(nodeSize) {\n        this.setState({nodeSize})\n    }\n\n    updateNodeColor(nodeColor) {\n        this.setState({nodeColor})\n\n        if(this.state.data !== null) {\n            this.setState(function(state, props) {\n                state.data.nodes.forEach(node => {\n                    delete node.color\n                })\n                return {\n                    data: state.data\n                };\n            });\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.props.writeProperty) {\n            if (this.props.group === 'Centralities' || centralityLikeAlgos.includes(this.props.algorithm)) {\n                this.updateNodeSize(this.props.writeProperty)\n            }\n            if (this.props.group === 'Community Detection' && !centralityLikeAlgos.includes(this.props.algorithm)) {\n                this.updateNodeColor(this.props.writeProperty)\n            }\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.writeProperty !== nextProps.writeProperty && nextProps.writeProperty) {\n            if (nextProps.group === 'Centralities' || centralityLikeAlgos.includes(nextProps.algorithm)) {\n                this.updateNodeColor(null)\n                this.updateNodeSize(nextProps.writeProperty)\n            }\n            if (nextProps.group === 'Community Detection' && !centralityLikeAlgos.includes(nextProps.algorithm)) {\n                this.updateNodeColor(nextProps.writeProperty)\n                this.updateNodeSize(null)\n            }\n        }\n\n        if (nextProps.taskId !== this.props.taskId\n            || nextProps.results !== this.props.results\n            || nextProps.active !== this.props.active) {\n            this.dataUpdated(nextProps)\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.active && (prevProps.taskId !== this.props.taskId || prevProps.results !== this.props.results)) {\n            this.onUpdateConfig(this.props)\n        }\n\n        if (this.props.active !== prevProps.active) {\n            if (this.props.active) {\n                const vis = this.getVis()\n                if (!vis)  {\n                    this.onUpdateConfig(this.props)\n                }\n            }\n        }\n    }\n\n    render() {\n        const {labels, nodeSize, nodeColor, captions, data} = this.state\n\n        const getVal = (node) => {\n            const score = node[nodeSize]\n            const maxValue = Math.max(...data.nodes.map(node => node[nodeSize]))\n            const minValue = Math.min(...data.nodes.map(node => node[nodeSize]))\n\n            return Math.max(0.1, (score - minValue) / (maxValue-minValue) * 10.0)\n        }\n\n        return <div>\n            <div style={{marginLeft: '1em'}}>\n                <VisConfigurationBar labels={labels} captions={captions} nodeSize={nodeSize} nodeColor={nodeColor}\n                                     updateCaption={this.updateCaption.bind(this)}\n                                     updateNodeSize={this.updateNodeSize.bind(this)}\n                                     updateNodeColor={this.updateNodeColor.bind(this)}\n                                     onUpdateConfig={this.onUpdateConfig.bind(this, this.props)}/>\n            </div>\n            <div>\n                {!data && <LoaderExampleInlineCentered active={true}/>}\n                {data && <ForceGraph2D graphData={data}\n                                       nodeVal={node => getVal(node)}\n                                       nodeCanvasObject={(node, ctx, globalScale) => {\n                                           // Draw wider nodes by 1px on shadow canvas for more precise hovering (due to boundary anti-aliasing)\n                                           const r = Math.sqrt(Math.max(0, getVal(node) || 1)) * 3 + 2;\n\n                                           ctx.beginPath();\n                                           ctx.arc(node.x, node.y, r, 0, 2 * Math.PI, false);\n                                           ctx.fillStyle = node.color || 'rgba(31, 120, 180, 0.92)';\n                                           ctx.fill();\n\n                                           const fontSize = 12/globalScale;\n                                           ctx.font = `${fontSize}px Sans-Serif`;\n                                           ctx.textAlign = 'center';\n                                           ctx.textBaseline = 'middle';\n                                           ctx.fillStyle = \"#000000\";\n                                           ctx.fillText(node[captions[node.label]], node.x, node.y);\n                                       }}\n                                       nodeAutoColorBy={nodeColor}\n                                       nodeLabel={node => `${node.label}: ${node[captions[node.label]]}`}\n                                       height={window.innerHeight-270}\n                                       width={window.innerWidth-166}\n                />}\n            </div>\n        </div>\n    }\n}\n\nconst mapStateToProps = state => ({\n    metadata: state.metadata\n})\n\nexport default connect(mapStateToProps)(GraphVisualiser)\n\nconst LoaderExampleInlineCentered = ({active}) => <Loader active={active} inline='centered'>Rendering</Loader>\n","import React from \"react\";\nimport {tabContentStyle} from \"../AlgoResults\";\nimport NewGraphVisualiser from \"../visualisation/NewGraphVisualiser\";\n\nexport const NewVisView = ({task, active}) => (\n    <div style={tabContentStyle}>\n        <NewGraphVisualiser taskId={task.taskId} results={task.result} label={task.parameters.graphConfig.nodeProjection}\n                         active={active}\n                         algorithm={task.algorithm}\n                         limit={task.parameters.limit}\n                         relationshipType={task.parameters.graphConfig.relationshipProjection.relType.type}\n                         writeProperty={(task.parameters.config || {}).writeProperty}\n                         group={task.group}/>\n    </div>\n)\n","import React, { useEffect, useState } from \"react\"\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot'\nimport { ThemeProvider, SvgWrapper } from \"@nivo/core\";\nimport { BoxLegendSvg } from \"@nivo/legends\";\nimport TSNE from \"tsne-js\"\nimport { Loader } from \"semantic-ui-react\"\nimport { useOrdinalColorScale } from \"@nivo/colors\";\nimport { Button } from 'semantic-ui-react'\n\n\nconst cachedOutputs = {}\n\nconst generateTSNELayout = (data) => {\n    const model = new TSNE({\n        dim: 2,\n        perplexity: 30.0,\n        earlyExaggeration: 4.0,\n        learningRate: 100.0,\n        nIter: 100,\n        metric: \"euclidean\",\n    })\n\n    model.init({\n        data: data,\n        type: \"dense\",\n    })\n\n    model.run()\n\n    return model.getOutputScaled()\n}\n\nexport default ({ taskId, result, completed }) => {\n    if (!completed) {\n        return false\n    }\n\n    const getCaption = (row) => {\n        if (row.properties.name) {\n            return row.properties.name\n        }\n\n        if (row.properties.title) {\n            return row.properties.title\n        }\n\n        if (row.properties.id) {\n            return row.properties.id\n        }\n\n        return row.identity\n\n    }\n\n    const [rawData, setRawData] = useState([])\n    const [hiddenIds, setHiddenIds] = useState([])\n    const [toggleCaption, setToggleCaption] = useState(false)\n    const colors = useOrdinalColorScale({ scheme: \"nivo\" }, \"id\");\n\n    const theme = {\n        tooltip: {\n            container: {\n                background: 'rgba(51, 51, 51, 0.9)',\n                color: '#fff',\n                fontSize: '12px',\n                borderRadius: '0',\n                boxShadow: 'none',\n                padding: '10px 14px'\n            },\n        },\n    };\n\n    const NodeCaption = ({\n        node,\n        x,\n        y,\n        size,\n        color,\n        blendMode,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    }) => (\n        <g transform={`translate(${x},${y})`}>\n            <text fontSize=\"10px\"> \n                {node.data.caption}\n            </text>\n            <circle\n                r={size / 2}\n                fill={color}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        </g>\n    )\n\n    const NodeWithoutCaption = ({\n        node,\n        x,\n        y,\n        size,\n        color,\n        blendMode,\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n    }) => (\n        <g transform={`translate(${x},${y})`}>\n            <circle\n                r={size / 2}\n                fill={color}\n                style={{ mixBlendMode: blendMode }}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        </g>\n    )\n\n    const handleToggle = () => {\n        setToggleCaption(!toggleCaption)\n    }\n\n\n    useEffect(\n        () => {\n            if (cachedOutputs[taskId]) {\n                setRawData(cachedOutputs[taskId])\n            } else {\n                const scaledOutput = generateTSNELayout(\n                    result.rows.map((row) => row.embedding),\n                )\n                let viz_input = result.rows\n                    .map((row, i) => ({ label: row.labels[0], x: scaledOutput[i][0], y: scaledOutput[i][1], caption: getCaption(row) }))\n                    .reduce((result, item) => {\n                        if (result.filter(element => element.id === item.label).length > 0) {\n                            result.find(element => element.id === item.label).data.push({ x: item.x, y: item.y, caption: item.caption })\n                        }\n                        else { result.push({ id: item.label, data: [{ x: item.x, y: item.y, caption: item.caption }] }) };\n                        return result\n                    }, [])\n                cachedOutputs[taskId] = viz_input\n                setRawData(viz_input)\n            }\n        },\n        [taskId],\n    )\n\n    if (rawData.length === 0) {\n        return <Loader active={true} inline='centered'>Rendering</Loader>\n    }\n\n    return (\n        <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"80% 20%\",\n          height: \"50em\"\n        }}\n      >\n        <div style={{ height: '50em' }}>\n            <ResponsiveScatterPlot\n                data={rawData.filter((item) => !hiddenIds.includes(item.id))}\n                margin={{ top: 40, right: 140, bottom: 70, left: 90 }}\n                xScale={{ type: 'linear', min: -1, max: 1 }}\n                yScale={{ type: 'linear', min: -1, max: 1 }}\n                blendMode=\"multiply\"\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    orient: 'bottom',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                }}\n                axisLeft={{\n                    orient: 'left',\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                }}\n\n                tooltip={(node) => {\n                    return (\n                        <div style={theme.tooltip.container}>\n                            <strong>\n                                {`Label: ${node.node.data.serieId}`}\n                                <br />\n                            </strong>\n                            {`Id: ${node.node.data.caption}`}\n                        </div>\n                    )\n                }}\n                renderNode={toggleCaption ? NodeCaption : NodeWithoutCaption}\n            />\n            </div>\n            <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    flexDirection: \"column\"\n                  }}>\n            <div style={{paddingTop:\"40px\"}}>\n            <Button toggle active={toggleCaption} onClick={handleToggle}>\n                Toggle captions\n            </Button>\n            </div>\n            <ThemeProvider>\n                <SvgWrapper\n                    height={400}\n                    width={80}\n                    margin={{ left: 0, right: 0, top: 20, bottom: 0 }}\n                >\n                    <BoxLegendSvg\n                        anchor=\"center\"\n                        data={rawData.map((item) => {\n\n                            const color = colors(item);\n\n                            return {\n                                color: hiddenIds.includes(item.id) ? \"rgba(1, 1, 1, .1)\" : color,\n                                id: item.id,\n                                label: item.id\n                            }\n                        })}\n                        containerWidth={80}\n                        containerHeight={400}\n                        height={400}\n                        width={80}\n                        direction=\"column\"\n                        itemWidth={50}\n                        itemHeight={40}\n                        itemsSpacing={15}\n                        padding={10}\n                        symbolSize={14}\n                        symbolShape=\"circle\"\n                        onClick={(datum) => {\n                            setHiddenIds((state) =>\n                                state.includes(String(datum.id))\n                                    ? state.filter((item) => item !== datum.id)\n                                    : [...state, String(datum.id)]\n                            )\n                        }}\n                    />\n                </SvgWrapper>\n            </ThemeProvider>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport { tabContentStyle } from \"../AlgoResults\"\nimport TSNEVisualizer from \"../visualisation/TSNEVisualizer\"\n\nexport function TSNEView({ task, active }) {\n  const { taskId, result, completed } = task\n\n  return (\n    <div style={tabContentStyle}>\n      {active && (\n        <TSNEVisualizer taskId={taskId} result={result} completed={completed} />\n      )}\n    </div>\n  )\n}","import React from \"react\";\nimport {sendMetrics} from \"./metrics/sendMetrics\";\nimport {ADDED, FAILED} from \"../ducks/tasks\";\nimport {FailedTopBar} from \"./Results/FailedTopBar\";\nimport AlgorithmForm from \"./AlgorithmForm\";\nimport {Menu, Message} from \"semantic-ui-react\";\nimport CodeView from \"./CodeView\";\nimport {SuccessTopBar} from \"./Results/SuccessTopBar\";\nimport {getGroup} from \"./algorithmsLibrary\";\nimport {ChartView} from \"./Results/ChartView\";\nimport {TableView} from \"./Results/TableView\";\nimport {NewVisView} from \"./Results/NewVisView\";\nimport { TSNEView } from \"./Results/TSNEView\";\n\nexport const SingleTask = (props) => {\n    const {task, currentPage, totalPages, metadata} = props\n    const gdsVersion  = metadata.versions.gdsVersion\n\n    const panelRef = React.createRef()\n    const [activeItem, setActiveItem] = React.useState(\"Results\")\n    const [activeResultsItem, setActiveResultsItem] = React.useState(\"Table\")\n\n    const handleMenuItemClick = (e, {name}) => {\n        sendMetrics('neuler-click-view', name)\n        setActiveItem(name)\n    }\n\n    const handleResultsMenuItemClick = (e, {name}) => {\n        sendMetrics('neuler-click-view', name)\n        setActiveResultsItem(name)\n    }\n\n    React.useEffect(() => {\n        if (task.status === ADDED) {\n            setActiveItem(\"Configure\")\n        } else {\n            setActiveItem(\"Results\")\n        }\n    }, [task.status])\n\n    const activeGroup = task.group\n    const getStyle = name => name === activeItem ? {display: ''} : {display: 'none'}\n    const getStyleResultsTab = name => name === activeItem ? {display: 'flex'} : {display: 'none'}\n    const getResultsStyle = name => name === activeResultsItem ? {display: ''} : {display: 'none'}\n\n    return (<React.Fragment>\n        <div className=\"page-heading\">\n            {task.group} / {task.algorithm} - Started at {task.startTime.toLocaleTimeString()}\n        </div>\n\n\n        <div className=\"top-level-container\">\n            {task.completed && task.status === FAILED ? (\n                    <React.Fragment>\n                        <FailedTopBar task={task} activeItem={activeItem}\n                                      currentPage={currentPage} totalPages={totalPages}\n                                      handleMenuItemClick={handleMenuItemClick.bind(this)}\n                        />\n\n                        <div style={{marginTop: \"10px\"}}>\n                            <div style={getStyle(\"Configure\")}>\n                                <AlgorithmForm\n                                    task={task}\n                                    limit={props.limit}\n                                    onRun={() => {}}\n                                    onCopy={(group, algorithm, newParameters, formParameters) => {\n                                        props.onCopyAlgo(group, algorithm, newParameters, formParameters)\n                                    }}\n                                />\n                            </div>\n                            <div style={getStyle('Results')}>\n                                <Message warning>\n                                    <Message.Header>Algorithm failed to complete</Message.Header>\n                                    <p>{task.error}</p>\n                                </Message>\n                            </div>\n                            <div style={getStyle('Code')}>\n                                <CodeView task={task}/>\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )\n                : <React.Fragment>\n                    <SuccessTopBar task={task} activeItem={activeItem} activeGroup={activeGroup}\n                                   panelRef={panelRef} handleMenuItemClick={handleMenuItemClick}\n                    />\n                    <div ref={panelRef}>\n                        <div>\n                            <div style={getStyle(\"Configure\")}>\n                                <AlgorithmForm\n                                    task={task}\n                                    limit={props.limit}\n                                    onRun={() => {}}\n                                    onCopy={(group, algorithm, newParameters, formParameters) => {\n                                        props.onCopyAlgo(group, algorithm, newParameters, formParameters)\n                                    }}\n                                />\n                            </div>\n\n                            <div style={getStyle('Code')}>\n                                <CodeView task={task}/>\n                            </div>\n\n\n                            <div style={getStyleResultsTab(\"Results\")}>\n                                <div>\n                                    <Menu pointing secondary vertical className=\"resultsMenu\">\n                                        <Menu.Item\n                                            name='Table'\n                                            active={activeResultsItem === 'Table'}\n                                            onClick={handleResultsMenuItemClick}\n                                        />\n\n                                        {getGroup(task.algorithm, gdsVersion) === \"Centralities\" &&\n                                        <Menu.Item\n                                            name='Chart'\n                                            active={activeResultsItem === 'Chart'}\n                                            onClick={handleResultsMenuItemClick}\n                                        />}\n\n                                        {!([\"Path Finding\", \"Graph Embeddings\", \"Similarity\"].includes(getGroup(task.algorithm, gdsVersion))) &&\n                                        <Menu.Item\n                                            name='Visualisation'\n                                            active={activeResultsItem === 'Visualisation'}\n                                            onClick={handleResultsMenuItemClick}\n                                        />}\n                                        {getGroup(task.algorithm, gdsVersion) === \"Graph Embeddings\" &&\n                                        <Menu.Item\n                                        name=\"Scatter Plot\"\n                                        active={activeResultsItem === \"Scatter Plot\"}\n                                        onClick={handleResultsMenuItemClick}\n                                        />}\n                                    </Menu>\n                                </div>\n                                <div style={{flexGrow: \"1\", paddingLeft: \"10px\"}}>\n\n                                    {!(activeGroup === 'Path Finding' || activeGroup === 'Similarity') ?\n                                    <div style={getResultsStyle('Visualisation')}>\n                                        <NewVisView task={task} active={activeResultsItem === 'Visualisation'}/>\n                                    </div> : null}\n\n                                    {activeGroup === 'Centralities' ?\n                                        <div style={getResultsStyle('Chart')}>\n                                            <ChartView task={task} active={activeResultsItem === 'Chart'}/>\n                                        </div> : null}\n\n                                    {activeGroup === 'Graph Embeddings' ?\n                                    <div style={getResultsStyle('Scatter Plot')}>\n                                        <TSNEView task={task} active={activeResultsItem === 'Scatter Plot'}/>\n                                    </div> : null}\n\n                                    <div style={getResultsStyle('Table')}>\n                                        <TableView task={task} gdsVersion={props.gdsVersion}/>\n                                    </div>\n                                </div>\n\n                            </div>\n\n                        </div>\n                    </div>\n\n                </React.Fragment>\n            }\n        </div></React.Fragment>\n    )\n\n}\n","import {useHistory, useParams} from \"react-router-dom\";\nimport {SingleTask} from \"./SingleTask\";\nimport {onRunAlgo} from \"../services/tasks\";\nimport React from \"react\";\n\nexport const SpecificTask = (props) => {\n    const history = useHistory();\n    const {tasks} = props\n\n    const {taskId} = useParams();\n    const currentTask = tasks.find(task => task.taskId === taskId)\n    return <SingleTask\n        metadata={props.metadata}\n        onRunAlgo={onRunAlgo}\n        onCopyAlgo={(group, algorithm, newParameters, formParameters) => history.push({\n            pathname: '/algorithms/new',\n            state: { group, algorithm, newParameters, formParameters}\n        })}\n        task={currentTask}\n        totalPages={tasks.length}\n        gdsVersion={props.metadata.versions.gdsVersion}\n    />\n}\n","import React from 'react'\nimport {refreshMetadata} from \"./Startup/startup\";\nimport {limit} from \"../ducks/settings\";\nimport {addDatabase, initLabel} from \"../ducks/metadata\";\nimport {\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"../ducks/metadata\";\nimport {connect} from \"react-redux\";\nimport {Link, Redirect, Route, Switch, useHistory, useRouteMatch} from \"react-router-dom\";\nimport {Button, List} from \"semantic-ui-react\";\nimport {SpecificTask} from \"./SpecificTask\";\nimport {removeTask} from \"../ducks/tasks\";\n\n\nconst MainContent = (props) => {\n    const history = useHistory();\n\n    const mainStyle = {\n        display: 'flex',\n    }\n\n    const onComplete = () => {\n        refreshMetadata(props)\n    }\n\n    if(!props.tasks || props.tasks.length === 0 ) {\n        return <Redirect to=\"/algorithms/new\" />\n    }\n\n    let { path, url } = useRouteMatch();\n\n    return <Switch>\n        <Route exact path={path}>\n            <div>\n                <nav className=\"top-nav\">\n                    <Button onClick={() => {\n                    history.push(\"/algorithms/new\")\n                    }} icon=\"plus\" labelPosition=\"right\" content=\"New algorithm\" className=\"new-algorithm\" />\n                </nav>\n\n                <div className=\"page-heading\">\n                    Algorithm Runs\n                </div>\n\n                {props.tasks.map(task =>\n                    <div className=\"algorithm-item\" key={task.taskId}>\n                        <Link to={\"/algorithms/\" + task.taskId}>{task.group} / {task.algorithm}</Link>\n\n                        <Button onClick={() => {\n                            props.removeTask(task.taskId)\n                        }} icon=\"close\" className=\"close\" size=\"tiny\"/>\n\n                        <p className=\"start-time\">\n                            Started at: {task.startTime.toLocaleTimeString()}\n                        </p>\n\n                        <List className=\"algorithm-detail\">\n                            <List.Item>\n                                <label>Node Projection</label>\n                                <span>{task.parameters.config.nodeProjection}</span>\n                            </List.Item>\n                            <List.Item>\n                                <label>Relationship Projection</label>\n                                <span>\n                                    {(typeof task.parameters.config.relationshipProjection == \"object\") ?\n                                        task.parameters.config.relationshipProjection.relType.type + ', ' + task.parameters.config.relationshipProjection.relType.orientation :\n                                        task.parameters.config.relationshipProjection}\n                                    {task.parameters.config.relationshipWeightProperty ? \", \" + task.parameters.config.relationshipWeightProperty : null}\n                                </span>\n                            </List.Item>\n\n                        </List>\n\n                    </div>)}\n            </div>\n        </Route>\n        <Route path={`${path}/:taskId`}>\n            <div>\n                <nav className=\"top-nav\">\n                    <Button onClick={() => {\n\n                        history.push(\"/algorithms/\")\n                    }} icon=\"left arrow\" labelPosition=\"left\" content=\"All algorithms\" className=\"back-to-algorithms\" />\n                    <Button onClick={() => {\n                        history.push(\"/algorithms/new\")\n                    }} icon=\"plus\" labelPosition=\"right\" content=\"New algorithm\"  style={{marginLeft: \"3px\"}} className=\"new-algorithm\" />\n                </nav>\n                <SpecificTask metadata={props.metadata} tasks={props.tasks} />\n            </div>\n        </Route>\n    </Switch>\n\n    // return (\n    //     <div style={mainStyle}>\n    //         <div style={{width: '100%', justifyContent: \"center\", flexGrow: \"1\"}}>\n    //             <AlgoResults onComplete={onComplete}/>\n    //         </div>\n    //     </div>\n    // )\n\n}\n\nconst mapStateToProps = state => ({\n    activeMenuItem: state.menu.item,\n    limit: state.settings.limit,\n    communityNodeLimit: state.settings.communityNodeLimit,\n    metadata: state.metadata,\n    tasks: state.tasks,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateLimit: value => dispatch(limit(value)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setGds: version => dispatch(setVersions(version)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys)),\n    removeTask: (taskId) => {\n        dispatch(removeTask({ taskId}))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainContent)\n","import {connect} from \"react-redux\";\nimport {addTask, completeTask, runTask} from \"../ducks/tasks\";\nimport {getActiveDatabase} from \"../services/stores/neoStore\";\nimport {\n    addDatabase,\n    initLabel,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"../ducks/metadata\";\nimport {useHistory} from \"react-router-dom\";\nimport React from \"react\";\nimport {refreshMetadata} from \"./Startup/startup\";\nimport {constructNewTask, duplicateTask, onRunAlgo} from \"../services/tasks\";\nimport {Button} from \"semantic-ui-react\";\nimport {NewTopBar} from \"./Results/SuccessTopBar\";\nimport AlgorithmForm from \"./AlgorithmForm\";\n\n\nexport const NewAlgorithmView = (props) => {\n    const history = useHistory();\n    const [newTask, setNewTask] = React.useState(null)\n\n    const onComplete = () => {\n        refreshMetadata(props)\n    }\n\n    React.useEffect(() => {\n        setNewTask(constructNewTask(props.activeGroup, props.activeAlgorithm, props.limit, props.communityNodeLimit, props.metadata.versions.gdsVersion))\n    }, [props.activeGroup, props.activeAlgorithm])\n\n    React.useEffect(() => {\n        if (props.location.state) {\n            const {group, algorithm, newParameters, formParameters} = props.location.state\n            setNewTask(duplicateTask(group, algorithm, newParameters, formParameters))\n        }\n    }, [props.location.state])\n\n    const addLimits = (params) => {\n        return {\n            ...params,\n            limit: props.limit,\n            communityNodeLimit: props.communityNodeLimit\n        }\n    }\n\n    const {versions} = props.metadata\n\n    const header = props.tasks && props.tasks.length > 0 ?\n        <nav className=\"top-nav\">\n            <Button onClick={() => {\n\n                history.push(\"/algorithms/\")\n            }} icon=\"left arrow\" labelPosition=\"left\" content=\"All algorithms\" className=\"back-to-algorithms\"/>\n        </nav> : null\n\n    return newTask && <div>\n        {header}\n        <div className=\"page-heading\">\n            New Algorithm Run\n        </div>\n        <div className=\"top-level-container\">\n            <NewTopBar/>\n            <AlgorithmForm\n                task={newTask}\n                onComplete={onComplete}\n                onRun={(newParameters, formParameters, persisted) => {\n                    props.addTask(newTask.taskId, newTask.group, newTask.algorithm, addLimits(newParameters), formParameters, persisted)\n                    onRunAlgo(newTask, newParameters, formParameters, persisted, versions, props.completeTask, onComplete, props.runTask)\n                    history.push(\"/algorithms/\" + newTask.taskId)\n                }}\n                onCopy={() => {}}\n            />\n        </div>\n    </div>\n}\nexport const NewAlgorithm = connect(state => ({\n    tasks: state.tasks,\n    limit: state.settings.limit,\n    metadata: state.metadata,\n    activeGroup: state.algorithms.group,\n    activeAlgorithm: state.algorithms.algorithm,\n    communityNodeLimit: state.settings.communityNodeLimit,\n}), (dispatch, ownProps) => ({\n    runTask: (taskId, query, namedGraphQueries, parameters, formParameters, persisted) => {\n        dispatch(runTask({taskId, query, namedGraphQueries, parameters, formParameters, persisted}))\n    },\n    addTask: (taskId, group, algorithm, parameters, formParameters, persisted) => {\n        const task = {\n            group,\n            algorithm,\n            taskId,\n            parameters,\n            formParameters,\n            persisted,\n            startTime: new Date(),\n            database: getActiveDatabase()\n        }\n        dispatch(addTask({...task}))\n    },\n    completeTask: (taskId, result, error) => {\n        dispatch(completeTask({taskId, result, error}))\n    },\n    setGds: version => dispatch(setVersions(version)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys)),\n}))(NewAlgorithmView)\n","import React from \"react\";\n\nconst baseRecipes = {\n    \"directed-graph-influencers\": {\n        name: \"Directed Graph Influencers\",\n        shortDescription: \"This recipe contains algorithms that find the most influential nodes in a directed graph.\",\n        completionMessage: \"You should now have a good idea about how to find the most influential or central nodes in your graph.\",\n        slides: [\n            {\n                group: \"Centralities\",\n                algorithm: \"Degree\",\n                title: \"Degree Centrality\",\n                overrides: {formParameters: {}},\n                description: <React.Fragment>\n                    <p>\n                        Degree Centrality finds the most influential or central nodes in a graph based on the\n                        number of relationships that the node has.\n                    </p>\n                    <p>\n                        By default, it counts the number of incoming relationships but this value can be\n                        configured via the <i>Relationship Orientation</i> parameter.\n                    </p>\n                    <p>\n                        The weighted degree centrality for each node is computed by providing an optional\n                        relationship property name via the <i>Weight Property</i> parameter.\n                    </p>\n                </React.Fragment>\n            },\n            {\n                group: \"Centralities\",\n                algorithm: \"Page Rank\",\n                title: \"Page Rank\",\n                overrides: {formParameters: {}},\n                description: <React.Fragment>\n                    <p>\n                        Page Rank finds the nodes that have the great transitive influence.\n                    </p>\n                    <p>\n                        This means that it's not only how many incoming relationships that matters, it's also the\n                        importance of the nodes on the other side of that relationship.\n                    </p>\n                </React.Fragment>\n            },\n            {\n                group: \"Centralities\",\n                algorithm: \"Betweenness\",\n                title: \"Betweenness Centrality\",\n                overrides: {formParameters: {}},\n                description: <React.Fragment>\n                    <p>\n                        The Betweenness Centrality algorithm detects the amount of influence a node has over the\n                        flow of\n                        information in a graph.\n                    </p>\n                    <p>\n                        It is often used to find nodes that serve as a bridge from one part of a graph to another.\n                    </p>\n                    <p>\n                        We can use this algorithm to find nodes that are well connected to a sub graph within the\n                        larger\n                        graph.\n                    </p>\n                </React.Fragment>\n            }\n        ]\n    },\n    \"community-detection\": {\n        name: \"Community Detection on Multi Partite Graph\",\n        shortDescription: \"This recipe contains a sequence of algorithms for detecting communities in a multi partite (more than 1 label) graph.\",\n        completionMessage: \"You should now understand how to find communities in a graph containing multiple labels\",\n        slides: [\n            {\n                group: \"Similarity\",\n                algorithm: \"Node Similarity\",\n                title: \"Jaccard Similarity\",\n                overrides: {\n                    formParameters: {persist: true},\n                    parameters: {config: {}},\n                    formParametersToPassOn: [\n                        {source: \"writeRelationshipType\", target: \"relationshipType\"},\n                        {source: \"writeProperty\", target: \"weightProperty\"},\n                        {source: \"label\", target: \"label\"}\n                    ],\n                    slidesToUpdate: [1]\n                },\n                description: <React.Fragment>\n                    <p>\n                        The Jaccard or Node similarity algorithm computes the similarity of pairs of nodes based on\n                        the\n                        nodes that they're connected to.\n                    </p>\n\n                    <p>\n                        We can use this algorithm to create a similarity graph by setting <i>Store results?</i> and\n                        specifying <i>Write Property</i> and <i>Write Relationship Type</i>.\n                    </p>\n\n                    <p>\n                        This technique is useful for creating relationships between nodes where none exist in the\n                        initial graph. e.g. we could create relationships between <i>Recipe</i> nodes based on\n                        the <i>Ingredient</i> nodes that they have in common.\n                    </p>\n\n\n                </React.Fragment>\n            },\n            {\n                group: \"Community Detection\",\n                algorithm: \"Label Propagation\",\n                title: \"Label Propagation\",\n                overrides: {formParameters: {}, parameters: {config: {}}},\n                description: <React.Fragment>\n                    <p>\n                        The Label Propagation Algorithm is a fast algorithm for finding communities in a graph,\n                        which it\n                        does by propagating labels and forming communities based on this process of label\n                        propagation\n                    </p>\n\n                    <p>\n                        On initialisation, every node has its own label, but as labels propagate, densely connected\n                        groups of nodes quickly reach a consensus on a unique label. At the end of the propagation\n                        only\n                        a few labels will remain.\n                    </p>\n\n                </React.Fragment>\n            }\n        ]\n    }\n\n};\n\n\nexport const recipes = (gdsVersion) => {\n    const version = parseInt(gdsVersion.split(\".\")[0])\n    if (version >= 2) {\n        baseRecipes[\"categorise-unstructured-data\"] = {\n            name: \"Categorise Unstructured Data\",\n            shortDescription: \"This recipe contains a sequence of algorithms for creating a graph structure based on node property similarities.\",\n            completionMessage: \"You should now understand how to find build a graph from unstructured data.\",\n            slides: [\n                {\n                    group: \"Similarity\",\n                    algorithm: \"K-Nearest Neighbors\",\n                    title: \"K-Nearest Neighbors\",\n                    overrides: {\n                        formParameters: {persist: true},\n                        parameters: {config: {}},\n                        formParametersToPassOn: [\n                            {source: \"writeRelationshipType\", target: \"relationshipType\"},\n                            {source: \"writeProperty\", target: \"weightProperty\"},\n                            {source: \"label\", target: \"label\"}\n                        ],\n                        slidesToUpdate: [1,2]\n                    },\n                    description: <React.Fragment>\n                        <p>\n                            The K-Nearest Neighbors algorithm computes a distance value for all node pairs in the graph and creates new relationships between each node and its k nearest neighbors.\n                            The distance is calculated based on node properties.\n                        </p>\n\n\n                    </React.Fragment>\n                },\n                {\n                    group: \"Community Detection\",\n                    algorithm: \"Louvain\",\n                    title: \"Louvain\",\n                    overrides: {formParameters: {}, parameters: {config: {}}},\n                    description: <React.Fragment>\n                        <p>\n                            The Louvain method for community detection is an algorithm for detecting communities in networks.\n                            It maximizes a modularity score for each community, where the modularity quantifies the quality of an assignment of nodes to communities.\n                        </p>\n\n                    </React.Fragment>\n                },\n                {\n                    group: \"Community Detection\",\n                    algorithm: \"Label Propagation\",\n                    title: \"Label Propagation\",\n                    overrides: {formParameters: {}, parameters: {config: {}}},\n                    description: <React.Fragment>\n                        <p>\n                            The Label Propagation Algorithm is a fast algorithm for finding communities in a graph,\n                            which it\n                            does by propagating labels and forming communities based on this process of label\n                            propagation\n                        </p>\n\n                        <p>\n                            On initialisation, every node has its own label, but as labels propagate, densely connected\n                            groups of nodes quickly reach a consensus on a unique label. At the end of the propagation\n                            only\n                            a few labels will remain.\n                        </p>\n\n                    </React.Fragment>\n                }\n            ]\n        }\n        return baseRecipes\n    } else {\n        return baseRecipes\n    }\n}\n","import {connect} from \"react-redux\";\nimport {selectAlgorithm} from \"../ducks/algorithms\";\nimport React from \"react\";\nimport {getAlgorithmDefinitions, getGroup} from \"./algorithmsLibrary\";\nimport {v4 as generateTaskId} from \"uuid\";\nimport {ADDED, COMPLETED, FAILED, removeTask, RUNNING} from \"../ducks/tasks\";\nimport {getActiveDatabase} from \"../services/stores/neoStore\";\nimport {Button, Card, CardGroup, Container, Icon, Menu, Message} from \"semantic-ui-react\";\nimport {SuccessTopBar} from \"./Results/SuccessTopBar\";\nimport {TableView} from \"./Results/TableView\";\nimport CodeView from \"./CodeView\";\nimport {ChartView} from \"./Results/ChartView\";\nimport {communityNodeLimit, limit} from \"../ducks/settings\";\nimport {\n    addDatabase,\n    initLabel,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"../ducks/metadata\";\nimport {AlgoFormView} from \"./AlgorithmForm\";\n\nimport {Route, Switch, useHistory, useParams, useRouteMatch} from \"react-router-dom\";\nimport {onRunAlgo} from \"../services/tasks\";\nimport {refreshMetadata} from \"./Startup/startup\";\nimport {FailedTopBar} from \"./Results/FailedTopBar\";\nimport {sendMetrics} from \"./metrics/sendMetrics\";\nimport {recipes} from \"./Recipes\";\nimport {NewVisView} from \"./Results/NewVisView\";\n\nconst containerStyle = {\n    padding: '1em'\n}\n\n\nconst RecipeView = (props) => {\n    let { path, url } = useRouteMatch();\n\n    return <Switch>\n        <Route exact path={path}>\n            <React.Fragment>\n                <div className=\"page-heading\">\n                    Algorithm Recipes\n                </div>\n\n            <div style={containerStyle}>\n                <p>\n                    Algorithm Recipes are collections or series of algorithms that provide provide useful insights on\n                    certain types of graphs or can be combined to solve data science problems.\n                </p>\n                <Recipes recipes={recipes(props.metadata.versions.gdsVersion)}/>\n\n\n            </div>\n            </React.Fragment>\n        </Route>\n        <Route path={`${path}/:recipeId`}>\n            <IndividualRecipe />\n        </Route>\n    </Switch>\n}\n\nconst START = \"start\"\nconst END = \"end\"\nconst SLIDE = \"slide\"\n\nconst IndividualRecipeView = (props) => {\n    const panelRef = React.createRef()\n    const [selectedSlide, setSelectedSlide] = React.useState(0)\n    const [page, setPage] = React.useState(START)\n\n\n    const [localRecipes, setLocalRecipes] = React.useState(recipes(props.metadata.versions.gdsVersion))\n\n    const addLimits = (params) => {\n        return {\n            ...params,\n            limit: props.limit,\n            communityNodeLimit: props.communityNodeLimit\n        }\n    }\n\n    const {recipeId} = useParams();\n\n    const addTaskIfMissing = () => {\n        const selectedRecipe = localRecipes[recipeId];\n\n        if (!selectedRecipe.slides[selectedSlide].task) {\n            setLocalRecipes(localRecipes => {\n                const newLocalRecipes = Object.assign({}, localRecipes)\n                const newSelectedRecipe = newLocalRecipes[recipeId]\n\n                const group = newSelectedRecipe.slides[selectedSlide].group\n                const algorithm = newSelectedRecipe.slides[selectedSlide].algorithm\n                const {parameters, parametersBuilder} = getAlgorithmDefinitions(group, algorithm, props.metadata.versions.gdsVersion)\n\n                const parametersWithOverrides = Object.assign(parameters, newSelectedRecipe.slides[selectedSlide].overrides.formParameters)\n\n                const params = parametersBuilder({\n                    ...parametersWithOverrides,\n                    requiredProperties: Object.keys(parametersWithOverrides)\n                })\n\n                const formParameters = addLimits(parametersWithOverrides)\n                const taskId = generateTaskId()\n\n                newSelectedRecipe.slides[selectedSlide].task = {\n                    group: group,\n                    algorithm: algorithm,\n                    status: ADDED,\n                    taskId: taskId,\n                    parameters: params,\n                    formParameters,\n                    persisted: false,\n                    startTime: new Date(),\n                    database: getActiveDatabase(),\n                    activeItem: \"Configure\",\n                    activeResultsItem: \"Table\"\n                }\n                return newLocalRecipes\n            })\n        }\n    }\n\n    React.useEffect(() => {\n        if(page === SLIDE) {\n            addTaskIfMissing()\n        }\n    }, [selectedSlide, recipeId, page])\n\n    const selectedRecipe = localRecipes[recipeId]\n    const maxSlide = selectedRecipe.slides.length\n\n    const getStyle = name => name === selectedRecipe.slides[selectedSlide].task.activeItem ? {display: ''} : {display: 'none'}\n    const getStyleResultsTab = name => name === selectedRecipe.slides[selectedSlide].task.activeItem ? {display: 'flex'} : {display: 'none'}\n    const getResultsStyle = name => name === selectedRecipe.slides[selectedSlide].task.activeResultsItem ? {display: ''} : {display: 'none'}\n\n    const selectedTask = selectedRecipe.slides[selectedSlide].task\n    const activeGroup = selectedTask && selectedTask.group\n\n    const updateSelectedTask = (updates) => {\n        setLocalRecipes(localRecipes => {\n            const newLocalRecipes = Object.assign({}, localRecipes)\n            const existingTask = newLocalRecipes[recipeId].slides[selectedSlide].task\n            newLocalRecipes[recipeId].slides[selectedSlide].task = {...existingTask, ...updates}\n            return newLocalRecipes\n        })\n    }\n\n    const updateSlide = (slideIds, formParameters) => {\n        setLocalRecipes(localRecipes => {\n            const newLocalRecipes = Object.assign({}, localRecipes)\n\n            slideIds.forEach(slideId => {\n                const overrides = newLocalRecipes[recipeId].slides[slideId].overrides\n                overrides.formParameters = Object.assign(overrides.formParameters, formParameters)\n            })\n\n            return newLocalRecipes\n        })\n    }\n\n    const handleResultsMenuItemClick = (e, {name}) => {\n        updateSelectedTask({activeResultsItem: name})\n    }\n\n    return <React.Fragment>\n        <TopNav selectedRecipe={selectedRecipe}/>\n        <div className=\"recipe-body\">\n            <Container fluid>\n                <div className=\"recipes\">\n                    <div className=\"recipe\">\n                    {page === START && <StartSlide key=\"start-slide\" setPage={setPage} setSelectedSlide={setSelectedSlide} selectedRecipe={selectedRecipe} gdsVersion={props.metadata.versions.gdsVersion} />}\n                    {page === END && <EndSlide key=\"end-slide\" selectedRecipe={selectedRecipe}/>}\n                    {page === SLIDE && selectedTask &&\n                        <React.Fragment>\n                        <div className=\"left\">\n                          <span className=\"recipe-heading\">\n                              {selectedRecipe.slides[selectedSlide].title}\n                          </span>\n                            {selectedRecipe.slides[selectedSlide].description}\n                        </div>\n                        <div className=\"right\">\n                            { selectedTask.status !== FAILED &&\n                            <SuccessTopBar task={selectedTask} panelRef={props.panelRef}\n                                           activeItem={selectedTask.activeItem}\n                                           handleMenuItemClick={(e, {name}) => updateSelectedTask({activeItem: name})}\n                            />}\n\n                            { selectedTask.completed && selectedTask.status === FAILED &&\n                            <FailedTopBar activeItem={selectedTask.activeItem}\n                                          handleMenuItemClick={(e, {name}) => updateSelectedTask({activeItem: name})}\n                            />}\n\n                            <div ref={panelRef}>\n                                <div style={getStyle(\"Configure\")}>\n                                    <AlgoForm\n                                        selectedAlgorithmReadOnly={true}\n                                        task={selectedTask}\n                                        limit={props.limit}\n                                        onRun={(newParameters, formParameters, persisted) => {\n                                            onRunAlgo(selectedTask, newParameters, formParameters, persisted, props.metadata.versions,\n                                                (taskId, result, error) => {\n                                                    sendMetrics(\"neuler\", \"ran-recipe-algorithm\", {algorithm: selectedTask.algorithm, group: selectedTask.group, recipe: selectedRecipe.name})\n                                                    if (error) {\n                                                        updateSelectedTask({status: FAILED, result, error, completed: true})\n                                                    } else {\n                                                        updateSelectedTask({status: COMPLETED, result, completed: true})\n\n                                                        const overrides = selectedRecipe.slides[selectedSlide].overrides;\n                                                        const formParametersToPassOn = overrides.formParametersToPassOn || []\n                                                        if(overrides.slidesToUpdate) {\n                                                            updateSlide(overrides.slidesToUpdate,\n                                                                Object.assign({}, ...formParametersToPassOn.map(key => ({[key.target]: formParameters[key.source]})))\n                                                            )\n                                                        }\n                                                    }\n                                                },\n                                                () => {\n                                                    refreshMetadata(props)\n                                                },\n                                                (taskId, query, namedGraphQueries, parameters, formParameters, persisted) => {\n                                                    updateSelectedTask({\n                                                        activeItem: \"Results\",\n                                                        status: RUNNING,\n                                                        query,\n                                                        namedGraphQueries,\n                                                        parameters,\n                                                        formParameters,\n                                                        persisted,\n                                                        result: null\n                                                    })\n                                                })\n                                        }}\n                                        onCopy={(group, algorithm, newParameters, formParameters) => {\n                                            updateSelectedTask({\n                                                status: ADDED,\n                                                result: null,\n                                                query: null,\n                                                namedGraphQueries: null,\n                                                activeItem: \"Configure\",\n                                                formParameters,\n                                                parameters: newParameters\n                                            })\n                                        }}\n                                    />\n                                </div>\n\n                                {selectedTask.status !== FAILED &&\n                                <SuccessResults getStyleResultsTab={getStyleResultsTab}\n                                                selectedTask={selectedTask}\n                                                handleResultsMenuItemClick={handleResultsMenuItemClick}\n                                                activeGroup={activeGroup}\n                                                getResultsStyle={getResultsStyle}\n                                                gdsVersion={props.metadata.versions.gdsVersion}\n                                />}\n                                {selectedTask.completed && selectedTask.status === FAILED && <ErrorResults getStyleResultsTab={getStyleResultsTab} selectedTask={selectedTask} />   }\n\n\n                                <div style={getStyle('Code')}>\n                                    <CodeView task={selectedTask}/>\n                                </div>\n\n                            </div>\n                        </div>\n                        </React.Fragment>\n                    }\n                    </div>\n                </div>\n\n                <BottomNav selectedSlide={selectedSlide} setSelectedSlide={setSelectedSlide}\n                           page={page} setPage={setPage}\n                           maxSlide={maxSlide}\n                />\n            </Container>\n        </div>\n    </React.Fragment>\n}\n\nconst SuccessResults = ({getStyleResultsTab, selectedTask, handleResultsMenuItemClick, activeGroup, getResultsStyle, gdsVersion}) => {\n    return <div style={getStyleResultsTab(\"Results\")}>\n        <div>\n            <Menu pointing secondary vertical className=\"resultsMenu\">\n                <Menu.Item\n                    name='Table'\n                    active={selectedTask.activeItem === 'Table'}\n                    onClick={handleResultsMenuItemClick}\n                />\n\n                {getGroup(selectedTask.algorithm, gdsVersion) === \"Centralities\" &&\n                <Menu.Item\n                    name='Chart'\n                    active={selectedTask.activeResultsItem === 'Chart'}\n                    onClick={handleResultsMenuItemClick}\n                />}\n\n                {!(getGroup(selectedTask.algorithm, gdsVersion) === 'Path Finding' || getGroup(selectedTask.algorithm, gdsVersion) === 'Similarity') &&\n                <Menu.Item\n                    name='Visualisation'\n                    active={selectedTask.activeResultsItem === 'Visualisation'}\n                    onClick={handleResultsMenuItemClick}\n                />}\n\n            </Menu>\n        </div>\n        <div style={{flexGrow: \"1\", paddingLeft: \"10px\"}}>\n            {!(activeGroup === 'Path Finding' || activeGroup === 'Similarity') ?\n                <div style={getResultsStyle('Visualisation')}>\n                    <NewVisView task={selectedTask}\n                             active={selectedTask.activeResultsItem === 'Visualisation'}/>\n                </div> : null}\n\n            {activeGroup === 'Centralities' ?\n                <div style={getResultsStyle('Chart')}>\n                    <ChartView task={selectedTask}\n                               active={selectedTask.activeResultsItem === 'Chart'}/>\n                </div> : null}\n\n            <div style={getResultsStyle('Table')}>\n                <TableView task={selectedTask} gdsVersion={gdsVersion}/>\n            </div>\n        </div>\n    </div>\n}\n\nconst ErrorResults = ({selectedTask, getStyleResultsTab}) => {\n    return <div style={getStyleResultsTab('Results')}>\n        <Message warning compact>\n            <Message.Header>Algorithm failed to complete</Message.Header>\n            <p>{selectedTask.error}</p>\n        </Message>\n    </div>\n}\n\nconst mapStateToProps = state => ({\n    activeMenuItem: state.menu.item,\n    limit: state.settings.limit,\n    communityNodeLimit: state.settings.communityNodeLimit,\n    metadata: state.metadata,\n    tasks: state.tasks,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    updateLimit: value => dispatch(limit(value)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setGds: version => dispatch(setVersions(version)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys)),\n    removeTask: (taskId) => {\n        dispatch(removeTask({ taskId}))\n    }\n})\n\nconst IndividualRecipe =  connect(mapStateToProps, mapDispatchToProps)(IndividualRecipeView)\n\nconst StartSlide = ({selectedRecipe, gdsVersion, setPage, setSelectedSlide}) => {\n    return  <div className=\"left-right\">\n           <div className=\"title\">\n            <span className=\"title\">Welcome to the {selectedRecipe.name} recipe</span>\n           </div>\n\n            <p>{selectedRecipe.shortDescription}</p>\n\n        <div className=\"ui cards algorithms\">\n            {selectedRecipe.slides.map((slide, idx) => {\n                const algo = getAlgorithmDefinitions(slide.group, slide.algorithm, gdsVersion)\n                return <Card key={\"recipe\" + idx}>\n                <Card.Content>\n                    <Card.Header>{slide.title}</Card.Header>\n                    <Card.Description>\n                        {algo.description}\n                    </Card.Description>\n                </Card.Content>\n            </Card>})}\n        </div>\n\n        <div className='ui buttons'>\n            <Button className=\"try-recipe\" onClick={() => {\n                setSelectedSlide(0)\n                setPage(SLIDE)\n            }}>\n                Try out the recipe\n            </Button>\n        </div>\n\n        </div>\n\n}\n\nconst EndSlide = ({selectedRecipe}) => {\n    const history = useHistory();\n\n    return <div className=\"left-right\">\n        <div className=\"title\">\n        <span className=\"title\">Congratulations for completing the {selectedRecipe.name} recipe</span>\n        </div>\n        <p>\n            {selectedRecipe.completionMessage}\n            <br />\n            Below are some ideas for things to try next:\n        </p>\n\n        <div className=\"ui cards algorithms\">\n            <Card>\n                <Card.Content>\n                    <Card.Header>Another recipe</Card.Header>\n                    <Card.Description>\n                        Try out one of the other algorithm recipes\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <Button basic color='green' onClick={() => {\n                            history.push(\"/recipes/\")\n                        }}>\n                            Select\n                        </Button>\n                    </div>\n                </Card.Content>\n            </Card>\n\n            <Card>\n                <Card.Content>\n                    <Card.Header>Run single algorithm</Card.Header>\n                    <Card.Description>\n                        Try out any of the algorithms in the Graph Data Science Library.\n                    </Card.Description>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <Button basic color='green' onClick={() => {\n                            history.push(\"/algorithms/new\")\n                        }}>\n                            Select\n                        </Button>\n                    </div>\n                </Card.Content>\n            </Card>\n\n        </div>\n\n    </div>\n}\n\nconst BottomNav = ({selectedSlide, setSelectedSlide, page, setPage, maxSlide}) => {\n    switch (page) {\n        case START:\n            return <div className=\"recipe-navigation\">\n                <Icon size=\"large\" disabled={true} className=\"angle left disabled\"/>\n                <span>Browse</span>\n                <Icon size=\"large\" className=\"angle right\" onClick={() =>  {\n                    setPage(SLIDE)\n                    setSelectedSlide(0)\n                }} />\n            </div>\n        case END:\n            return <div className=\"recipe-navigation\">\n                <Icon size=\"large\" onClick={() => {\n                    setPage(SLIDE)\n                    setSelectedSlide(maxSlide-1)\n                }} className=\"angle left\"/>\n                <span>Browse</span>\n                <Icon size=\"large\" className=\"angle right disabled\" disabled={true}/>\n            </div>\n        default:\n            return <div className=\"recipe-navigation\">\n                <Icon size=\"large\" onClick={() => {\n                    if(selectedSlide === 0) {\n                        setPage(START)\n                    } else {\n                        setSelectedSlide(selectedSlide => selectedSlide - 1)\n                    }\n\n                }} className=\"angle left\"/>\n                <span>Browse</span>\n                {selectedSlide < (maxSlide) &&\n                <Icon size=\"large\" className=\"angle right\" onClick={() => {\n                    if(selectedSlide === maxSlide - 1) {\n                        setPage(END)\n                    } else {\n                        setSelectedSlide(selectedSlide => selectedSlide + 1)\n                    }\n                }}/>}\n            </div>\n    }\n}\n\nconst TopNav = ({selectedRecipe}) => {\n    const history = useHistory();\n\n    return <React.Fragment>\n        <nav className=\"top-nav\">\n            <Button onClick={() => {\n                history.push(\"/recipes/\")\n            }} icon=\"left arrow\" labelPosition=\"left\" content=\"All algorithm recipes\" className=\"back-to-algorithms\"/>\n        </nav>\n        <div className=\"page-heading\">\n            {selectedRecipe.name}\n        </div>\n    </React.Fragment>\n}\n\n\n\nconst Recipes = (props) => {\n    const history = useHistory();\n\n    const {recipes} = props\n    return  <CardGroup>\n        {Object.keys(recipes).map(key => {\n            return <Card key={key}>\n                <Card.Content>\n                    <Icon name='sitemap'/>\n                    <Card.Header>\n                        {recipes[key].name}\n                    </Card.Header>\n                    <Card.Meta>\n                        {recipes[key].shortDescription}\n                    </Card.Meta>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className='ui two buttons'>\n                        <Button basic color='green'  onClick={() => history.push('/recipes/' + key)}>\n                            Select\n                        </Button>\n                    </div>\n                </Card.Content>\n            </Card>\n        })}\n    </CardGroup>\n}\n\n\nconst AlgoForm = connect(state => ({\n    metadata: state.metadata,\n    limit: state.settings.limit,\n    communityNodeLimit: state.settings.communityNodeLimit,\n}), dispatch => ({\n    updateLimit: value => dispatch(limit(value)),\n    updateCommunityNodeLimit: value => dispatch(communityNodeLimit(value)),\n}))(AlgoFormView)\n\n\n\nexport const Recipe = connect(state => ({\n    metadata: state.metadata,\n    activeAlgorithm: state.algorithms.algorithm,\n    limit: state.settings.limit,\n}), dispatch => ({\n    selectAlgorithm: group => dispatch(selectAlgorithm(group)),\n}))(RecipeView)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {persistReducer, persistStore} from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport {PersistGate} from 'redux-persist/integration/react'\nimport {Container, Dimmer, Loader} from 'semantic-ui-react'\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\"\nimport {connect, Provider} from 'react-redux'\nimport rootReducer from './ducks'\nimport WebApp from \"./components/Startup/WebApp\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport AlgorithmsGroupMenu from \"./components/AlgorithmGroupsMenu\";\nimport {FeedbackForm} from \"./components/Feedback/FeedbackForm\";\nimport About from \"./components/About\";\nimport Datasets from \"./components/Datasets\";\nimport constants from \"./constants\";\nimport SelectDatabase from \"./components/SelectDatabase\";\nimport Home from \"./components/Home\";\nimport {\n    addDatabase,\n    initLabel,\n    setActiveDatabase,\n    setDatabases,\n    setLabels,\n    setNodePropertyKeys,\n    setPropertyKeys,\n    setRelPropertyKeys,\n    setRelationshipTypes,\n    setVersions\n} from \"./ducks/metadata\";\nimport MainContent from \"./components/MainContent\";\nimport {NewAlgorithm} from \"./components/NewAlgorithm\";\nimport {refreshMetadata} from \"./components/Startup/startup\";\nimport {Recipe} from \"./components/Recipe\";\n\n// Import apollo client nethods from services\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['settings']\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\nconst store = createStore(persistedReducer)\nconst persistor = persistStore(store)\n\n// Check for global and setup apollo variables\n\n\nconst LoaderComponent = <Dimmer active>\n    <Loader size='massive'>Connecting</Loader>\n</Dimmer>\n\nconst isNeo4jDesktop = !!window.neo4jDesktopApi\n// const isNeo4jDesktop = true\n\nconst App = WebApp\n\nconst RenderComponentView = (props) => {\n    const {View, connectionInfo, routeProps, activeAlgorithm, activeGroup} = props\n    const neo4jVersion = props.metadata && props.metadata.versions ? props.metadata.versions.neo4jVersion : false\n    if(!connectionInfo.credentials) {\n        return <Redirect to={{\n            pathname: \"/login\",\n            search: routeProps.location.search\n        }} />\n    }\n    const page = activeAlgorithm ?  `${constants.version}:${routeProps.location.pathname}:${activeGroup}/${activeAlgorithm}` : `${constants.version}:${routeProps.location.pathname}`\n    const [aboutActive, setAboutActive] = React.useState(false)\n    const [datasetsActive, setDatasetsActive] = React.useState(false)\n\n    return <Container fluid style={{height: '100%', display: \"flex\", flexFlow: \"column\", background: \"#fff\"}}>\n        <AlgorithmsGroupMenu metadata={props.metadata} setDatasetsActive={setDatasetsActive}\n                             credentials={props.connectionInfo.credentials}/>\n        <div style={{width: '100%', overflowY: 'auto', flexGrow: \"1\"}}>\n            <View {...routeProps} setAboutActive={setAboutActive} setDatasetsActive={setDatasetsActive}  />\n            <FeedbackForm page={page}/>\n            <About open={aboutActive} onClose={() => setAboutActive(false)}/>\n            <Datasets onComplete={() => refreshMetadata(props)} open={datasetsActive} onClose={() => setDatasetsActive(false)}\n                      neo4jVersion={neo4jVersion}/>\n        </div>\n    </Container>\n}\n\nconst mapStateToProps = state => ({\n    activeGroup: state.algorithms.group,\n    activeAlgorithm: state.algorithms.algorithm,\n    metadata: state.metadata,\n    labels: state.metadata.allLabels,\n    connectionInfo: state.connections,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setActiveDatabase: database => dispatch(setActiveDatabase(database)),\n    setDatabases: databases => dispatch(setDatabases(databases)),\n    setLabels: labels => dispatch(setLabels(labels)),\n    setRelationshipTypes: relationshipTypes => dispatch(setRelationshipTypes(relationshipTypes)),\n    setPropertyKeys: propertyKeys => dispatch(setPropertyKeys(propertyKeys)),\n    setRelPropertyKeys: propertyKeys => dispatch(setRelPropertyKeys(propertyKeys)),\n    setGds: version => dispatch(setVersions(version)),\n    setNodePropertyKeys: propertyKeys => dispatch(setNodePropertyKeys(propertyKeys)),\n    addDatabase: database => dispatch(addDatabase(database)),\n    initLabel: (database, label, color, propertyKeys) => dispatch(initLabel(database, label, color, propertyKeys))\n})\n\nconst RenderComponent = connect(mapStateToProps, mapDispatchToProps)(RenderComponentView)\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={LoaderComponent} persistor={persistor}>\n            <Router>\n                <Switch>\n                    <Route path=\"/recipes\"\n                           render={routeProps => (\n                               <RenderComponent routeProps={routeProps} View={Recipe} />\n                           )}\n                    />\n                    <Route path=\"/database\"\n                           render={routeProps => (\n                               <RenderComponent routeProps={routeProps} View={SelectDatabase} />\n                           )}/>\n\n                    <Route path=\"/algorithms/new\"\n                           render={routeProps => (\n                               <RenderComponent routeProps={routeProps} View={NewAlgorithm} />\n                           )}/>\n\n                    <Route path=\"/algorithms\"\n                           render={routeProps => (\n                               <RenderComponent routeProps={routeProps} View={MainContent} />\n                           )}/>\n\n                    <Route path=\"/login\"\n                           render={routeProps => (\n                               <App {...routeProps} isNeo4jDesktop={isNeo4jDesktop} />\n                           )}/>\n                    <Route path=\"/\"\n                           render={routeProps => (\n                               <RenderComponent routeProps={routeProps} View={Home} />\n                           )}/>\n\n                </Switch>\n            </Router>\n        </PersistGate>\n    </Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}